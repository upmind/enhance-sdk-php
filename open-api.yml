openapi: 3.0.3
info:
  description: orchd API docs
  version: 12.3.0
  title: orchd
tags:
  - name: install
    description: Setup related endpoints
  - name: settings
    description: Platform settings
  - name: servers
    description: Configuration for servers in the Enhance cluster
  - name: logins
    description: Login related endpoints
  - name: orgs
    description: Organization related endpoints
  - name: customers
    description: Endpoints related to customers of an organization
  - name: subscriptions
    description: Organization subscription related endpoints
  - name: members
    description: Organization member endpoints
  - name: websites
    description: Website related endpoints
  - name: domains
    description: Domain related endpoints
  - name: dns
    description: Dns zones related endpoints
  - name: ssl
    description: SSL/TLS related endpoints
  - name: emails
    description: Email related endpoints
  - name: mysql
    description: MySQL database related endpoints
  - name: apps
    description: Website application related endpoints
  - name: wordpress
    description: Website WordPress application related endpoints
  - name: plans
    description: Endpoints related to plans offered by an organization
  - name: invites
    description: Endpoints for issuing email invites for joining an organization
  - name: branding
    description: Reseller specific brandings for default language, contact details, etc
  - name: owner
    description: Endpoints for organization ownership management
  - name: tags
    description: Endpoints for manipulating tags belonging to an organization
  - name: backups
    description: Endpoints for managing website backups
  - name: importers
    description: Endpoints for importing from other systems

###############################################################################
# --------------------------------- Paths -------------------------------------
###############################################################################

paths:
  /version:
    get:
      tags:
        - install
      summary: Get the SemVer of the API service
      operationId: orchdVersion
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: string
                format: semver
                example: "1.0.0-alpha.35"
  /licence:
    get:
      tags:
        - licence
      summary: Get current licence status
      operationId: getLicenceInfo
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenceInfo"
    put:
      tags:
        - licence
      summary: >-
        Updates licence key if provided, and refresh licence status by calling home servers.
        NOTE: calling without any licence_key body, only refreshes the current licence status
      operationId: refreshLicence
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LicenceKey"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenceInfo"

  /status:
    get:
      tags:
        - install
      summary: Get the readiness status of the orchd service
      operationId: orchdStatus
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: string
                enum:
                  ["initialising", "updating", "initialisingServers", "ready"]
  /client_ip:
    get:
      tags:
        - servers
      summary: Reflect back the IP of the API consumer
      operationId: getClientIp
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: string
                format: ip

  ###############################################################################
  # -- Utils
  ###############################################################################

  /utils/wordpress/latest:
    get:
      tags:
        - wordpress
      summary: Get WordPress latest available version
      description: >-
        Returns the latest available WordPress version as published by the
        WordPress APIs.
      operationId: getWordpressLatestVersion
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WpLatestVersion"
  /utils/installable-apps:
    get:
      tags:
        - apps
      summary: Get all installable applications
      description: >-
        Returns all installable applications. Note that what apps can be
        installed on a website is ultimately decided by customer's subscription.

        See operationId `getInstallableApps`.
      operationId: getGlobalInstallableApps
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstallableWebsiteAppsFullListing"

  ###############################################################################
  # -- Platform settings
  ###############################################################################

  /settings:
    get:
      tags:
        - settings
      summary: Get all current settings
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getSettings
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsFullListing"
    post:
      tags:
        - settings
      summary: Create settings
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: createSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      responses:
        "201":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /settings/orchd/logs:
    get:
      tags:
        - settings
      summary: Get the orchd log settings
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getOrchdLogSettings
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrchdLogSettings"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Set the orchd log settings
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setOrchdLogSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLogSettings"
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /settings/orchd/prohibited_domains:
    get:
      tags:
        - settings
      summary: Get the platform level prohibited domains as a newline separated list
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getProhibitedDomains
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Set the platform level prohibited domains
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setProhibitedDomains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  # ANCHOR: login_policy_settings
  /settings/orchd/login-policy/settings:
    get:
      tags:
        - settings
      summary: Get the orchd login policy settings
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getOrchdLoginPolicySettings
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrchdLoginPolicySettings"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Set a single orchd login policy setting
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: addOrchdLoginPolicySettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicySettings"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid request
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  # ANCHOR_END: login_policy_settings

  # ANCHOR: ip_whitelist
  /settings/orchd/login-policy/ip-whitelist:
    get:
      tags:
        - settings
      summary: Get the orchd login policy ip whitelist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getOrchdLoginPolicyIpWhitelist
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrchdLoginPolicyIpList"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Set the orchd login policy ip whitelist as a whole
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: addOrchdLoginPolicyIpWhitelist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyIpList"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid request
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

    delete:
      tags:
        - settings
      summary: Delete an orchd login policy ip whitelist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteOrchdLoginPolicyIpWhitelist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyIpList"
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  # ANCHOR_END: ip_whitelist

  # ANCHOR: ip_blacklist
  /settings/orchd/login-policy/ip-blacklist:
    get:
      tags:
        - settings
      summary: Get the orchd login policy ip blacklist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getOrchdLoginPolicyIpBlacklist
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrchdLoginPolicyIpList"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Set the orchd login policy ip blacklist as a whole
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: addOrchdLoginPolicyIpBlacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyIpList"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid request
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

    delete:
      tags:
        - settings
      summary: Delete an orchd login policy ip blacklist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteOrchdLoginPolicyIpBlacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyIpList"
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  # ANCHOR_END: ip_blacklist

  # ANCHOR: email_whitelist
  /settings/orchd/login-policy/email-whitelist:
    get:
      tags:
        - settings
      summary: Get the orchd login policy email whitelist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getOrchdLoginPolicyEmailWhitelist
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrchdLoginPolicyEmailList"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Set the orchd login policy email whitelist as a whole
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: addOrchdLoginPolicyEmailWhitelist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyEmailList"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid request
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

    delete:
      tags:
        - settings
      summary: Delete an orchd login policy email whitelist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteOrchdLoginPolicyEmailWhitelist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyEmailList"
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  # ANCHOR_END: email_whitelist

  # ANCHOR: email_blacklist
  /settings/orchd/login-policy/email-blacklist:
    get:
      tags:
        - settings
      summary: Get the orchd login policy email blacklist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getOrchdLoginPolicyEmailBlacklist
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrchdLoginPolicyEmailList"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Set the orchd login policy email blacklist as a whole
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: addOrchdLoginPolicyEmailBlacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyEmailList"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid request
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

    delete:
      tags:
        - settings
      summary: Delete an orchd login policy email blacklist
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteOrchdLoginPolicyEmailBlacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchdLoginPolicyEmailList"
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  # ANCHOR_END: email_blacklist

  /settings/{name}:
    parameters:
      - $ref: "#/components/parameters/Name"
    get:
      tags:
        - settings
      summary: Get the specified setting
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getSetting
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Setting"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - settings
      summary: Create or update the specified setting
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: updateSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: An arbitrary JSON serializable value.
              oneOf:
                - type: string
                - type: number
                - type: boolean
                - type: array
                  items: {}
                - type: object
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

    delete:
      tags:
        - settings
      summary: Remove the specified setting
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteSetting
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /settings/service/{setting_kind}:
    parameters:
      - $ref: "#/components/parameters/SettingKind"
    get:
      tags:
        - settings
      summary: Get the value for a particular global service setting
      description: >-
        Returns the value for a particular global service setting as a JSON object
      operationId: getGlobalServiceSetting
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema: {}
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /settings/service/{setting_kind}/{setting_key}:
    parameters:
      - $ref: "#/components/parameters/SettingKind"
      - $ref: "#/components/parameters/SettingKey"
    put:
      tags:
        - settings
      summary: Set a single global service setting
      description: >-
        Set or replace a single global service setting
      operationId: setGlobalServiceSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceSettingValue"
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "202":
          description: Accepted but not applied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - settings
      summary: Delete a single global service setting
      description: >-
        Delete a single global service setting value
      operationId: deleteGlobalServiceSetting
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "202":
          description: Accepted but not applied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/settings/dns/default-records:
    post:
      tags:
        - dns
      summary: Create a default DNS record
      description: >-
        Creates a default record at a platform level which will be added to all
        newly created DNS zones.  In the value you can use $$origin$$ which will
        be substituted for the origin domain.
      operationId: createDefaultDnsRecord
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDefaultDnsRecord"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    get:
      tags:
        - dns
      summary: List default DNS records
      description: >-
        Lists the DNS records which will be added to all newly created DNS
        zones.
      operationId: listDefaultDnsRecords
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successfully listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DefaultDnsRecord"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/settings/dns/default-records/{record_id}:
    parameters:
      - $ref: "#/components/parameters/DefaultDnsRecordId"
    patch:
      tags:
        - dns
      summary: Update a default DNS record
      description: >-
        Updates a default DNS record, all fields are optional.
      operationId: updateDefaultDnsRecord
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDefaultDnsRecord"
      responses:
        "200":
          description: Updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    delete:
      tags:
        - dns
      parameters:
        - in: path
          name: record_id
          required: true
          schema:
            type: string
            format: uuid
      summary: Delete a default DNS record
      description: >-
        Delete a default DNS record.  Will not remove from existing zones.
      operationId: deleteDefaultDnsRecord
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /v2/settings/backup/remote_storage/s3:
    post:
      tags:
        - settings
      summary: Create S3 object storage settings at platform level.
      operationId: createBackupRemoteStorageS3
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBackupRemoteStorageS3"
      responses:
        "201":
          description: Created
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    get:
      tags:
        - settings
      summary: Get S3 object storage settings at platform level.
      operationId: getBackupRemoteStorageS3
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupRemoteStorageS3"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - settings
      summary: Delete S3 object storage settings at platform level.
      operationId: deleteBackupRemoteStorageS3
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - settings
      summary: Update S3 object storage settings at platform level.
      operationId: updateBackupRemoteStorageS3
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBackupRemoteStorageS3"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/settings/demo_mode:
    get:
      tags:
        - settings
      summary: Get the demo mode status of the orchd service
      operationId: getDemoMode
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemoMode"

  ###############################################################################
  # -- Reports
  ###############################################################################

  /reports/orchd/login-policy/blocked-ips:
    get:
      tags:
        - reports
      summary: Get blocked ips
      description: >-
        Returns a list of all currently active blocked ips.
      operationId: getLoginPolicyBlockedIps
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginPolicyBlockedIps"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /reports/orchd/login-policy/blocked-logins:
    get:
      tags:
        - reports
      summary: Get blocked logins
      description: >-
        Returns a list of all currently active blocked logins and ips.
      operationId: getLoginPolicyBlockedLogins
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginPolicyBlockedLogins"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  ###############################################################################
  # -- Servers
  ###############################################################################

  /servers/slaves:
    post:
      tags:
        - servers
      summary: Create a slave node
      description: >-
        This endpoint is called by the slave server installation script and not
        by the API. Only included for completeness.
      operationId: createSlave
      parameters:
        - $ref: "#/components/parameters/RegistrationKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlaveRegistration"
      responses:
        "201":
          description: Registration successful
        "400":
          description: Invalid input
        "401":
          description: Invalid registration key

  /servers:
    get:
      tags:
        - servers
      summary: Get installed servers
      description: >-
        Returns a list of all servers in this Enhance cluster (including the
        master server and all slaves).

        The result set of servers may optionally be sorted, paginated, as well
        as grouped by a server's group id. If not grouped, the returned items
        are a flat list of server resource objects, whereas if grouped, the
        returned items are an object (map) of list of servers mapped to their
        group ids.

        Grouping is applied after pagination and sorting, and in the latter case
        the servers within one group will be sorted. Therefore, if paginated,
        the last group in items, i.e. the group on the "border", may not contain
        all servers belonging to that group if the given limit was such as would
        be exceeded if all its servers were included. In such a case, the
        remaining servers of the group are returned in the next batch.

        Example:
        Assume servers server1, server2, server3, server4, server5 and groups
        group1, group2, where group1 contains server1 and group2 contains
        server2, server3, and server4 is not in a group. If the request
        specifies an offset of 0 and a limit of 2, then the returned structure
        may be as follows:
        ```json
        {
            items: {
                group1_id: [
                    server1,
                ],
                group2_id: [
                    server2,
                ],
            },
            total: 4
        }
        ```
        Then, in the next request, if offset is changed to 2, the returned items
        may be:
        ```json
        {
            items: {
                group2_id: [
                    server3,
                ],
                "ungrouped": [
                    server4
                ],
            },
            total: 4
        }
        ```
        Containing the rest of group2's servers as well as the ungrouped
        servers.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServers
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [address, mailbox, forwarders, autoresponders]
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServersListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /servers/{server_id}:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get server info
      description: >-
        Returns info about the selected server, if it exists.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerInfo
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerInfo"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    patch:
      tags:
        - servers
      summary: Configure a server
      description: >-
        Configures a server with roles to enable or disable, a friendly name to
        give (for identification purposes), and/or to assign server to a group.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: configureServer
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerConf"
      responses:
        "204":
          description: Configuration successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - servers
      summary: Delete a (slave) server
      description: >-
        Removes a given server from the Enhance cluster.

        The server to be removed may only be a slave server as the master server
        cannot be removed (the error code `invalid_argument` is returned in such
        a case). Moreover, the server cannot be deleted if it has any data (such
        as running/suspended website, emails, etc) on it.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: deleteSlave
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "204":
          description: Deletion successful
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/appcd/version:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get the version of the running appcd
      description: >-
        Returns the version of the running appcd instance on this server.
      operationId: getAppcdVersion
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: string
                format: semver
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /servers/{server_id}/appcd/screenshot/config:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get the screenshot config of the running appcd
      description: >-
        Returns the screenshot config of the running appcd instance on this server.
      operationId: getAppcdScreenshotConfig
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScreenshotConfig"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    patch:
      tags:
        - servers
      summary: Update the screenshot config of the running appcd
      description: >-
        Update the screenshot config of the running appcd instance on this server.
      operationId: updateAppcdScreenshotConfig
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenshotConfigUpdate"
      responses:
        "200":
          description: Query successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /servers/{server_id}/domains:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get domains which are mapped to a server
      description: >-
        Returns the server hostname website for this server
      operationId: getServerHostnameWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerHostnameWebsite"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      tags:
        - servers
      summary: Create a domain which is mapped to a server
      description: >-
        Maps a hostname to a server by creating a special kind of website with
        kind `ServerHostname`.  This can be used for POP/IMAP/SMTP as well as HTTP.
        LetsEncrypt certificates will be issued if the DNS resolves.  Only one
        server hostname website will be created, additional domains will be added as
        aliases.
      operationId: createServerDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteAndDomainUuid"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /servers/{server_id}/domains/{domain_id}:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/DomainId"
    delete:
      tags:
        - servers
      summary: Delete a mapped server domain
      description: >-
        Deletes a server domain mapping and the domain itself.  Does not delete
        associated SSLs.
      operationId: deleteServerDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Server domain deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/primary-ip:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    put:
      tags:
        - servers
      summary: >-
        Updates the primary IP of the server in the database and in-memory metadata.
        This operation will not affect the IP used for service communication until
        the next restart of orchd.
        The new IP will be used for creation of new resources such as websites on
        this server but existing websites will not have their IP changed.
      operationId: updateServerPrimaryIp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: ip
      responses:
        "204":
          description: Update successful
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/servers/{server_id}/primary-ipv6:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    put:
      tags:
        - servers
      summary: >-
        Updates or sets the primary ipv6 address of the server.  This endpoint
        will not change existing websites' DNS but the new record will be
        applied to all future zones.
      operationId: updateServerPrimaryIpv6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: ipv6
      responses:
        "200":
          description: Update successful
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - servers
      summary: >-
        Deletes/unsets the primary IPv6 address for a server.
      operationId: deleteServerPrimaryIpv6
      responses:
        "204":
          description: IPv6 address delete
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/servers/{server_id}/database-role:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - name: mysqlKind
        in: query
        schema:
          $ref: "#/components/schemas/MysqlKind"
    put:
      tags:
        - servers
      summary: >-
        Enables the database role on a given ServerUuid
      operationId: installDatabaseRole
      responses:
        "200":
          description: Role enabled successfully
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - servers
      summary: >-
        Gets the MySQL kind for a given server.
      operationId: getDatabaseRoleMysqlKind
      responses:
        "200":
          description: Role enabled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MysqlKind"
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/servers/{server_id}/database-role/restart:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    post:
      tags:
        - servers
      summary: >-
        Restart MySQL gracefully
      operationId: restartMysql
      responses:
        "200":
          description: Mysql restart initiated
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/servers/{server_id}/my-cnf:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: >-
        Download my.cnf for a given server
      operationId: getMysqlMyCnf
      responses:
        "200":
          description: my.cnf content returned
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: >-
        Save a new my.cnf
      operationId: saveMysqlMyCnf
      requestBody:
        description: New my.cnf to be applied
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: My.cnf updated
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/servers/dns_pool:
    get:
      tags:
        - servers
      summary: Get DNS pool IPs
      operationId: getDnsPoolIps
      responses:
        "200":
          description: A list of all DNS server IPs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid argument
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/group:
    delete:
      tags:
        - servers
      summary: Delete server from group
      description: >-
        Deletes a server from the server group it is in, if any.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: deleteServerFromGroup
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/status:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get server status
      description: >-
        Returns system (online or offline) status of the given server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerStatus
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerStatus"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - servers
      summary: Set the status of one server.
      description: >-
        Set the status of one server by rebooting it for example.
      operationId: setServerStatus
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: >-
          The action to be taken for a specific server.
          When rebooting a server if the reboot is graceful before the server
          itself is rebooted all the installed services which make use of an
          underlying daemon will be asked to shutdown the daemon in question
          (such as mysqld, httpd or pdns). If the reboot is forced the underlying
          daemon stop will be forced as well.
          Note:
          Primary server reboots are never allowed.
          The server reboot will only happens 1 minute after the request is sent.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetServerStatus"
      responses:
        "200":
          description: Server status successfully set
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/decommissioned:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    put:
      tags:
        - servers
      summary: Set server to decommissioned
      description: >-
        If a server was decommissioned outside of Enhance, set its status to
        decommissioned.  This will remove the server from any status checks,
        will prevent website placement and will enable websites to be moved from
        it to another server using backups if available.
      operationId: setServerDecommissioned
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/webserver:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get web server
      description: >-
        Fetches the current web server kind for this server.
      operationId: getWebserverKind
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebserverKind"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: Set the web server kind for one server.
      description: >-
        Changes the web server kind for this server.  This will rebuild any
        application containers if required.  It may be a long running operation.
      operationId: setWebserverKind
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetWebserverKind"
      responses:
        "200":
          description: Web server kind successfully set
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/webserver/config/reset:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    post:
      tags:
        - servers
      summary: Reset the config for the web server to default.
      description: >-
        Will reset the config for the running web server to "known good"
        defaults.  Currently only available for LiteSpeed.
      operationId: resetWebServerConfig
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Web server config reset
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/webserver/litespeed/password:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    post:
      tags:
        - servers
      summary: Set a new LiteSpeed admin password.
      description: >-
        Will reset the LiteSpeed or OpenLiteSpeed admin password.  The
        username is always "admin".
      operationId: setLiteSpeedAdminPassword
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: LiteSpeed password has been reset
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/spam/ip_whitelist:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get the IP whitelist
      operationId: getSpamIpWhitelist
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: IP whitelist returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - servers
      summary: Add to the IP whitelist
      operationId: addSpamIpWhitelist
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: IP whitelist entry added
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - servers
      summary: Delete from the IP whitelist
      operationId: deleteFromSpamIpWhitelist
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: IP whitelist entry delete
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/spam/smtp_rate_limit_hourly:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get the hourly SMTP rate limit
      operationId: getSmtpRateLimitHourly
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Rate limit returned
          content:
            application/json:
              schema:
                type: number
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: Set the hourly SMTP rate limit
      operationId: setSmtpRateLimitHourly
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: number
      responses:
        "200":
          description: Rate limit set
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/spam/website_generated_rate_limit_hourly:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get the hourly website generated email rate limit
      operationId: getWebsiteGeneratedRateLimitHourly
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Rate limit returned
          content:
            application/json:
              schema:
                type: number
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: Set the hourly SMTP rate limit
      operationId: setWebsiteGeneratedRateLimitHourly
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: number
              nullable: true
      responses:
        "200":
          description: Rate limit set
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/email/hostname_override:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get the hostname override for the email server (postfix) if set
      description: If unset, this defaults to the system hostname
      operationId: getEmailServerHostnameOverride
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Hostname override or null
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailServerHostnameOverride"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: Set the hostname override for the email server (postfix)
      description: If unset, this defaults to the system hostname
      operationId: setEmailServerHostnameOverride
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Hostname override or null
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailServerHostnameOverride"
      responses:
        "200":
          description: Hostname set
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/email/spam/outbound_scanning:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get the status of outbound spam scanning
      operationId: getOutboundSpamScanningSettings
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Outbound spam scanning settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutboundSpamScanningSettings"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: Set the settings for outbound spam scanning
      operationId: setOutboundSpamScanningSettings
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Outbound spam settings
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OutboundSpamScanningSettings"
      responses:
        "200":
          description: Settings set
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/servers/{server_id}/modsec_status:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    put:
      tags:
        - servers
      summary: Set mod security status for a server
      description: >-
        If enabled, all websites on this server by default will
        have mod security enabled, unless explicitly disabled.
      operationId: setServerModSecurityStatus
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModSecStatus"
      responses:
        "200":
          description: mod_security status updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - servers
      summary: Get mod security status for a server
      operationId: getServerModSecurityStatus
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: mod_security status successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModSecStatus"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/servers/{server_id}/owasp:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    post:
      tags:
        - servers
      summary: Upgrade OWASP rules
      description: >-
        Will update the owasp rules to the latest version.  If the current version
        is the latest, it will be reinstalled.
      operationId: updateOwaspRules
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: OWASP rules updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - servers
      summary: Get the current and available version of the OWASP rules
      operationId: getOwaspRulesVersion
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: OWASP version successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OwaspVersion"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/servers/{server_id}/modsec_conf:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    put:
      tags:
        - servers
      summary: Set mod security config
      description: >-
        This config is included in the web server config when
        mod_security is enabled.
      operationId: setServerModSecurityConfig
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: mod_security config updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - servers
      summary: Get mod security config
      operationId: getServerModSecurityConfig
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: mod_security config successfully queried
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - servers
      summary: Delete custom mod_security config and reset to default
      operationId: resetServerModSecurityConfig
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: mod_security config customisations deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- Server stats
  ###############################################################################

  /servers/{server_id}/historic-stats:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/MetricsRangeStart"
      - $ref: "#/components/parameters/MetricsRangeEnd"
    get:
      tags:
        - servers
      summary: Get Server stats
      description: >-
        Returns server stats between the optional start and end date.
        Defaults to last 24 hours.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getServerStats
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerStatsFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/fs-quota-limits:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get whether FS quota was enabled on the server
      operationId: getFsQuotaStatus
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsQuotaStatus"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      tags:
        - servers
      summary: Enable FS quota limits on the server
      operationId: enableFsQuotaLimits
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: FS quota limits enabled
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /servers/{server_id}/uptime:
    get:
      tags:
        - servers
      summary: Get server uptime in seconds
      description: >-
        Returns system iowait of the given server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerUptime
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerUptime"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/iowait:
    get:
      tags:
        - servers
      summary: Get server iowait
      description: >-
        Returns system iowait of the given server in number of elapsed seconds
        since power-on.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerIowait
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerIowait"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/load:
    get:
      tags:
        - servers
      summary: Get server system load
      description: >-
        Returns one minute system load of the given server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerLoad
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerLoad"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/disk-usage:
    get:
      tags:
        - servers
      summary: Get server disk usage
      description: >-
        Returns disk usage of all disks on the given server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerDiskUsage
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerDiskUsage"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/memory-usage:
    get:
      tags:
        - servers
      summary: Get server memory usage
      description: >-
        Returns RAM and swap space usage on the given server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerMemoryUsage
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerMemoryUsage"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/network-stats:
    get:
      tags:
        - servers
      summary: Get server network stats
      description: >-
        Returns network stats of the given server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerNetworkStats
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerNetworkStats"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/interfaces:
    parameters:
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - servers
      summary: Get server network interfaces
      description: >-
        Returns the network interfaces of the given server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerNetworkInterfaces
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerNetworkInterfaces"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/interfaces/{interface}/ips:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/Interface"
    post:
      tags:
        - servers
      summary: Create server network interface secondary IP
      description: >-
        Creates a new secondary IP address for the server's network interface.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: createServerNetworkInterfaceIp
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewServerIp"
      responses:
        "200":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists

  /servers/{server_id}/interfaces/{interface}/ips/{ip}:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/Interface"
      - name: ip
        in: path
        description: The IP address in quad dot notation
        required: true
        schema:
          type: string
          format: ip
    delete:
      tags:
        - servers
      summary: Delete server network interface secondary IP
      description: >-
        Deletes a secondary IP address from the server's network interface.

        Fails if the IP address is the primary address of the server.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: deleteServerNetworkInterfaceIp
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/php/fpm:
    get:
      tags:
        - servers
      parameters:
        - $ref: "#/components/parameters/ServerId"
      summary: Get php-fpm config for all the websites on a server
      description: >-
        Returns a list of php-fpm settings for each website on the server.

        Settings are queried from the running PHP instance for each website.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerFpmSettings
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebsitePhpSettings"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/php/fpm/{website_id}:
    get:
      tags:
        - servers
      parameters:
        - $ref: "#/components/parameters/ServerId"
        - $ref: "#/components/parameters/WebsiteId"
      summary: Get php-fpm config for the specified website
      description: >-
        Returns a list of php-fpm settings for specified website on the server.

        Settings are queried from the running PHP instance for each website.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getWebsiteFpmSettings
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhpIni"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/roles:
    get:
      tags:
        - servers
      summary: Get server roles info
      description: >-
        Returns all configured roles of the given server.

        This includes generic information about the role as well as each service
        in the role.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerRoles
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesInfo"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/roles/{role}:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/ServerRole"
    get:
      tags:
        - servers
      summary: Get server role info
      description: >-
        Returns information about the given role on the server.

        This includes generic information about the role as well as each service
        in the role.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerRole
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/EmailRoleInfo"
                  - $ref: "#/components/schemas/BackupRoleInfo"
                  - $ref: "#/components/schemas/DatabaseRoleInfo"
                  - $ref: "#/components/schemas/ApplicationRoleInfo"
                  - $ref: "#/components/schemas/DnsRoleInfo"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: Install server role
      description: >-
        Installs a role on the server.

        The backup role takes additional parameters, but all other roles take no
        parameters.

        The block device size is optional and defaults to 100 GiB if not set.

        In this case, the mount point has to be the absolute path where the
        backup volume should be mounted. If there is already a valid btrfs
        backup volume mounted at this path, besides installing the `bkupd`
        service, this is a noop. In the case of an existing mount point, it is
        verified that it has at least the block device size bytes available.

        The block device is an absolute path that may or may not exist. If it
        exists, the block device size is used to verify if the device has at
        least the specified space available, if it doesn't exist, a loopback
        device is created with the this size.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: installServerRole
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Information for the backup role.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBackupRole"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - servers
      summary: Update server role
      description: >-
        Updates role and role state.

        A role, if activated on a server, may be in a state of enabled or
        disabled. If enabled, it means that new resources (e.g. websites for the
        application role) may be installed on the server, but if it's disabled,
        existing resources (e.g. websites) are kept but no new resources may be
        added.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: updateServerRole
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Info for updating the server role.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/UpdateEmailRole"
                - $ref: "#/components/schemas/UpdateBackupRole"
                - $ref: "#/components/schemas/UpdateDatabaseRole"
                - $ref: "#/components/schemas/UpdateApplicationRole"
                - $ref: "#/components/schemas/UpdateDnsRole"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - servers
      summary: Uninstall a server role
      description: >-
        Uninstalls role from server, if role has no websites assigned to it.

        If the role to be uninstalled is the control panel application role, the
        request returns an error, since this role may only be disabled but not
        uninstalled (since it is required to serve the control panel).

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: uninstallServerRole
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/roles/{role}/httpd_status:
    get:
      tags:
        - servers
      parameters:
        - $ref: "#/components/parameters/ServerId"
        - $ref: "#/components/parameters/ServerRole"
      summary: Get status of a running httpd server.
      description: >-
        `httpd` exposes some server stats through
        https://httpd.apache.org/docs/2.4/mod/mod_status.html API. Complete
        response from `httpd` is returned as a string.
      operationId: getHttpdStatus
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpdStatus"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /servers/registration-key:
    get:
      tags:
        - servers
      summary: Get slave registration key
      description: >-
        Key may be used to install yet more servers in the Enhance cluster.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getRegistrationKey
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /servers/registration-key/validate:
    post:
      tags:
        - servers
      summary: Validate slave registration key
      description: >-
        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: validateRegistrationKey
      parameters:
        - $ref: "#/components/parameters/RegistrationKey"
      responses:
        "200":
          description: Master org has been set up
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"

  /servers/install-cmd:
    get:
      tags:
        - servers
      summary: Get slave installation command
      description: >-
        Returns the install script that can be used to register more servers in
        the Enhance cluster.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getInstallCmd
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstallCmd"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /servers/groups:
    get:
      tags:
        - servers
      summary: Returns all server groups
      description: >-
        Each group object has a list of ids of the servers that are part of this
        group.

        Note that pagination may not be applied so this endpoint always returns
        all server groups.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getServerGroups
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerGroups"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      tags:
        - servers
      summary: Creates a new server group
      description: >-
        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: createServerGroup
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: The name of the new server group.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewServerGroup"
      responses:
        "201":
          description: Server group successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "409":
          description: Already exists

  /servers/groups/{group_id}:
    parameters:
      - name: group_id
        in: path
        description: The id of the server group.
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - servers
      summary: Updates an existing server group's name
      description: >-
        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: updateServerGroup
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Server group info.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerGroupUpdate"
      responses:
        "200":
          description: Server group successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - servers
      summary: Deletes an existing server group
      description: >-
        Does not delete servers in the group, but instead simply unlinks those
        servers from this group. These servers, if any, will end up not being in
        any group after this call succeeds.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: deleteServerGroup
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Server group successfully deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /servers/{server_id}/packages/update:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - name: systemPackageName
        in: query
        schema:
          $ref: "#/components/schemas/SystemPackageName"
    get:
      tags:
        - servers
      summary: Returns a map of upgradable packages.
      description: >-
        Map of upgradable system packages is returned along with latest Version
        if the package update is available.
      operationId: getSystemPackageUpdateInfo
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: List of upgradable packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpgradableSystemPackage"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - servers
      summary: Updates a system package to its latest version.
      description: >-
        Can only update installed package to its latest version.
      operationId: updateSystemPackage
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Package to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemPackage"
      responses:
        "200":
          description: Package Updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/settings/{setting_kind}:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/SettingKind"
    get:
      tags:
        - servers
      summary: Get the value for a particular setting
      description: >-
        Returns the value for a particular setting as a JSON object
      operationId: getServiceSetting
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema: {}
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /servers/{server_id}/settings/{setting_kind}/{setting_key}:
    parameters:
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/SettingKind"
      - $ref: "#/components/parameters/SettingKey"
    put:
      tags:
        - servers
      summary: Set a single service setting
      description: >-
        Set or replace a single service level override setting
      operationId: setServiceSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceSettingValue"
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "202":
          description: Accepted but not applied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - servers
      summary: Delete a single override setting
      description: >-
        Delete a single service setting value
      operationId: deleteServiceSetting
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "202":
          description: Accepted but not applied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Outcome"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- login/s
  ###############################################################################

  /logins:
    post:
      tags:
        - logins
      summary: Create a new login
      description: >-
        Creates a login in the realm.

        The login will be created in the same realm that the organization is in.

        Session holder must have admin or support privileges in the given
        organization or any parent thereof.
      operationId: createLogin
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - name: orgId
          description: >-
            The mandatory organization id to denote in which realm to create the
            login in. The login will be created in the same realm that the
            organization is in.
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInfo"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "409":
          description: Already exists
    get:
      tags:
        - logins
      summary: Query all logins
      description: >-
        Returns all logins registered in the control panel.

        Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
      operationId: getLogins
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/RealmId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - name: sortBy
          in: query
          description: >-
            The field by which to sort.
          required: false
          schema:
            type: string
            enum: [email, name, registrationDate]
      responses:
        "200":
          description: Logins successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginsListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /login/sessions:
    get:
      tags:
        - logins
      summary: Get all login sessions
      operationId: getSessions
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionsFullListing"
        "401":
          description: Invalid credentials
    post:
      tags:
        - logins
      summary: Create a new session for login
      description: >-
        Creates a new session for the login in a specific login realm.

        By default, the realm in which to look up a given login is dictated by
        the domain on which the request is made.  If it matches a mapped to a
        ControlPanel website belonging to an MO or a reseller then that MO or
        reseller is used as the relam from which to select the login.  If the
        login exists directly as a member of the chosen realm then that login
        will be selected in preference to any which exists within the realm
        itself.

        The realm derived from the control panel domain can be overridden with
        the realmId parameter to specify a particular reseller or the MO.

        The authentication result is a JWT session token and a list detailing
        the organizations in which login is a member.

        In case of 2FA, the authentication result is a JWT session token with
        empty body and 201 http status code.
      operationId: createSession
      parameters:
        - name: realmId
          in: query
          description: >-
            If set with the given realm's id (the parent id of an organization),
            then the login is authenticated in this realm. See the endpoint
            description for more info.
          required: false
          schema:
            type: string
            format: uuid
      requestBody:
        description: Login credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCreds"
      responses:
        "200":
          description: Successful
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginMemberships"
        "201":
          description: Verification pin was created
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResult"
        "400":
          description: Invalid input
        "401":
          description: Invalid credentials
        "403":
          description: Insufficient privileges
    delete:
      tags:
        - logins
      summary: Delete sessions
      operationId: deleteSessions
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          headers:
            Set-Cookie:
              schema:
                type: string
        "401":
          description: Invalid session
  /login/sessions/current:
    delete:
      tags:
        - logins
      summary: Delete current session
      operationId: deleteCurrentSession
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          headers:
            Set-Cookie:
              schema:
                type: string
        "401":
          description: Invalid session
  /login/sessions/sso:
    get:
      tags:
        - logins
      summary: Create a new session for login with a one-time-password
      description: >-
        Creates a new session for the login in a specific login realm,
        using a short lived one time password.

        This creates a session as well, with the difference that realmId is
        required and any 2FA will be bypassed.
      operationId: createOtpSession
      parameters:
        - name: otp
          in: query
          description: >-
            Contains a short lived otp for direct login bypassing any 2FA.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginMemberships"
        "400":
          description: Invalid input
        "401":
          description: Invalid credentials
        "403":
          description: Insufficient privileges
  /login/sessions/{session_id}:
    parameters:
      - name: session_id
        in: path
        description: The id of the login session.
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - logins
      summary: Delete current session
      operationId: deleteSession
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          headers:
            Set-Cookie:
              schema:
                type: string
        "401":
          description: Invalid session

  /login/2fa:
    post:
      tags:
        - logins
      summary: Verifies 2FA sign-in code.
      description: >-
        On success, standard session with cookie is returned, otherwise
        401 Unauthorized is returned with an empty cookie and the session is
        removed.

        Note that 2FA can only be used with the session cookie.
      operationId: verify2FA
      security:
        - sessionCookie: []
      requestBody:
        description: Verification details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login2FA"
      responses:
        "200":
          description: Successful
          headers:
            Set-Cookie:
              schema:
                type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid credentials
        "403":
          description: Insufficient privileges
  /login/2fa/resend-pin:
    post:
      tags:
        - logins
      summary: Resends 2FA sign-in code.
      description: >-
        On success, standard session with a new pin returned, otherwise
        401 Unauthorized is returned with an empty cookie and the session is
        removed.

        Note that 2FA can only be used with the session cookie.
      operationId: resendPin
      security:
        - sessionCookie: []
      requestBody:
        description: Verification details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendPin"
      responses:
        "200":
          description: Successful
          headers:
            Set-Cookie:
              schema:
                type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid credentials
        "403":
          description: Insufficient privileges
  /login/password-recovery:
    put:
      tags:
        - logins
      summary: Start a new password recovery for login
      description: >-
        Initiates a new password recovery for the given email address, or fails
        silently (returning a `200 Ok`) if no login corresponded to the email.

        Note that only logins who are registered may initiate a password
        recovery. Users who were invited by an org member and haven't finished
        their signup may not start a recovery.
      operationId: startPasswordRecovery
      parameters:
        - name: realmId
          in: query
          description: >-
            If set, the login is looked up in the specified realm.
            If unset then the chosen realm will be based on the control panel hostname.
          required: false
          schema:
            type: string
            format: uuid
      requestBody:
        description: Login's email address.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailAddress"
      responses:
        "200":
          description: Recovery maybe started
        "400":
          description: Invalid input
    post:
      tags:
        - logins
      summary: Finish a password recovery
      description: >-
        Finishes the password recovery for the recovery key.

        This operation only succeeds if the key hasn't expired. If it has, the
        user must initiate a new password recovery.
      parameters:
        - $ref: "#/components/parameters/PwRecoverySecret"
      operationId: finishPasswordRecovery
      requestBody:
        description: Login's new password.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPassword"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
  /login/password-recovery/validate:
    post:
      tags:
        - logins
      summary: Validate a password recovery secret
      description: >-
        Returns the obfuscated email address belonging to the user initiating
        the password recovery if the secret is correct and hasn't expired yet.
      parameters:
        - $ref: "#/components/parameters/PwRecoverySecret"
      operationId: validatePasswordRecovery
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidatedPasswordRecovery"
        "400":
          description: Invalid input
  /login/memberships:
    get:
      tags:
        - logins
      summary: Get login memberships
      description: >-
        Returns a list of info about all organization's the login is a member
        of. The return value is the same as that of successful session creation.
      operationId: getLoginMemberships
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Memberships successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginMemberships"
        "401":
          description: Invalid session
  /login:
    get:
      tags:
        - logins
      summary: Get login info
      operationId: getLogin
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
    patch:
      tags:
        - logins
      summary: Update login info
      description: >-
        Updates some or all login information and credentials.

        Only the currently authenticated login may do this (thus there is no
        explicit login id in the input).

        If the email or password are to be updated, the current password must be
        provided.

        In order to disable MFA, a user has to validate the PIN code required by
        the enabled method. If users want to switch to a different MFA method,
        they need to disable MFA and enable the desired MFA method.
      operationId: updateLoginInfo
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLogin"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateLoginResult"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Current password missing
  /login/avatar:
    put:
      tags:
        - logins
      summary: Set login avatar
      description: >-
        Sets the user's avatar, overwriting any previous one if one exists.

        The max allowed size is 200 KiB.
        The image format may be jpeg, png, and ico.

        The user is implicitly assumed to be the session holder, so no login id
        is supplied.
      operationId: setLoginAvatar
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
            encoding:
              avatar:
                contentType: image/png, image/jpeg
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
    delete:
      tags:
        - logins
      summary: Remove login avatar
      description: >-
        Deletes the user's avatar.

        The user is implicitly assumed to be the session holder, so no login id
        is supplied.
      operationId: deleteLoginAvatar
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session

  ###############################################################################
  # -- orgs
  ###############################################################################

  /orgs/{org_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - orgs
      summary: Get organization info
      description: >-
        Returns basic organization information.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: getOrg
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Organization successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Org"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - orgs
      summary: Update organization
      description: >-
        Updates the given org's name.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: updateOrg
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Organization details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrgUpdate"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - orgs
      summary: Delete organization
      description: >-
        Soft or force deletes the organization and its resources.

        All resources under the organization (websites, customers in case of a
        reseller) will be deleted too.

        If the organization is soft-deleted (or marked as deleted), its data is
        not removed.  For removing all data and metadata, pass the `force=true`
        query parameter. This can only be done by a privileged MO member. In
        this case, all data is wiped, so use carefully.

        If the `force` parameter is set, session holder must be an MO Owner,
        SuperAdmin, or Support member, otherwise it suffices for them to be such
        a member in a parent org.
      operationId: deleteOrg
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Force"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/logins:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - logins
      summary: Query logins belonging to organization
      description: >-
        Returns all logins registered in given organization.

        Session holder must be an `Owner`, `SuperAdmin` or `Sysadmin` in the
        org or the MO.
      operationId: getOrgLogins
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - name: sortBy
          in: query
          description: >-
            The field by which to sort.
          required: false
          schema:
            type: string
            enum: [email, name, registrationDate]
      responses:
        "200":
          description: Logins successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginsListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /orgs/{org_id}/avatar:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    put:
      tags:
        - orgs
      summary: Set org avatar
      description: >-
        Sets the org's avatar, overwriting any previous one if one exists.

        The max allowed size is 200 KiB.
        The image format may be jpeg, png, and ico.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: setOrgAvatar
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AvatarFile"
            encoding:
              avatar:
                contentType: image/png, image/jpeg
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - orgs
      summary: Remove org avatar
      description: >-
        Deletes the org's avatar.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: deleteOrgAvatar
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/cloudflare:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - orgs
      summary: Get CloudFlare API keys, org level
      description: >-
        Returns the CloudFlare API keys for an org (obfuscated for security).
      operationId: getCloudflareApiKeys
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: CloudFlare API successfully queried
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CloudFlareApiKey"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - orgs
      summary: Set CloudFlare API key, org level
      description: >-
        Adds a CloudFlare API key for an org.
      operationId: createCloudflareApiKey
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Key in plain text.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCloudFlareToken"
      responses:
        "201":
          description: CloudFlare API key created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/cloudflare/{cloudflare_key}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/CloudFlareTokenId"
    delete:
      tags:
        - orgs
      summary: Delete CloudFlare API key, org level
      description: >-
        Delete a CloudFlare API key for an org.
      operationId: deleteCloudflareApiKey
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: CloudFlare key deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - orgs
      summary: Update CloudFlare API key
      description: >-
        Update a CloudFlare API key for an org.
      operationId: updateCloudflareApiKey
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Key in plain text.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCloudFlareApiKey"
      responses:
        "204":
          description: CloudFlare key deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - orgs
      summary: Get affected domains for a CloudFlare key
      description: >-
        Get affected domains for an organisation's CloudFlare key
      operationId: getCloudFlareKeyAffectedDomains
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Domains listed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/orgs/{org_id}/activities:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - orgs
      summary: Get organization's activity log.
      description: >-
        Returns organization's activity log which is a human readable list of
        events that happened in orchd.

        Only accessible to Owner, SuperAdmin and Sysadmin.
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/CreatedBefore"
        - $ref: "#/components/parameters/CreatedAfter"
        - $ref: "#/components/parameters/ActivityKindsFilter"
        - $ref: "#/components/parameters/ActivityEntityIdsFilterAny"
        - $ref: "#/components/parameters/ActivityEntityKind"
        - $ref: "#/components/parameters/Search"
      operationId: getOrgActivities
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivitiesListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- customers
  ###############################################################################

  /orgs/{org_id}/customers:
    get:
      tags:
        - customers
      summary: Get organization customers
      description: >-
        Returns the list of customers of a reseller organization.

        If the recursive flag is set, the customers of reseller customers are
        returned as well recursively, up to an optional max depth value.

        Note, for performance it is not checked whether org is a reseller. If it
        is not, an empty list is returned.
      operationId: getOrgCustomers
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum:
              [id, name, status, subscriptionsCount, websitesCount, createdAt]
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/Recursive"
        - $ref: "#/components/parameters/MaxDepth"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/ResourcesUnderPlanId"
      responses:
        "200":
          description: Customers successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomersListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - orgs
        - customers
      summary: Create a customer organization
      description: >-
        Once customer is successfully created under parent organization
        (identified by org_id), the customer organization's id is returned. This
        operation can only be done by a logged in superadmin or owner of the
        organization or its parent organization(s).
      operationId: createCustomer
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        description: Customer organization details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCustomer"
      responses:
        "201":
          description: Customer successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/subscriptions:
    get:
      tags:
        - subscriptions
      summary: Get subscriptions to parent
      description: >-
        Lists subscriptions to the packages of the parent organization to which
        the currently selected organization is subscribed.
      operationId: getSubscriptionsToParent
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [plan, subscriberId, vendorId]
        - $ref: "#/components/parameters/SortOrder"
      responses:
        "200":
          description: Subscriptions successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionsListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/subscriptions/{subscription_id}/bandwidth:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/SubscriptionId"
      - $ref: "#/components/parameters/CacheControl"
    get:
      tags:
        - subscriptions
      summary: Get subscription bandwidth
      description: >-
        Queries the organization's subscription bandwidth for the current month.
        This includes all customer subscriptions if this subscription is a
        reseller.

        By default the usage is cached for 12 hours unless `refreshCache` is `true`.

        The value is in bytes.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: getSubscriptionBandwidthUsage
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: integer
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/subscriptions/{subscription_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/SubscriptionId"
    get:
      tags:
        - subscriptions
      summary: Get subscription
      description: >-
        Queries the organization's subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: getSubscription
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - subscriptions
      summary: Update subscription
      description: >-
        Updates the organization's subscription.

        This endpoint is used to update the subscription's status and
        suspension, by a parent organization admin.
      operationId: updateSubscription
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSubscription"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - subscriptions
      summary: Delete subscription
      description: >-
        Soft or force deletes the subscription and its resources.

        All resources under the subscription (websites, customers in case of a
        reseller) will be deleted too.

        If the subscription is soft-deleted (or marked as deleted), its data is
        not removed.  For removing all data and metadata, pass the `force=true`
        query parameter. This can only be done by a privileged MO member. In
        this case, all data is wiped, so use carefully.

        If the `force` parameter is set, session holder must be an MO Owner,
        SuperAdmin, or Support member, otherwise it suffices for them to be such
        a member in a parent org.
      operationId: deleteSubscription
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Force"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/subscriptions/{subscription_id}/installable-apps:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/SubscriptionId"
    get:
      tags:
        - apps
      summary: Get installable website applications
      description: >-
        Returns all installable applications under the subscription.
      operationId: getInstallableApps
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstallableWebsiteAppsFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/subscriptions/{subscription_id}/calculate-resource-usage:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/SubscriptionId"
    put:
      tags:
        - subscriptions
      summary: Re-Calculates all subscription resources
      description: >-
        Recursively Re-Calculates organization's subscription resources.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: calculateResourceUsage
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsedResourcesFullListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/customers/{customer_org_id}/subscriptions:
    get:
      tags:
        - customers
        - subscriptions
      summary: Get customer subscriptions
      description: >-
        Lists a customer's subscriptions to packages belonging to the selected
        organization.
      operationId: getCustomerSubscriptions
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/CustomerOrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [plan, subscriberId, vendorId]
        - $ref: "#/components/parameters/SortOrder"
      responses:
        "200":
          description: Subscriptions successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionsListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - customers
        - subscriptions
      summary: Create a subscriptions for a customer
      description: >-
        Creates a subscription for customer to the org's plan.

        Only a reseller org or the MO may subscribe another org to one of its
        plans. If the organization is a reseller (and thus not the MO), it needs
        to have a suitable subscription to a reseller plan of its parent. It is
        verified that the reseller's reseller subscription has quota left to
        create the new subscription (because the new subscription draws from the
        reseller's reseller subscription).

        After this call, the sold resources are recorded in the reseller
        subscription by increasing each sold resource's usage by the sold
        amount. In combination with the quota check, this is how it is ensured
        that the reseller doesn't sell more resources than it has paid for.

        The MO may optionally override the package default servers or server
        group. All resources of this subscription will then be created on those
        servers. Otherwise the subscribed to plan's servers are used, or if
        those aren't defined either, the usual website placement rules are used
        every time a website is created under this subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createCustomerSubscription
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/CustomerOrgId"
      requestBody:
        description: Subscription details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSubscription"
      responses:
        "201":
          description: Subscription successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceId"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  ###############################################################################
  # -- org members
  ###############################################################################

  /orgs/{org_id}/owner:
    put:
      tags:
        - orgs
        - members
        - owner
      summary: Update organization owner
      description: >-
        The new owner must already be a member in the organization before establishing ownership.
        This operation can only be done by a
        logged in superadmin of the organization's parent organization, or the owner
        of the organization. In both cases, the previous owner (if they existed) is
        demoted to SuperAdmin after this operation.
      operationId: updateOwner
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        description: Membership id of the to-be owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrgOwnerUpdate"
      responses:
        "200":
          description: Owner successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - orgs
        - members
        - owner
      summary: Delete organization owner
      description: >-
        This operation can only be done by a
        logged in superadmin of the organization's parent organization
        (TODO it's unclear as of this writing whether organization
        owners may delete themselves). The previous owner is demoted to
        the "SupperAdmin" role.
      operationId: deleteOwner
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
      responses:
        "204":
          description: Owner successfully deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/members:
    get:
      tags:
        - orgs
        - members
      summary: Get organization members
      description: >-
        Returns all (both pending and full) members of the organization.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: getMembers
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [status, joinedAt]
        - $ref: "#/components/parameters/SortOrder"
        - name: role
          in: query
          description: Return only members with this role.
          required: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: siteAccess
          in: query
          description: >-
            Return only collaborator members that have access to this website.

            Note that super admins and owners are not returned because they
            implicitly have access.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Members successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MembersListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - orgs
        - members
      summary: Create organization member
      description: >-
        A login for the member needs to exist before establishing membership. On
        success, the member id is returned. This operation can only be done by a
        logged in superadmin or owner of the organization or its parent
        organization(s).
      operationId: createMember
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        description: New member details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMember"
      responses:
        "201":
          description: Member successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/members/{member_id}:
    get:
      tags:
        - orgs
        - members
      summary: Get organization member
      description: >-
        Returns details about this organization member. This operation can
        only be done by the member itself, a logged in superadmin or owner of
        the organization or its parent organization(s).
      operationId: getMember
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/MemberId"
      responses:
        "200":
          description: Member successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - orgs
        - members
      summary: Delete organization member
      description: >-
        This operation can only be done by a logged in superadmin or owner of
        the organization or its parent organization(s).
      operationId: deleteMember
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/MemberId"
      responses:
        "204":
          description: Member successfully deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - orgs
        - members
      summary: Overwrite organization member settings
      description: >-
        Updates member information, such as their roles, site access permissions,
        and notification settings.
        This operation can only be done by the logged in superadmin or owner of
        the organization or its parent organization(s). This operation overwrites
        existing settings, so all existing values that are meant to be kept should
        be included in the response body.
      operationId: updateMember
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/MemberId"
      requestBody:
        description: Member settings
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMember"
      responses:
        "200":
          description: Member settings successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/members/{member_id}/sso:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/MemberId"
    get:
      tags:
        - orgs
        - members
      summary: Get a One-Time-Password link for the member
      description: >-
        Returns a short lived one time password link for direct log-ins via the users realm.
        Session holder must be an `Owner`, `SuperAdmin` or `Sysadmin` in the org or the MO.
      operationId: getOrgMemberLogin
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "201":
          description: OTP login link successfully created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /orgs/{org_id}/access_tokens:
    get:
      tags:
        - members
      summary: Get access token members
      description: >-
        Returns all access tokens belonging to the organisation
      operationId: getAccessTokens
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
      responses:
        "200":
          description: Access tokens successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgAccessTokens"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - orgs
        - members
      summary: Create organisation access token
      description: >-
        Create an access token with rights within an organisation.
      operationId: createAccessToken
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        description: Access token details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAccessToken"
      responses:
        "201":
          description: Token successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewAccessTokenResponse"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists

  /orgs/{org_id}/access_tokens/{token_id}:
    delete:
      tags:
        - members
      summary: Delete access token member
      description: >-
        Delete an access token
      operationId: deleteAccessToken
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/OrgAccessTokenId"
      responses:
        "204":
          description: Deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  ###############################################################################
  # -- plans
  ###############################################################################

  /orgs/{org_id}/plans:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - orgs
        - plans
      summary: Get plans
      description: >-
        Returns the organization's plans, optionally filtered by query
        parameters.

        Note that the endpoint does not require authentication as anyone should
        be able to view an organization's plans on offer so that the viewer may
        decide to subscribe to a plan.
      operationId: getPlans
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [name]
        - $ref: "#/components/parameters/SortOrder"
      responses:
        "200":
          description: Organization plans successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlansListing"
        "404":
          description: Not found
    post:
      tags:
        - orgs
        - plans
      summary: Create plan
      description: >-
        Creates a new plan for organization.

        If the organization is a reseller and not the MO, the reseller must
        itself have a subscription to a reseller plan. It is verified that the
        reseller is not trying to create a plan offering more resources than the
        reseller has available through its reseller plan.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: createPlan
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: New plan details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPlan"
      responses:
        "201":
          description: Plan successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceId"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/plans/{plan_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/PlanId"
    get:
      tags:
        - orgs
        - plans
      summary: Get plan
      description: >-
        Returns info on a single plan offered by this organization.

        Note that the endpoint does not require authentication as anyone should
        be able to view an organization's plans on offer so that the viewer may
        decide to subscribe to a plan.
      operationId: getPlan
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Organization/plan not found
    patch:
      tags:
        - orgs
        - plans
      summary: Update plan name
      description: >-
        Updates a plan's name of plan type

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: updatePlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlan"
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - orgs
        - plans
      summary: Delete plan
      description: >-
        Deletes a plan if no subscriptions exist to it.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: deletePlan
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/plans/{plan_id}/resources:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/PlanId"
    post:
      tags:
        - orgs
        - plans
      summary: Create plan resources
      description: >-
        Creates new resources for plan.

        If the organization is a reseller and not the MO, it is verified that
        the reseller is not trying to update a plan to offer more of resource
        than the reseller has available through its reseller subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: createPlanResources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Resource"
      responses:
        "200":
          description: Successful
        "404":
          description: Not found
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "409":
          description: Already exists
  /orgs/{org_id}/plans/{plan_id}/resources/{name}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/PlanId"
      - name: name
        in: path
        description: The name of the resource.
        required: true
        schema:
          type: string
    put:
      tags:
        - orgs
        - plans
      summary: Update plan resource
      description: >-
        Updates the plan resource.

        If the organization is a reseller and not the MO, it is verified that
        the reseller is not trying to update a plan to offer more of resource
        than the reseller has available through its reseller subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: updatePlanResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resource"
      responses:
        "200":
          description: Successful
        "404":
          description: Not found
  /orgs/{org_id}/plans/{plan_id}/allowances:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/PlanId"
    post:
      tags:
        - orgs
        - plans
      summary: Create plan allowances
      description: >-
        Creates new allowances for plan.

        If the organization is a reseller and not the MO, it is verified that
        the reseller is not trying to update a plan to offer allowances that
        the reseller doesn't have available in their reseller subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: createPlanAllowances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Allowance"
      responses:
        "200":
          description: Successful
        "404":
          description: Not found
  /orgs/{org_id}/plans/{plan_id}/allowances/{name}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/PlanId"
      - name: name
        in: path
        description: The name of the allowance.
        required: true
        schema:
          type: string
    put:
      tags:
        - orgs
        - plans
      summary: Update plan allowance
      description: >-
        Updates the plan allowance.

        If the organization is a reseller and not the MO, it is verified that
        the reseller is not trying to update a plan to offer more of allowance
        than the reseller has available through its reseller subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: updatePlanAllowance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Allowance"
      responses:
        "200":
          description: Successful
        "404":
          description: Not found
    delete:
      tags:
        - orgs
        - plans
      summary: Delete plan allowance
      description: >-
        Deletes the plan allowance.

        Session holder must have admin privileges in this org or a parent. That
        is, to have Owner or SuperAdmin roles in the current org or a parent, or
        to have the Support role in a parent.
        org.
      operationId: deletePlanAllowance
      responses:
        "204":
          description: Successful
        "404":
          description: Not found
  /orgs/{org_id}/plans/{plan_id}/selections:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/PlanId"
    post:
      tags:
        - orgs
        - plans
      summary: Create plan selections
      description: >-
        Creates new selections for plan.

        If the organization is a reseller and not the MO, it is verified that
        the reseller is not trying to update a plan to offer selections that
        the reseller doesn't have available in their reseller subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: createPlanSelections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Selection"
      responses:
        "200":
          description: Successful
        "404":
          description: Not found
  /orgs/{org_id}/plans/{plan_id}/selections/{name}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/PlanId"
      - name: name
        in: path
        description: The name of the selection.
        required: true
        schema:
          type: string
    put:
      tags:
        - orgs
        - plans
      summary: Update plan selection
      description: >-
        Updates the plan selection.

        If the organization is a reseller and not the MO, it is verified that
        the reseller is not trying to update a plan to offer more of selection
        than the reseller has available through its reseller subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: updatePlanSelection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Selection"
      responses:
        "200":
          description: Successful
        "404":
          description: Not found

  ###############################################################################
  # -- org emails
  ###############################################################################

  /orgs/{org_id}/emails:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - orgs
        - emails
      summary: Get org emails
      description: >-
        Returns all emails belonging to this organization.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: getEmails
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [domain, subscription, org, size]
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/Recursive"
        - $ref: "#/components/parameters/MaxDepth"
        - name: status
          in: query
          description: >-
            Limit the result set to emails with the specified status.
            Only applicable if `recursive` is set to true.
          required: false
          schema:
            $ref: "#/components/schemas/WebsiteStatus"
        - name: domainId
          in: query
          description: Limit the result set to emails under domain.
          required: false
          schema:
            type: string
            format: uuid
        - $ref: "#/components/parameters/ResourcesUnderPlanId"
        - $ref: "#/components/parameters/ResourcesUnderSubscriptionId"
        - name: includeInternal
          in: query
          description: Include internal emails in response
          required: false
          schema:
            type: boolean
            default: false
        - name: showDeleted
          in: query
          description: >-
            Filters out deleted emails, which are otherwise returned in the result.
            Defaults to `showDeleted=true` if not set. Can only be set by MO,
            if set by others, a 403 is returned.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailsListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- org tags
  ###############################################################################

  /orgs/{org_id}/tags:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - orgs
        - tags
      summary: Get tags
      description: >-
        Returns all tags belonging to the organization.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: getTags
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Organization tags successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagsFullListing"
        "404":
          description: Not found
    post:
      tags:
        - orgs
        - tags
      summary: Create tag
      description: >-
        Creates a new tag for the organization.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: createTag
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: New tag details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTag"
      responses:
        "201":
          description: Tag successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceId"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- websites
  ###############################################################################

  /orgs/{org_id}/websites:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - websites
      summary: Get websites
      description: >-
        Returns all websites belonging to the organization.

        The results may optionally be sorted and paginated. If the recursive
        flag is set, the websites of customers of reseller customers are
        returned as well recursively, up to an optional max depth value.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or must have access to at least one website in this org. If the
        member is not an admin but has access to one or more websites, only
        those websites are returned.
      operationId: getWebsites
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [domain, subscription, org, size, createdAt]
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/Recursion"
        - $ref: "#/components/parameters/ResourcesUnderPlanId"
        - $ref: "#/components/parameters/ResourcesUnderSubscriptionId"
        - name: status
          in: query
          description: >-
            Limit the result set to websites with the specified status. Only applicable if `recursive` is set to true.
          required: false
          schema:
            $ref: "#/components/schemas/WebsiteStatus"
        - name: isSuspended
          in: query
          description: >-
            Limit the result set to websites which are currently suspended or not suspended.
          required: false
          schema:
            type: boolean
        - name: roles
          in: query
          description: >-
            Limit the result set to websites having one of these roles assigned to a server.
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ServerRole"
          explode: false
          allowReserved: true
        - name: servers
          in: query
          description: >-
            Limit the result set to websites having one of the selected roles (or all roles) on one of these servers.
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          explode: false
          allowReserved: true
        - name: kind
          in: query
          description: >-
            Limit the results to websites of the specified type.
          required: false
          schema:
            $ref: "#/components/schemas/WebsiteKind"
        - name: showDeleted
          in: query
          description: >-
            Filters out deleted websites, which are otherwise returned in the result.
            Defaults to `showDeleted=true` if not set. Can only be set by MO,
            if set by others, a 403 is returned.
          required: false
          schema:
            type: boolean
        - name: showAliases
          in: query
          description: >-
            Includes domain aliases in search results and listings in addition to the website's primary domain.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Websites successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsitesListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - websites
      summary: Create a new website or clone an existing one.
      description: >-
        Creates or clone a website under the organization.

        If the org is the MO, the request need not contain a subscription ID,
        but if it's a customer and the session holder is not an MO admin, the
        subscription to which to attach the website must be supplied.

        If the website to be created is 'staging' kind then the subscription
        must include stagingWebsites resource > 1.  If 'normal' then the
        subscription must include websites > 1.

        If the website to be created is a control panel, the reseller's
        subscription id must match the reseller subscription.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: createWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/NewWebsiteKind"
      requestBody:
        description: >-
          New website details. If the organization is the MO, they need not have
          a subscription to create a website. In all other cases organization needs
          to be subscribed to a plan that allows creating websites.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewWebsite"
      responses:
        "201":
          description: New website successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - websites
      summary: Delete websites
      description: >-
        This operation can only be done by a logged in superadmin or owner of
        the organization or its parent organization(s).
      operationId: deleteWebsites
      requestBody:
        description: The ids of the websites to delete.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UuidListing"
      responses:
        "204":
          description: Websites successfully deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/clone:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - websites
      summary: List website clones for given OrgId
      description: >-
        List of all webiste clones for the given OrgId.
      operationId: getWebsiteClones
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteCloneFullListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - websites
      summary: Clone website or push live
      description: >-
        Clone a website or push live to overwrite an existing live website with content from the source website.
        Operation is asynchronous and returns a clone id.

        If includeDatabases is ommited, the all databases will be cloned from the source website.
        If includeDatabaseUsers is ommited, the all database users will be cloned from the source website.
      operationId: cloneWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebsiteCloneRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/clone/{clone_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/CloneId"
    get:
      tags:
        - websites
      operationId: getWebsiteClone
      summary: Get's detail about a single push live
      description: >-
        Fetches details about a single website clone. cloneWebsite call operation just
        enqueues the request and returns immediately. Use this endpoint to monitor how
        the clone finishes.
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteCloneResponse"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/clone/{clone_id}/log:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/CloneId"
    get:
      tags:
        - websites
      summary: Get the log for a given clone id..
      description: >-
        Fetches the import migration log for a single website clone.
      operationId: getWebsiteCloneLog
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteCloneLogResponse"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get website
      description: >-
        Returns detailed information about a single website.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: getWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Website"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - websites
      summary: Update website
      description: >-
        Updates the website.

        It may be used to enable or disable a specific version of PHP for a
        website, in which case a corresponding `PhpCd` instance is installed or
        uninstalled on the same server of the website.
        When enabling the website PHP it is also possible to specify whether the
        SSH daemon will need to be enabled in the `PhpCd` service at
        startup, via the `ssh` boolean flag. Moreover, if PHP is already enabled
        for a website, it is possible to enable or disable its SSH by only
        specifying the `ssh` flag.

        The endpoint is also responsible for assigning tags to a website. Note
        that the input overwrites all existing tags, so when adding a new tag,
        the `tags` property also has to include existing tags that are to be kept.

        Only a parent organization or MO admin may suspend websites.

        The website may be moved to another subscription, if that subscription
        has enough quota to accommodate the new website, unless the MO is
        performing the action, in which case they may move any website off a
        subscription or to a subscription that doesn't necessary have quota
        left.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: updateWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Website update details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWebsite"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - websites
      summary: Delete website
      description: >-
        Mark a website as deleted, which does not remove its data, or force
        remove all its data.

        For removing all data and metadata belonging to a website (including DB
        records), pass the `force=true` query parameter. This can only be done
        by a privileged MO member. In this case, all data is wiped, so use
        carefully.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: deleteWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Force"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/status/backup:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      operationId: getWebsiteBackupStatus
      summary: Get the status of an ongoing website backup operation
      description: >-
        Returns the status of the currently ongoing backup or restore, if any.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupStatus"
        "400":
          description: Invalid arguments
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/push-live:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    post:
      tags:
        - websites
      summary: Making a staging website live
      description: >-
        Validates that the operation is allowed for the website.

        Session holder must be at least a `SuperAdmin` in the org which owns the website,
        or a parent org.

        If the website is not owned by the MO, the subscription must have sufficient
        available 'websites' resource
      operationId: pushWebsiteLive
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/settings/{setting_kind}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/SettingKind"
    get:
      tags:
        - websites
      summary: Get the value for a particular setting
      description: >-
        Returns the value for a particular setting as a JSON object
      operationId: getWebsiteSetting
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema: {}
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/settings/{setting_kind}/{setting_key}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/SettingKind"
      - $ref: "#/components/parameters/SettingKey"
    put:
      tags:
        - websites
      summary: Set a single override setting
      description: >-
        Set or replace a single website level service setting
      operationId: setWebsiteSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceSettingValue"
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - websites
      summary: Delete a single override setting
      description: >-
        Delete a single website level service setting
      operationId: deleteWebsiteSetting
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/validate-operation:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    post:
      tags:
        - websites
      summary: Validate whether a website operation is allowed
      description: >-
        Validates that the operation is allowed for the website.

        Currently this is only for verifying whether a website may be moved to
        another subscription, but this could later be expanded with other
        actions that can be verified.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: validateWebsiteOperation
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebsiteOperationValidation"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/access-tokens:
    post:
      tags:
        - websites
      summary: Get an access token for the given website
      description: >-
        Request an access token for the given website.

        Note that access tokens may only be requested for normal websites, not
        for control panel websites.

        The access token is returned as an encrypted JWT in the response body.

        Session holder must either be a parent organization admin, or be a
        member with Site Access role of the given organization.
      operationId: getSiteAccessToken
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/WebsiteId"
      responses:
        "200":
          description: Site access request successful
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/htaccess:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    summary: Endpoints for managing .htaccess rewrites
    get:
      tags:
        - websites
      operationId: getWebsiteHtaccessRewrites
      summary: Reads chains of rewrite rules
      description: >-
        Rewrites are `RewriteRule`s in website's .htaccess.

        We use terminology "rewrite chain" to refer to 0 or more
        `RewriteCond`s directive ended by a `RewriteRule`.

        To identify a rewrite chain in the .htaccess file, we use line
        numbers.

        Line numbers serve two purposes. It acts loosely as an identifier, i.e.
        if you want to remove some chain or replace it by another, you
        would use the same line number you received when you read the `GET`
        endpoint.

        Second purpose is that of ordering. If you want some chain to be
        above another in the file, you have to make sure that the line number
        is less.
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successfully parsed .htaccess and found rewrite chains
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewriteChainFullListing"
        "400":
          description: Invalid .htaccess file
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - websites
      operationId: updateWebsiteHtaccessRewrites
      security:
        - sessionCookie: []
        - bearerAuth: []
      summary: Updates rewrite rules
      description: >-
        Rewrites are `RewriteRule`s in website's .htaccess file.

        We use terminology "rewrite chain" to refer to 0 or more
        `RewriteCond`s directive ended by `RewriteRule`.
      requestBody:
        description: >-
          List of rewrite chains to be inserted into the .htaccess file.

          To identify a rewrite chain in the .htaccess file, we use line
          numbers.

          Line numbers serve two purposes. It acts loosely as an identifier, i.e.
          if you want to remove some chain or replace it by another, you
          would use the same line number you received when you read the `GET`
          endpoint.

          Second purpose is that of ordering. If you want some chain to be
          above another in the file, you have to make sure that the line number
          is less.

          To delete a rewrite chain, just send a line number without any
          additional information for a single `RewriteChain` object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRewriteChainFullListing"
      responses:
        "204":
          description: Successfully parsed .htaccess and updated rewrite chains
        "400":
          description: Invalid .htaccess file
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/htaccess/ips:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    summary: Showing rules for IP blocking/allowing
    get:
      tags:
        - websites
      operationId: getWebsiteHtaccessIpsRule
      summary: Returns current rules of blocked/whitelisted IPs
      description: >-
        Allowlisting or blocklisting IPs via .htaccess is done using Require ip
        rule. This endpoint reads the rules from the .htaccess in
        the website's public_html.

        Note that this is not the same .htaccess that is used for writing
        redirect rules.

        In future this endpoint might be merged with the htaccess endpoint to
        allow writing rewrite rules and ip allow lists to any website directory.
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: List of ip and whether they're allowed or blocked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequireIpsRule"
        "400":
          description: Invalid .htaccess file
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: No rules found
    put:
      tags:
        - websites
      operationId: updateWebsiteHtaccessIpsRule
      security:
        - sessionCookie: []
        - bearerAuth: []
      summary: Sets a rule over provided ips - either block or allow
      description: >-
        Allowlisting or blocklisting IPs via .htaccess is done using Require ip
        rule. This endpoint puts the rule (creating .htaccess if it doesn't
        exist in process) into the public_html/.htaccess file.

        Note that this is not the same .htaccess that is used for writing
        redirect rules.

        In future this endpoint might be merged with the htaccess endpoint to
        allow writing rewrite rules and ip allow lists to any website directory.
      requestBody:
        description: >-
          List of ips and a rule which should apply to them - either block all
          these ips or allow only these ips.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequireIpsRule"
      responses:
        "204":
          description: Successfully parsed .htaccess and updated ip rules
        "400":
          description: Invalid .htaccess file
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/server_domains:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      operationId: getWebsiteServerDomains
      summary: Fetch website server domains
      description: >-
        This endpoint will return the server domain for the application, email and
        database roles to which this website is assigned.
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Website server domains
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteServerDomains"
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/preview:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    post:
      tags:
        - websites
      summary: Create a preview domain
      description: >-
        Creates a preview domain for the given website and returns its full
        domain.  If a preview domain already exists, returns that instead.  Will
        error if a preview domain cannot be created.

        Returns 200 if an existing preview domain is returned and 201 if one has
        been created.
      operationId: createPreviewDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Preview domain existed
          content:
            application/json:
              schema:
                type: string
        "201":
          description: Domain successfully created
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/cgroup_limits:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get the active cgroup limits for a website
      operationId: getWebsiteCgroupLimits
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Cgroup limitations if set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CgroupLimits"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - websites
      summary: Set the active cgroup limits for a website (Master org only)
      operationId: setWebsiteCgroupLimits
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Cgroup limits.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetCgroupLimits"
      responses:
        "200":
          description: Cgroup limits successfully updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/fs_quota_limits:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get the active FS quoa limits for a website
      operationId: getWebsiteFsQuotaLimits
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: FS quota limitations if set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsQuotaInfo"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - websites
      summary: Set the active FS quota limits for a website (Master org only)
      operationId: setWebsiteFsQuotaLimits
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: FS quota limits.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FsQuotaLimit"
      responses:
        "200":
          description: FS quota limits successfully updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- org stats
  ###############################################################################

  /orgs/{org_id}/stats/websites/added:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/TimeInterval"
      - name: recursion
        in: query
        required: false
        schema:
          type: boolean
    get:
      tags:
        - orgs
      summary: Get websites added over a given time period
      description: >-
        Returns the number of websites added each day over a given timeframe.
      operationId: getWebsitesAdded
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Stats successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsitesAddedStats"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/stats/customers/added:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/TimeInterval"
    get:
      tags:
        - orgs
      summary: Get customers added over a given time period
      description: >-
        Returns the number of customers added over a given time period.
        Includes only direct customers, not customers of customers.
      operationId: getCustomersAdded
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Stats successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomersAddedStats"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- org domains
  ###############################################################################

  /orgs/{org_id}/domains:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - domains
      summary: Get domains
      description: >-
        Lists the domains belonging to this organization.
      operationId: getDomains
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [domain]
        - $ref: "#/components/parameters/SortOrder"
      responses:
        "200":
          description: Domains successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainsListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/domains/{domain_id}:
    delete:
      tags:
        - domains
      summary: Delete domain
      description: >-
        Deletes a domain. Only privileged org members or parent org admins may do this.
      operationId: deleteDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/DomainId"
      responses:
        "204":
          description: Domain successfully deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/domains/{domain_id}/auth-ns:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - domains
      summary: Get authoritative nameservers for domain.
      description: >-
        Get authoritative nameservers for domain and check if they match known DNS IPs
        of the Enhance cluster
      operationId: getDomainAuthNs
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Auth nameservers queried for domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthNsResponse"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/domains/{domain_id}/email-auth:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - emails
      summary: Get email authentication preferences
      description: >-
        Fetch DKIM setting for the mailboxes on a given domain.
      operationId: getDomainEmailAuth
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Email auth settings successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailAuth"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - emails
      summary: Update email authentication preferences
      description: >-
        Update DKIM setting for the mailboxes on a given domain.
      operationId: updateDomainEmailAuth
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Email auth details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailAuthUpdate"
      responses:
        "200":
          description: Email auth settings successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/domains/{domain_id}/email-auth/validate:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - emails
      summary: Validate email authentication DNS records
      description: >-
        Validate DKIM and SPF.
      operationId: validateDomainEmailAuth
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Validation response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailAuthValidation"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/domains/{domain_id}/cloudflare:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - domains
      summary: Get CloudFlare API key, domain level
      description: >-
        Returns the CloudFlare API key for a domain (obfuscated for security).
        This key will override an org level key.
      operationId: getCloudflareApiKeyDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: CloudFlare API successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudFlareApiKey"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - domains
      summary: Set CloudFlare API key, domain level
      description: >-
        Sets the CloudFlare API key for a domain.  This key will override an org
        level key.
      operationId: setCloudflareApiKeyId
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Cloudflare API key ID.
        required: true
        content:
          application/json:
            schema:
              type: string
              format: uuid
      responses:
        "200":
          description: CloudFlare API key successfully set
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - domains
      summary: Delete CloudFlare API key, domain level
      description: >-
        Deletes the CloudFlare API key for a domain
      operationId: deleteCloudflareApiKeyId
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: CloudFlare API key successfully deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/domains/{domain_id}/cloudflare/nameservers:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - domains
      summary: Get CloudFlare name servers
      description: >-
        Returns the CloudFlare nameservers for a given domain, if it exists in
        CloudFlare.
      operationId: getCloudflareNameServers
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: CloudFlare API successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudFlareNameServers"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/domains/check:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    post:
      tags:
        - domains
      summary: Check if a domain can be created
      description: >-
        An organisation can perform a pre-flight check to see if a domain can
        be added.  This is useful for form validation.  It will return a status
        indicating if the domain is in use and, if so, whether it is on the current
        organisation or another.  If it is in use on the current organisation
        we will also return the websiteId the domain belongs to.
      operationId: checkDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Domain details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDomain"
      responses:
        "200":
          description: Domain in use status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainInUseStatus"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  ###############################################################################
  # -- website domain mappings
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/domains:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - domains
        - websites
      summary: Get website's mapped domains
      description: >-
        Returns a list of domains that are mapped to this website. Requires login to have admin privileges in this org.
      operationId: getWebsiteDomainMappings
      parameters:
        - name: withSsl
          in: query
          description: >-
            If set to true, domains are returned with applicable ssl certificates.
          required: false
          schema:
            type: boolean
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainMappingsFullListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - domains
        - websites
      summary: Create website mapped domain
      description: >-
        Creates a domain mapping, where subscription resources are sufficient.
        The mapping kind will default to 'alias' if unspecified.
      operationId: createWebsiteMappedDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Domain details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMappedDomain"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - domains
        - websites
      summary: Returns website domain mapping
      description: >-
        Returns a domain by its id that is mapped to this website.
        Requires login to have admin privileges in this org.
        Since only the MO can create standalone domains, session holder must be
        at least a `SuperAdmin` in the MO.
      operationId: getWebsiteDomainMapping
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainMapping"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - domains
        - websites
      summary: Update website domain mapping
      description: >-
        Partially updates the domain mapping.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWebsiteDomainMapping
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainMappingUpdate"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - domains
        - websites
      summary: Delete website domain mapping
      description: >-
        Deletes the domain mapping and decrements the domain alias quota usage
        in the website's subscription, if applicable.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteDomainMapping
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Website domain mapping successfully deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/dns-status:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - domains
        - websites
      summary: Returns website domain mapping DNS status
      description: >-
        Returns an indication of whether the domain correctly resolves to the
        server this website is on.
      operationId: getWebsiteDomainMappingDnsStatus
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DnsStatus"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/primary:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    put:
      tags:
        - domains
        - websites
      summary: Update primary domain mapping
      description: >-
        This operation can only be done by a logged in superadmin or owner of
        the organization or its parent organization(s). Domain and website has
        to belong to this organization.
      operationId: updateWebsitePrimaryDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Domain mapping details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPrimaryDomainMapping"
      responses:
        "200":
          description: Successfully made domain the primary domain of website
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/dns-query:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
      - $ref: "#/components/parameters/ResolveDepth"
    get:
      tags:
        - domains
        - websites
      summary: Recursively query Dns servers for given domain
      description: >-
        Returns details about the dns servers of given domain.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteDomainDnsQuery
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Dns query outcome successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DnsQueryOutcome"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/dns-zone:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - dns
      summary: Get a dns zone for given domain
      description: >-
        Returns details about the dns zone of given domain. Returns Soa record
        and all other records.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteDomainDnsZone
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Dns zone successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DnsZone"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - dns
      summary: Updates a dns zone SOA for website domain
      description: >-
        Partially updates dns zone SOA record for existing zone.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWebsiteDomainDnsZone
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDnsZone"
      responses:
        "204":
          description: Zone successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/dns-zone/records:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    post:
      tags:
        - dns
      summary: Create a new dns record for website domain
      description: >-
        Creates a new dns record for a website's domain dns zone.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteDomainDnsZoneRecord
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: New dns record details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDnsRecord"
      responses:
        "201":
          description: Record successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/dns-zone/records/{record_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
      - name: record_id
        in: path
        description: The id of the record.
        required: true
        schema:
          type: string
          format: uuid
    patch:
      tags:
        - dns
      summary: Updates a dns record for given domain
      description: >-
        Partially updates a dns record for existing zone.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWebsiteDomainDnsZoneRecord
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDnsRecord"
      responses:
        "204":
          description: Record successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - dns
      summary: Delete dns zone record
      description: >-
        Deletes a dns zone record for given domain.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteDomainDnsZoneRecord
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Record successfully deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/dns-zone/dnssec:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    post:
      tags:
        - dns
      summary: Enable DNSSEC on this domain
      description: >-
        Will enable DNSSEC and return the relevant DS records
      operationId: enableDomainDnsSec
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: DNSSEC enabled
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - dns
      summary: Disable DNSSEC on this domain
      description: >-
        Will disable DNSSEC on this domain.  The DS records must be removed
        from the upstream DNS provider first to avoid downtime.
      operationId: disableDomainDnsSec
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: DNSSEC disabled
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/screenshot/take:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    post:
      tags:
        - websites
      summary: Take website screenshot immediately
      description: >-
        Take website screenshot immediately
      operationId: takeScreenshot
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/screenshot/timestamp:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - websites
      summary: Get last screeshot file's Timestamp
      description: >-
        Returns Unix Timestamp for the last screenshot png file, if no screenshot found
        returns undefined
      operationId: getScreenshotTimestamp
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Unix Timestamp if screenshot exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnixTimestamp"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  ###############################################################################
  # -- website emails
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/local_remote:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - emails
      summary: Get the current local/remote status
      description: >-
        Fetches the current status of the domain, whether it is treated as local
        or remote by the MTA
      operationId: getDomainLocalRemote
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Local remote status successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalRemoteBody"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - emails
      summary: Update email local/remote status
      description: >-
        Sets the MTA to treat this domain as either local or remote.
      operationId: setDomainLocalRemote
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocalRemoteBody"
      responses:
        "204":
          description: Domain status successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/emails:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - emails
      summary: Get website emails
      description: >-
        Returns all emails belonging to a website.

        The results may optionally be sorted and paginated.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [address, mailbox, forwarders, autoresponders, size]
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/Search"
        - name: includeInternal
          in: query
          description: Include internal emails in response
          required: false
          schema:
            type: boolean
            default: false
      operationId: getWebsiteEmails
      responses:
        "200":
          description: Emails successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailsListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/domains/{domain_id}/emails:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DomainId"
    post:
      tags:
        - emails
      summary: Create an email under website's domain
      description: >-
        Creates a new email under the given website.

        The email may have a mailbox or it may be a forwarder, which means it
        merely serves to forward incoming emails to the specified email
        addresses.

        If a password is supplied, a mailbox is created. Otherwise, forwarders
        must be specified as an email must always have a delivery route.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteEmail
      requestBody:
        description: New email details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewEmail"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/emails/{email_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/EmailId"
    get:
      tags:
        - emails
      summary: Get website email
      description: >-
        Returns details about the given email belonging to the given website.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteEmail
      responses:
        "200":
          description: Email successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailDetailed"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - emails
      summary: Update website email
      description: >-
        Updates the given email belonging to the given website.

        The email may have a mailbox or it may be a forwarder, which means it
        merely serves to forward incoming emails to the specified email
        addresses.

        If `hasMailbox` is set to false, the mailbox is deleted if it hadn't
        existed before, and vice versa. The email must either have a mailbox or
        forwarders an it must always have a delivery route.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWebsiteEmail
      requestBody:
        description: Email update details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEmail"
      responses:
        "200":
          description: Email successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - emails
      summary: Delete website email
      description: >-
        Deletes the email belonging to the given website.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteEmail
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Email successfully deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/emails/{email_id}/client-conf:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/EmailId"
    get:
      tags:
        - emails
      summary: Get website email client configuration
      description: >-
        Returns the client configuration for the given email.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteEmailClientConf
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Email client config successfully queried
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/emails/{email_id}/autoresponder:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/EmailId"
    get:
      tags:
        - emails
      summary: Get website email autoresponder
      description: >-
        Returns autoresponders configured for the given email.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteEmailAutoresponder
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Autoresponder successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Autoresponder"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - emails
      summary: Create new website email autoresponder
      description: >-
        Creates a new autoresponder for the given email.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteEmailAutoresponder
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Autoresponder details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAutoresponder"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceId"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - emails
      summary: Delete website email autoresponder
      description: >-
        Deletes the autoresponder belonging to the given website email.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteEmailAutoresponder
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Autoresponder successfully deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /emails/{email_id}/spam_thresholds:
    parameters:
      - $ref: "#/components/parameters/EmailId"
    put:
      tags:
        - emails
      summary: Set spam thresholds for an email address
      operationId: setEmailSpamThresholds
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Spam thresholds.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpamThresholds"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - emails
      summary: Get spam thresholds for an email address
      operationId: getEmailSpamThresholds
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpamThresholds"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  ###############################################################################
  # -- website ssh
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/ssh/keys:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - name: sanitize
        in: query
        description: >-
          If set to true, the SSH keys with unrecognized comments will be sanitized
          by changing the comment to a valid format that can be used to store
          metadata. If any of the keys requires sanitization the content of
          the authorized_keys file will be edited accordingly before returning
          the set of keys.
          If instead set to false, only the SSH keys that are recognized as valid
          (that is, contain valid metadata in their comments), will be returned,
          all the other keys will be skipped.
        required: false
        schema:
          type: boolean
          default: false
    get:
      tags:
        - websites
      summary: Get website's authorized SSH keys
      description: >-
        Returns a list of authorized public SSH keys.
        Invalid SSH keys entries in the authorized_keys file will be ignored.
        If the authorized_keys file does not exists, an empty set will be
        returned.
      operationId: getWebsiteSshKeys
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SshKeyFullListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      tags:
        - websites
      summary: Authorize a new SSH key.
      description: >-
        This operation will authorize the given public SSH key by appending its
        content to the website's .ssh/authorized_keys file.
      operationId: authorizeWebsiteSshKey
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: The public SSH key to authorize.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSshKey"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewSshKeyId"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/ssh/keys/{key_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/SshKeyId"
    delete:
      tags:
        - websites
      summary: Unauthorize the public SSH key with the given ID.
      description: >-
        This operation will unauthorize the given public SSH key by deleting its
        content from the website's .ssh/authorized_keys file.
      operationId: unauthorizeWebsiteSshKey
      responses:
        "204":
          description: SSH key successfully deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - websites
      summary: Update an existing website public SSH key.
      description: >-
        This operation will update the given public SSH key value, and/or its
        associated friendly name.
        An error will be returned if none of the expected arguments of the request
        body is specified.
      operationId: updateWebsiteSshKey
      requestBody:
        description: The public SSH key updatable fields.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SshKeyUpdate"
      responses:
        "200":
          description: SSH key successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/ssh/password:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    post:
      tags:
        - websites
      summary: Authorize a new SSH password for website.
      description: >-
        This operation will authorize the given SSH password for the website's unix user.
        this request will replace the existing password for the user if already set.
      operationId: authorizeWebsiteSshPassword
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: The SSH password to authorize.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPassword"
      responses:
        "201":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- ssl
  ###############################################################################

  /v2/domains/{domain_id}/letsencrypt:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    post:
      tags:
        - websites
        - domains
        - letsencrypt
      summary: Generate and setup letsencrypt ssl certificates for website's domain
      description: >-
        Generates letsencrypt certificates for the domain.

        This is a longer running task, that will do a complete ssl setup for a given domain.
        Once completed any given domain will get served over `https`.

        Given domain must be publicly accessible and being served from our service.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteDomainLetsencryptCerts
      responses:
        "201":
          description: SSL Certs successfully created
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/domains/{domain_id}/letsencrypt_mail:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    post:
      tags:
        - websites
        - domains
        - letsencrypt
      summary: Generate and setup letsencrypt ssl certificates for website's domain with mail. prefix.
      description: >-
        Generates letsencrypt certificate for the mail server at mail.customerdomain.
      operationId: createWebsiteMailDomainLetsencryptCerts
      responses:
        "201":
          description: SSL Certs successfully created
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/domains/{domain_id}/letsencrypt_preflight:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    post:
      tags:
        - websites
        - domains
        - letsencrypt
      summary: Perform the LetsEncrypt preflight check
      description: >-
        Will attempt to verify that the domain will successfully achieve a
        LetsEncrypt certificate if attempted.  Provides debug information.
      operationId: performLetsEncryptPreflightCheck
      responses:
        "200":
          description: Preflight check completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LetsEncryptPreflightResult"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/domains/{domain_id}/ssl:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - orgs
        - websites
        - ssl
      summary: Returns the SSL for this website domain
      description: >-
        Endpoint for retrieving SSL certificates for a given website
        including certificates generated by letsencrypt
      operationId: getWebsiteDomainSslCert
      responses:
        "200":
          description: SSL details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainSslCertWithData"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - orgs
        - websites
        - ssl
      summary: Upload custom ssl certificate, key and optional fullchain for a given website
      description: >-
        Endpoint for uploading custom SSL certificate for a given website.
        Verifies the cert key and maps to relevant domains that
        the certificate can be applied to. Returns error if no domain match is found.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: uploadWebsiteDomainSslCert
      requestBody:
        description: Cert, private key and optional fullchain.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SslCert"
      responses:
        "201":
          description: SSL Cert successfully uploaded, returns list of applicable domains
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewSslCert"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/domains/{domain_id}/mail_ssl:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - orgs
        - websites
        - ssl
      summary: Returns the SSL for this website domain with the mail.prefix
      description: >-
        Endpoint for retrieving SSL certificates for a given website
        including certificates generated by letsencrypt
      operationId: getWebsiteMailDomainSslCert
      responses:
        "200":
          description: SSL details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainSslCertWithData"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - orgs
        - websites
        - ssl
      summary: Upload SSL for mail.customerdomain.
      operationId: uploadWebsiteMailDomainSslCert
      requestBody:
        description: Cert, private key and optional fullchain.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SslCert"
      responses:
        "201":
          description: SSL Cert successfully uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewSslCert"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/domains/{domain_id}/ssl/force_ssl:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    put:
      tags:
        - orgs
        - websites
        - ssl
      summary: Set "force ssl" status for domain mapping
      operationId: setWebsiteDomainForceSsl
      requestBody:
        description: Boolean "force ssl" setting
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: Setting updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/domains/{domain_id}/modsec_status:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    put:
      tags:
        - websites
        - domains
      summary: Set mod security status on a single domain
      operationId: setWebsiteDomainModSecStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModSecStatus"
      responses:
        "200":
          description: Modsec status updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - websites
        - domains
      summary: Get mod security status for a single domain
      operationId: getWebsiteDomainModSecStatus
      responses:
        "200":
          description: Modsec status queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModSecStatus"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /v2/domains/{domain_id}/vhost:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - websites
        - domains
      summary: >
        Get domain's custom vhost file, if the file does not exist return empty string
      operationId: getWebsiteDomainVhost
      responses:
        "200":
          description: Vhost file queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vhost"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - websites
        - domains
      summary: Set a custom vhost file
      operationId: setWebsiteDomainVhost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vhost"
      responses:
        "200":
          description: Vhost file updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - websites
        - domains
      summary: Deletes domain's custom vhost file if any
      operationId: deleteWebsiteDomainVhost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - webserver
              properties:
                webserver:
                  $ref: "#/components/schemas/VhostWebserverKind"
      responses:
        "200":
          description: Vhost deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- ftp/users
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/ftp/users:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
        - ftp
      summary: Returns all ftp users data for a given website
      description: >-
        Endpoint for retreaving ftp users for a given website

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getFtpUsers
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Ftp Users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FtpUsersFullListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - websites
        - ftp
      summary: Creates a new FTP user for a given website
      description: >-
        Endpoint for creating a new FTP user. NOTE: user.account well get appended
        with website's primary domain. i.e. `username` will become `username@domain.com`

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createFtpUser
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - name: createHome
          in: query
          description: >-
            If set to true we will try to crete a new home_dir for the user if does not exist.
          required: false
          schema:
            type: boolean
      requestBody:
        description: FTP User
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewFtpUser"
      responses:
        "201":
          description: FTP user successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/websites/{website_id}/ftp/users/{username}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - name: username
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - websites
        - ftp
      summary: Deletes given FTP user
      description: >-
        Endpoint for deleting FTP user for a given website.
        User homeDir can only be deleted if it is a subdir for the website home.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteFtpUser
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - name: deleteHome
          in: query
          description: >-
            If set to true we will try to delete the homeDir for the user.
            User homeDir can only be deleted if it is a subdir for the website home.
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: FTP user successfully deleted
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - websites
        - ftp
      summary: Update given FTP user
      description: >-
        Endpoint for updating FTP user for a given website
        We only allow user's homeDir and password to be updated.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateFtpUser
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: FTP User
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FtpUserUpdate"
      responses:
        "204":
          description: FTP user successfully updated
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- website mysql dbs
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/mysql-dbs:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
        - mysql
      summary: Get website MySQL databases
      description: >-
        Returns all MySQL databases belonging to the given website.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteMySQLDBs
      responses:
        "200":
          description: Databases successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MySQLDBsFullListing"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - websites
        - mysql
      summary: Create a MySQL database for website
      description: >-
        Creates a new MySQL database for the given website.

        The supplied name must conform to the following regular expression:
        `^[0-9a-z$_]+$`. That is, a name may only contain alphanumerical
        characters, dollar signs, and underscores.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteMySQLDB
      requestBody:
        description: New database details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMySQLDB"
      responses:
        "201":
          description: Database successfully created
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/websites/{website_id}/mysql-dbs/{db_name}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DbName"
    delete:
      tags:
        - mysql
      summary: Delete website MySQL database
      description: >-
        Delete website's MySQL database.

        NOTE: All data will be lost after this endpoint returns.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteMySQLDB
      responses:
        "204":
          description: Database successfully deleted
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/mysql-dbs/{db_name}/sso:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DbName"
      - $ref: "#/components/parameters/ShouldRedirect"
    get:
      tags:
        - mysql
      summary: Get phpMyAdmin SSO URL
      description: >-
        Fetches a single sign-on URL to access phpMyAdmin for this database
        without the need to log in.
      operationId: getPhpMyAdminSSOUrl
      responses:
        "200":
          description: SSO URL Fetched
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/websites/{websiteId}/mysql/{db_id}/sql:
    parameters:
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DbName"
    post:
      tags:
        - mysql
      summary: Uploads sql file and executes it against db
      description: >-
        Uploads an sql file which is then executed against given db. Allowed
        file types are '.sql', '.gz' and '.zip'. The gzip-ed file must be a
        valid sql. The zip archive may contain only one '.sql' file, however
        the file can be within a directory.

        If the force flag is set to true (default is false), the SQL execution
        will not stop when an error is raised (corresponds to the --force option
        of mysql cli).

        The max allowed size is 500 MB.
      operationId: uploadSql
      parameters:
        - $ref: "#/components/parameters/Force"
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SqlFile"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/mysql-dbs/{db_name}/sql:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DbName"
    get:
      tags:
        - mysql
      summary: Takes a backup of given database and returns it gziped
      description: >-
        Performs a database backup into an sql, gzips the sql and returns the
        file system path for subsequent download with filerd.
      operationId: downloadSql
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Path to SQL file relative to the website's home dir
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/mysql-users:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - mysql
      summary: Get website MySQL database users
      description: >-
        Returns all MySQL users belonging to the given website database.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteMySQLUsers
      responses:
        "200":
          description: Database users successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MySQLUsersFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - mysql
      summary: Create website MySQL database user
      description: >-
        Creates a new MySQL database user for the given website database.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteMySQLUser
      requestBody:
        description: New user details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMySQLUser"
      responses:
        "201":
          description: Database user successfully created
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/websites/{website_id}/mysql-users/{username}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DbUserName"
    put:
      tags:
        - mysql
      summary: Update website MySQL database user
      description: >-
        Updates website's MySQL database user's password (username update coming later).

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWebsiteMySQLUser
      requestBody:
        description: User update details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MySQLUserUpdate"
      responses:
        "200":
          description: Database user successfully updated
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - mysql
      summary: Delete website MySQL database user
      description: >-
        Delete website's MySQL database.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteMySQLUser
      responses:
        "204":
          description: Database user successfully deleted
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/mysql-users/{username}/privileges:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DbUserName"
    put:
      tags:
        - mysql
      summary: Create website MySQL database user privileges
      description: >-
        Sets the privileges for a user on a given MySQL database.  This will override
        their current privileges.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: setWebsiteMySQLUserPrivileges
      requestBody:
        description: User privilege grants.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MySQLUserGrants"
      responses:
        "201":
          description: Database user privileges successfully updated
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/websites/{website_id}/mysql-users/{username}/access-hosts:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/DbUserName"
    post:
      tags:
        - mysql
      summary: Create website MySQL database user access hosts
      description: >-
        Adds for the given user new access hosts to website's MySQL database.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteMySQLUserAccessHosts
      requestBody:
        description: User access hosts.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MySQLUserAccessHosts"
      responses:
        "200":
          description: Database user access hosts successfully updated
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - orgs
        - mysql
      summary: Delete website MySQL database user access hosts
      description: >-
        Removes from the given user access hosts to website's MySQL database.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteMySQLUserAccessHosts
      requestBody:
        description: User access hosts.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MySQLUserAccessHosts"
      responses:
        "204":
          description: Database user access hosts successfully deleted
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- website metrics
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/metrics:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/MetricsRangeStart"
      - $ref: "#/components/parameters/MetricsRangeEnd"
      - $ref: "#/components/parameters/MetricsGranularity"
    get:
      tags:
        - websites
        - metrics
      summary: Get website metrics
      description: >-
        Returns website metrics between the optional start and end date.
        Defaults to last 24 hours.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteMetrics
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteMetricsFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- website crontab
  ###############################################################################
  /orgs/{org_id}/websites/{website_id}/crontab:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    delete:
      tags:
        - websites
      summary: Delete user's crontab
      description: >-
        Delete user's crontab.

        Remove crontab file from disk.
      operationId: deleteUserCrontab
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    patch:
      tags:
        - websites
      summary: Update user's crontab
      description: >-
        Update user's crontab.

        Note that users are able to update only cron expressions and
        environment variables.
      operationId: updateUserCrontab
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: >-
          List of crontab expressions to be inserted into user's
          crontab.

          To identify a crontab expressions in the crontab file,
          we use line numbers.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCrontabFullListing"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    get:
      tags:
        - websites
      summary: Get user's crontab
      description: >-
        Get user's crontab.

        Only editable parts of crontab is returned.
      operationId: getUserCrontab
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successfully parsed crontab and found crontab exprestions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrontabFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges

  ###############################################################################
  # -- website apps
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/apps:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    post:
      tags:
        - apps
      summary: Create website applications
      description: >-
        Creates a new application for website.

        Note that if the installed app is WordPress, this endpoint will enable
        PHP for the website if it isn't already.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWebsiteApp
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewWebsiteApp"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - apps
      summary: Get website applications
      description: >-
        Returns all applications installed on this website.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteApps
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteAppsFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
    delete:
      tags:
        - apps
      summary: Delete website app
      description: >-
        Deletes an existing website app. Unless `backupBeforeOperation=false`
        query param is sent, it runs a website backup before deleting the app.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteApp
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/BackupBeforeOperation"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- wordpress
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/apps/wordpress:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - wordpress
      summary: Trigger discovery of WP installations
      description: >-
        WP installations that were made manually (aside from invoking) orchd
        APIs aren't immediately discovered by orchd.

        Invoking this endpoint triggers the discovery and adds installation
        info to the database.
      operationId: getWordpressInstallations
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WpInstallation"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
    get:
      tags:
        - wordpress
      summary: Get Wordpress application settings
      description: >-
        Queries an existing Wordpress application's settings.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWordpressSettings
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WpSettings"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - wordpress
      summary: Update Wordpress app settings
      description: >-
        Updates an existing website WP application's settings.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWordpressSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWpSettings"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges or operation not allowed by plan
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/version:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
    patch:
      tags:
        - wordpress
      summary: Update website WP app to specific version or latest
      description: >-
        Updates an existing website Wordpress application's version to given
        version (defaults to latest). If the installation is already on its
        latest version, returns 200 without doing any work.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWordpressAppVersion
      responses:
        "200":
          description: >-
            Successfully updated the WP core or there's no update to apply
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    get:
      tags:
        - wordpress
      summary: Get WordPress version
      description: >-
        Fetches the WordPress version of a running installation in real time.
      operationId: getWordpressAppVersion
      responses:
        "200":
          description: Version successfully queried
          content:
            application/json:
              schema:
                type: object
                required:
                  - version
                properties:
                  version:
                    type: string
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/themes:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/CacheControl"
    get:
      tags:
        - wordpress
      summary: Get website WordPress themes
      description: >-
        Returns the themes installed on website's WordPress.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWordpressThemes
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WpThemesFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - wordpress
      summary: Install a WordPress theme
      operationId: installWordpressTheme
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstallWpThemeRequest"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/themes/{theme}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/ThemeName"
    delete:
      tags:
        - wordpress
      summary: Delete a WordPress theme
      operationId: deleteWordpressTheme
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/themes/{theme}/update:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/ThemeName"
    post:
      tags:
        - wordpress
      summary: Update a WordPress theme
      operationId: updateWordpressTheme
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/themes/{theme}/activate:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/ThemeName"
    post:
      tags:
        - wordpress
      summary: Activate a WordPress theme
      operationId: activateWordpressTheme
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/themes/{theme}/auto_update:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/ThemeName"
    patch:
      tags:
        - wordpress
      summary: Set WordPress theme auto-update status
      operationId: setWordpressThemeAutoUpdateStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/users:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
    get:
      tags:
        - wordpress
      description: >-
        Returns the users of this wordpress app.

        This is a separate endpoint as it is takes longer to return than most
        other endpoints.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWordpressUsers
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WpUsersFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - wordpress
      summary: Create website WordPress user
      description: >-
        Creates a new user in this wordpress app.

        The created user is independent from Enhance logins--it only
        concerns the wordpress app (which much like Enhance is its own
        webapp).

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: createWordpressUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewWpUser"
      responses:
        "201":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/users/default:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
    get:
      tags:
        - wordpress
      description: >-
        Return previously set default Wordpress SSO user. If WP users exist but
        none were set to be default, returns 404.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getDefaultWpSsoUser
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WpUser"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - wordpress
      summary: Set WP user as the default SSO user for that website.
      description: >-
        Idempotently set WP user as the default SSO user for that website.

        User needs to exist.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: setDefaultWpSsoUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WpUserId"
      responses:
        "201":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/users/{user_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/WpUserId"
    patch:
      tags:
        - wordpress
      summary: Update WordPress user
      description: >-
        Updates an existing user in this wordpress app.

        Session holder must be at least a `SuperAdmin` in this org or
        a parent org, or be a member in this org that has access to the
        website.
      operationId: updateWordpressUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWpUser"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - wordpress
      summary: Delete WordPress user
      description: >-
        Deletes an existing user in this wordpress app.

        Session holder must be at least a `SuperAdmin` in this org or
        a parent org, or be a member in this org that has access to the
        website.
      operationId: deleteWordpressUser
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/users/{user_id}/sso:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/WpUserId"
      - $ref: "#/components/parameters/ShouldRedirect"
    get:
      tags:
        - wordpress
      summary: Get SSO URL for a WP user
      description: >-
        Session holder must have write access to the website
      operationId: getWordpressUserSsoUrl
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  # ANCHOR: wordpress_config_key
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/wp-config/{wp_option}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/WpOption"
    get:
      tags:
        - wordpress
      summary: Get the WP config value for a given option
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getWordpressConfig
      description: >-
        Returns the value of a wp-config.php entry.
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WordpressConfig"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  # ANCHOR_END: wordpress_config_key

  # ANCHOR: wordpress_config
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/wp-config:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
    put:
      tags:
        - wordpress
      summary: Set a single value of a wp-config.php entry.
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setWordpressConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WordpressConfig"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid request
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  # ANCHOR_END: wordpress_config

  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/plugins:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/CacheControl"
    get:
      tags:
        - wordpress
      summary: Get website WordPress plugins
      description: >-
        Returns the plugins installed on wordpress.

        This is a separate endpoint as it is takes longer to return than the
        rest of the application endpoints.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWordpressPlugins
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WpPluginsFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - wordpress
      summary: Install a plugin
      description: >-
        Adds a specific plugin to a WordPress installation.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: installWordpressPlugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstallWpPlugin"
      responses:
        "201":
          description: Created
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/plugins/{plugin}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/PluginName"
    delete:
      tags:
        - wordpress
      summary: Delete website WordPress plugin
      description: >-
        Deletes the specified wordpress plugin.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWordpressPlugin
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - wordpress
      summary: Updates website WordPress plugin settings
      description: >-
        Updates the settings for a WP plugin, such as whether the plugin should
        be active.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWordpressPluginSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWpPlugin"
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/apps/{app_id}/wordpress/plugins/{plugin}/version:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/AppId"
      - $ref: "#/components/parameters/PluginName"
    patch:
      tags:
        - wordpress
      summary: Updates website WordPress plugin to latest version
      description: >-
        Updates the specified wordpress plugin to its latest version. Does
        nothing if the plugin is already latest.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: updateWordpressPluginToLatest
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/apps/{app_id}/wordpress/url:
    parameters:
      - $ref: "#/components/parameters/AppId"
    get:
      tags:
        - wordpress
      summary: Fetches the site URL for a WordPress installation
      operationId: getWordPressSiteurl
      responses:
        "200":
          description: Successfully fetched site url
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - wordpress
      summary: Sets the site URL for a WordPress installation
      operationId: setWordPressSiteurl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Successfully updated WordPress site URL
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/apps/{app_id}/wordpress/maintenance-mode:
    parameters:
      - $ref: "#/components/parameters/AppId"
    get:
      tags:
        - wordpress
      summary: Gets the MaintenanceMode for a WordPress installation
      operationId: getWordPressMaintenanceMode
      responses:
        "200":
          description: Successfully returned WordPress MaintenanceMode
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceModeStatus"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - wordpress
      summary: Sets the MaintenanceMode for a WordPress installation
      operationId: setWordPressMaintenanceMode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceMode"
      responses:
        "200":
          description: Successfully updated WordPress MaintenanceMode
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- website backups
  ###############################################################################

  /orgs/{org_id}/websites/{website_id}/backups:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - backups
      summary: Get all website backups metadata
      description: >-
        Returns a list of all website backups.

        This includes the backups that were not successful as well, or backups
        that were only partially successful (e.g. the home directory was backed
        up but not the databases).

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteBackups
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupsFullListing"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - backups
      summary: Create a website backup
      description: >-
        Creates a new full website backup.

        This is a long running operation and the request doesn't return until
        all backups are finished, or an error occurs. If you want to see the
        backup progress, you can periodically query the backup status via
        `getWebsiteBackupStatus`.

        Backups consists of several components, and a component is the smallest
        granularity of a backup. The components are: backing up of the website's
        home directory, the website's mysql databases, and the website's emails.

        The backups may be partial, that is, some out of all backup components
        may succeeded, but e.g. the backup of the mysql databases may fail. In
        both cases, the backup snapshot is still created, and the mysql backups
        are marked as failed for the backup record.

        Email backups are not done automatically, as they need not be backed up
        in most cases (due to the expectation that customers would want to
        backup and then roll back a website after filesystem or database
        changes, which wouldn't concern emails). Doing so redundantly is time
        consuming so it is skipped by default, but emails may be backed up if
        the `includeEmails` query parameter is set to true.

        If the backup fails altogether, this endpoint still returns a 201
        Created, but in this case only the metadata in `orchd`'s db is inserted,
        no actual backup snapshot is created. This is for information purposes,
        such a backup, perhaps needless to say, cannot be restored.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: backupWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - name: includeEmails
          in: query
          description: The boolean flag used to include emails in the backup.
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupOptions"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Backup"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /orgs/{org_id}/websites/{website_id}/backups/{backup_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/BackupId"
      - $ref: "#/components/parameters/BackupStorageKind"
    get:
      tags:
        - backups
      summary: Get detailed metadata of the website backup
      description: >-
        Returns detailed information about the backup.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteBackup
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupDetailed"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - backups
      summary: Restore website from a backup
      description: >-
        Restores the website's home directory and MySQL databases, and
        optionally the website's email mailboxes if the `includeEmails`
        query parameter is set to true.

        Note that if the website was deleted or any of its entities was deleted
        through `orchd` (via one or more of the DELETE endpoints), this endpoint
        does not restore those resources. It may only be used when e.g. one
        wants to restore the previous state of the mailbox of an existing
        account (but not a deleted account), or the state of an existing
        website's home directory.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: restoreWebsite
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: >-
          The options used to define what will be restored from the backup
          snapshot.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupRestoreOptions"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - backups
      summary: Delete a backup
      description: >-
        Deletes a backup.

        If the backup refers to a (partially) successful backup, both its
        metadata and the backup snapshot on the backup server will be removed,
        otherwise just the metadata is removed.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: deleteWebsiteBackup
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/websites/{website_id}/backups/{backup_id}/restore_status:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/WebsiteId"
      - $ref: "#/components/parameters/BackupId"
    get:
      tags:
        - backups
      summary: Get the last detailed metadata of the restored website backup.
      description: >-
        Returns the last detailed information about the restored backup.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org, or be a member in this org that has access to the website.
      operationId: getWebsiteRestoreStatus
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestoreDetailed"
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- invites
  ###############################################################################

  /orgs/{org_id}/invites:
    post:
      tags:
        - invites
      summary: Create invite
      description: >-
        Issues an invite for the user with the given email.

        The user may or may not have an account in the realm that the
        organization is in:
        If the user is not registered yet, a pending login entry is created for
        them along with a pending member entry, and the login is "activated"
        once the user accepts the invite. In this case they need to supply
        a password.
        If the user is already registered, their existing login is linked to
        a pending member entry that gets "activated" once the user accepts the
        invite.

        The sent out invite contains the following URL:
        http://{control_panel_domain}/invites/{invite_key}?email={user_email}

        The invite is also returned as a string response for immediate display
        to the creator of the invite.

        Where control panel domain is the domain name of the reseller's or the
        MO's control panel, the invite key is randomly generated, and the user
        email is the email address to which the invite is sent (and can be used
        by the API consumer e.g. for display purposes).

        If the invite is issued for the same organization and email more than
        once, the invite email is simply sent out again, with a different invite
        token.

        The routine will fail if the login already has membership in the
        organization.

        Session holder must be at least a `SuperAdmin` in this org or a parent org.
      operationId: createInvite
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        description: Invite details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInvite"
      responses:
        "201":
          description: Invite successfully created
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /invites/{invite_id}:
    post:
      tags:
        - invites
      summary: Accept invite
      description: >-
        Accepts the invite.

        There are four cases that need to be handled:

        No login session is present, user is newly invited and does not yet have
        a password. The password submitted in the body is set on the new user
        and the login's member is marked as active within the organization.
        A session is created and set in the returned cookie.

        No login session is present but user already exists and has a password.
        The password submitted in the request body is used to validate the login
        and the login's member is marked as active within the organization.
        A session is created and set in the returned cookie.

        A login session is present for the user to whom the invite belongs. The
        user is marked active within the organisation to which it was invited.

        A login session is present for a login to whom the invite does not
        belong, resulting in an error.
      operationId: acceptInvite
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - name: invite_id
          in: path
          description: The id of the invite.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Login credentials.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcceptInviteBody"
      responses:
        "200":
          description: Invite accepted
          headers:
            Set-Cookie:
              schema:
                type: string
        "403":
          description: Session does not belong to invited user
        "404":
          description: Not found

  /invites/{invite_id}/validate:
    post:
      tags:
        - invites
      summary: Validate invite
      operationId: validateInvite
      description: >-
        Validates the invite.

        If successful, it returns the invite details: the organization's id and name,
        and the to-be-member's role.

        No session required.
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - name: invite_id
          in: path
          description: The id of the invite.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteValidation"

  ###############################################################################
  # -- email-client
  ###############################################################################

  /email-client/public-ip:
    get:
      tags:
        - email-client
      summary: Returns public Ip Address of the email server
      operationId: GetEmailPublicIp
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Address"
        - $ref: "#/components/parameters/Password"
      responses:
        "200":
          description: Public IP address for email server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailPublicIp"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  /email-client/password:
    put:
      tags:
        - email-client
      summary: Updates email account's password
      description: >-
        Accepts a new password in body.
        Client must send Authorization token, email address and its current
        password for authentication
      operationId: UpdateEmailPassword
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Address"
        - $ref: "#/components/parameters/Password"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailPasswordUpdate"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /email-client/forwarders:
    get:
      tags:
        - email-client
      summary: Returns email account's forwarders
      description: >-
        Returns forwarders list for the given email account.
        Client must send Authorization token, email address and its current
        password for authentication
      operationId: GetEmailForwarders
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Address"
        - $ref: "#/components/parameters/Password"
      responses:
        "200":
          description: Forwarders successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForwardersFullListing"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - email-client
      summary: Updates email account's forwarders
      description: >-
        Accepts forwarders list in body.
        Client must send Authorization token, email address and its current
        password for authentication
      operationId: UpdateEmailForwarders
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Address"
        - $ref: "#/components/parameters/Password"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailForwardersUpdate"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /email-client/autoresponders:
    parameters:
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/Address"
      - $ref: "#/components/parameters/Password"
    get:
      tags:
        - email-client
      summary: Get email account autoresponder
      description: >-
        Returns autoresponders configured for the given email.

        Client must send Authorization token, email address and its current
        password for authentication
      operationId: getEmailAutoresponders
      responses:
        "200":
          description: Autoresponders successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Autoresponder"
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - email-client
      summary: Create new email autoresponder
      description: >-
        Creates a new autoresponder for the given email.

        Client must send Authorization token, email address and its current
        password for authentication
      operationId: createEmailAutoresponder
      requestBody:
        description: Autoresponder details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAutoresponder"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceId"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /email-client/autoresponders/{autoresponder_id}:
    parameters:
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/Address"
      - $ref: "#/components/parameters/Password"
    put:
      tags:
        - email-client
      summary: Update email autoresponder
      description: >-
        Updates the autoresponder belonging to the given email account.

        Client must send Authorization token, email address and its current
        password for authentication
      operationId: updateEmailAutoresponder
      requestBody:
        description: Autoresponder update details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAutoresponder"
      responses:
        "200":
          description: Email successfully updated
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - email-client
      summary: Delete email autoresponder
      description: >-
        Deletes the autoresponder belonging to the given email account.

        Client must send Authorization token, email address and its current
          password for authentication
      operationId: deleteEmailAutoresponder
      responses:
        "204":
          description: Autoresponder successfully deleted
        "401":
          description: Unauthorized
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- branding
  ###############################################################################

  /branding:
    get:
      tags:
        - branding
      summary: Get default branding
      description: >-
        Returns the branding properties of an organization.

        This endpoint doesn't require authentication so that a loginless user
        may query the control panel's reseller's branding. In this case, the
        request's Host HTTP header will be matched against an existing
        reseller's control panel host, and that reseller's branding returned.

        To create a "control panel host" for the reseller, the reseller needs to
        create a control panel website using the website creation endpoint,
        specifying the control panel flag. For more details, please refer to
        `createWebsite`.

        If, however, the user is logged in, the frontend should pass the
        currently logged in organization's id. Based on this, this endpoint will
        return the branding of that organization's realm's reseller. This means
        that if the user is currently logged into a reseller, that reseller's id
        would be passed and its branding would be returned. If the user is
        logged into a customer organization of a reseller, this endpoint looks
        up the parent of that customer and returns the branding of the parent.

        An organization may not have any branding at all, in which case an
        "empty branding" is returned.
      operationId: getBranding
      parameters:
        - name: orgId
          in: query
          description: The id of the currently logged in organization.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branding"
  /orgs/{org_id}/branding/settings:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - branding
      summary: Get all current settings
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getBrandingSettings
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsFullListing"
    post:
      tags:
        - branding
      summary: Create branding settings
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: createBrandingSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      responses:
        "201":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/branding/settings/{name}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/Name"
    get:
      tags:
        - branding
      summary: Get the specified setting
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getBrandingSetting
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Setting"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    put:
      tags:
        - branding
      summary: Create or update the specified setting
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: updateBrandingSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    delete:
      tags:
        - branding
      summary: Remove the specified setting
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteBrandingSetting
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/branding/logo:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    put:
      tags:
        - branding
      summary: Set brand logo
      description: >-
        Sets the reseller's brand logo, overwriting any previous one if one
        exists.

        The max allowed size is 200 KiB.
        The image format may be jpeg, png, svg and ico.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: setBrandLogo
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  format: binary
            encoding:
              logo:
                contentType: image/png, image/jpeg, image/svg+xml
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - branding
      summary: Delete brand logo
      description: >-
        Deletes the brand's logo image

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: deleteBrandLogo
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/branding/inverse-logo:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    put:
      tags:
        - branding
      summary: Set brand inverse logo
      description: >-
        As per setBrandLogo except this logo will be displayed where there is a
        dark background.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: setBrandInverseLogo
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  format: binary
            encoding:
              logo:
                contentType: image/png, image/jpeg, image/svg+xml
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - branding
      summary: Delete brand inverse logo
      description: >-
        Deletes the brand's logo inverse image

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: deleteInverseBrandLogo
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/branding/inverse-icon:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    put:
      tags:
        - branding
      summary: Set brand inverse icon
      description: >-
        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: setBrandInverseIcon
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                icon:
                  type: string
                  format: binary
            encoding:
              icon:
                contentType: image/png, image/jpeg, image/svg+xml, image/ico
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - branding
      summary: Delete brand inverse icon
      description: >-
        Deletes the brand's icon inverse image

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: deleteBrandInverseIcon
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/branding/login-image:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    put:
      tags:
        - branding
      summary: Set brand login image
      description: >-
        Sets the reseller's brand login image, overwriting any previous one if one
        exists.

        The max allowed size is 2 MiB.
        The image format may be jpeg, png, and ico.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: setBrandLoginImage
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                loginImage:
                  type: string
                  format: binary
            encoding:
              loginImage:
                contentType: image/png, image/jpeg
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - branding
      summary: Delete brand login image
      description: >-
        Deletes the reseller's brand login image

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: deleteBrandLoginImage
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/branding/favicon:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    put:
      tags:
        - branding
      summary: Set brand favicon
      description: >-
        Sets the reseller's brand favicon, overwriting any previous one if one
        exists.

        The max allowed size is 200 KiB.
        The image format may be jpeg, png, and ico.

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: setBrandFavicon
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                favicon:
                  type: string
                  format: binary
            encoding:
              favicon:
                contentType: image/png, image/jpeg, image/ico
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - branding
      summary: Delete brand favicon
      description: >-
        Removes an existing favicon

        Session holder must be at least a `SuperAdmin` in this org or a parent
        org.
      operationId: deleteBrandFavicon
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "204":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -- Name server domains
  ###############################################################################

  /orgs/{org_id}/name-servers:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    post:
      tags:
        - branding
      summary: Create reseller name server domain
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: createNameServerDomain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDomain"
      responses:
        "201":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
  /orgs/{org_id}/name-servers/{domain}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/Domain"
    patch:
      tags:
        - branding
      summary: Update reseller name server domain name
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: updateNameServerDomain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDomain"
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
    delete:
      tags:
        - branding
      summary: Delete reseller name server domain name
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteNameServerDomain
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists

  ###############################################################################
  # -- Staging domains
  ###############################################################################

  /orgs/{org_id}/staging-domain:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    post:
      tags:
        - branding
      summary: Set or update domain suffix for staging websites created by customers
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setStagingDomain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StagingDomain"
      responses:
        "201":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    get:
      tags:
        - branding
      summary: Fetches the staging domain which is currently set
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getStagingDomain
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StagingDomain"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  ###############################################################################
  # --------------------------------- Importers -------------------------------
  ###############################################################################
  /orgs/{org_id}/import/server/settings:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    post:
      tags:
        - importers
      summary: Create settings for the server import
      description: >-
        Create settings for the server import.
      operationId: createImportServerSettings
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewImportServerSettings"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    get:
      tags:
        - importers
      summary: List all server import settings
      operationId: listImportServerSettings
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportServerSettingsFullListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /orgs/{org_id}/import/server/{server_id}/pull-domains:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - importers
      summary: Pull domains form the remote server.
      description: >-
        Pull domains form the remote server, and cache them.

        To get cached domains, use getImportServerDomainsCached.
      operationId: getImportServerPullDomains
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportServerDomainsFullListing"

        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/import/server/{server_id}/cached-domains:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - importers
      summary: Returns cached domains
      description: >-
        Returns cached domains.
      operationId: getImportServerDomainsCached
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/SearchDomain"
        - name: sortBy
          in: query
          description: The field by which to sort.
          required: false
          schema:
            type: string
            enum: [domain, user, kind]
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportServerDomainsListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/import/plesk-server/{server_id}/domain:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ServerId"
    post:
      tags:
        - importers
      summary: Transfer user account from remote cPanel server
      description: >-
        Transfer user account from remote Plesk server to Enhance server.

        It's an async endpoint. To get transfer result, you have to call
        getImportMigration.
      operationId: transferPleskDomain
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferPleskDomainReqBody"
      responses:
        "201":
          description: Upload created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/import/server/{server_id}/account/{user_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ServerId"
      - $ref: "#/components/parameters/RemoteServerUserId"
    post:
      tags:
        - importers
      summary: Transfer user account from remote cPanel server
      description: >-
        Transfer user account from remote cPanel server to Enhance server.

        It's an async endpoint. To get transfer result, you have to call
        getImportMigration.
      operationId: transferCPanelUserAccount
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferUserAccountReqBody"
      responses:
        "201":
          description: Upload created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /orgs/{org_id}/import/server/{server_id}/settings:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ServerId"
    get:
      tags:
        - importers
      summary: Get settings for the server import
      description: >-
        Get settings for the server import.

        Note: returned data does not contain ssh private key or any passwords/tokens.
      operationId: getImportServerSettings
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportServerSettings"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    patch:
      tags:
        - importers
      summary: Update settings for the server import
      description: >-
        Update settings for the server import.
      operationId: updateImportServerSettings
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateImportServerSettings"
      responses:
        "200":
          description: Query successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - importers
      summary: Delete settings for the server import
      description: >-
        Delete settings for the server import.
      operationId: deleteImportServerSettings
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Query successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/orgs/{org_id}/import/{import_migration_id}/log:
    get:
      tags:
        - importers
      summary: Get the log for an import migration
      description: >-
        Fetches the import migration log for a single import migration.
      operationId: getImportMigrationLog
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/ImportMigrationdId"
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportMigrationLog"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/orgs/{org_id}/import/{import_migration_id}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ImportMigrationdId"
    get:
      tags:
        - importers
      summary: Fetches single migration details
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getImportMigration
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportMigrationEntry"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    delete:
      tags:
        - importers
      summary: Delete single migration
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteImportMigration
      description: >-
        Delete a single migration with the uploaded file.
      responses:
        "204":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - importers
      summary: Create a new import migration.
      description: >-
        Create a new import migration for a given import type.
      operationId: createImportMigration
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImporterMigrationReqBody"
      responses:
        "200":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/orgs/{org_id}/import/{import_migration_id}/resource:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ImportMigrationdId"
    post:
      tags:
        - importers
      summary: Check if all resources from the imported migration could be created.
      description: |
        Check if all resources from the imported migration could be created.

        If all resources could be created, 200 is returned with an empty `ResourceCheckError`.
        However, if any error occurs, 200 is returned with a non-empty `ResourceCheckError`.

        In case of import failure, you can rerun importing by setting forceQueue to true.
        Before doing so, it's required to remove any already imported resources. Otherwise,
        the import will fail.
      operationId: checkImportMigrationResources
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImporterMigrationReqBody"
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceCheckError"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/orgs/{org_id}/import/{import_migration_id}/analyze:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ImportMigrationdId"
    get:
      tags:
        - importers
      summary: Get import migration information
      description: |
        Get analyzed informations about import.

        Information contains details about domains, ftp users, databases,
        crontabs and mailboxes.
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getImportMigrationData
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImporterAnalyzedData"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
    post:
      tags:
        - importers
      summary: Analyze imported migration
      description: |
        Analyze import and store results into database.

        Note: the endpoint returns immediately, and you have to poll status
        via `getImportMigration` endpoint. If you want to see detailed error,
        please call `getImportMigrationLog`.
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: analyzeImportMigration
      responses:
        "200":
          description: Successful
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /v2/orgs/{org_id}/import/upload/{import_migration_kind}:
    parameters:
      - $ref: "#/components/parameters/OrgId"
      - $ref: "#/components/parameters/ImportMigrationKind"
    post:
      tags:
        - importers
      summary: Upload file for analyzing and processing.
      description: |
        Uploads an import file. File must be in `tar.gz` format, and only cPanel
        and Plesk uploads are allowed.

        The max allowed size is 100 GB.
      operationId: uploadImportMigration
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                backup:
                  type: string
                  format: binary
      responses:
        "201":
          description: Upload created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/orgs/{org_id}/import:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - importers
      summary: List all import migrations
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getImportMigrations
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportMigrationFullListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/import/scan:
    get:
      tags:
        - importers
      summary: Scan for manually uploaded cPanel backups.
      description: |
        Will scan /var/local/enhance/orchd/importer for files matching
        cpmove*.tar.gz or backup*.tar.gz and will add them to the importer
        database for analysis.  An array of migration IDs will be returned.
        Master organisation only.
      operationId: scanImportMigrations
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "201":
          description: Migrations found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /v2/orgs/{org_id}/customers/logins:
    parameters:
      - $ref: "#/components/parameters/OrgId"
    get:
      tags:
        - logins
      summary: List customer logins for org
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getCustomerLogins
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - name: sortBy
          in: query
          description: >-
            The field by which to sort.
          required: false
          schema:
            type: string
            enum: [email, name, registrationDate]
      responses:
        "200":
          description: Logins successfully queried
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginsListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /v2/logins/{login_id}/password:
    parameters:
      - $ref: "#/components/parameters/LoginId"
    put:
      tags:
        - logins
      summary: Set password for login
      description: >-
        This operation allows admins to reset the password for a login.
      operationId: setCustomerLoginPassword
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: The new unhashed password to set for the login
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPassword"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
  /logins/ui-preferences:
    post:
      tags:
        - logins
      summary: Set new UI prefereces for login
      description: >-
        The operation allows users to set a new UI prefereces.
      operationId: setUiPreferences
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUiPreferences"
      responses:
        "201":
          description: Created
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
        "404":
          description: Not found
        "409":
          description: Already exists
    get:
      tags:
        - logins
      summary: Get UI prefereces for login
      description: >-
        The operation allows users to get UI prefereces.
      operationId: getUiPreferences
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiPreferences"
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "404":
          description: Not found
        "403":
          description: Insufficient privileges
    patch:
      tags:
        - logins
      summary: Update UI prefereces for login
      description: >-
        The operation allows users to update UI prefereces.
      operationId: updateUiPreferences
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUiPreferences"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "401":
          description: Invalid session
        "404":
          description: Not found
        "403":
          description: Insufficient privileges
  ###############################################################################
  # -- MO DNS
  ###############################################################################

  /dns/third-party-providers:
    get:
      tags:
        - dns
      summary: Lists all third party providers.
      description: >-
        This operation can only be done by an MO admin.

        Third party providers are notified about changes to dns zones within
        Enhance. This endpoint lists all registered URLs which listen to these
        changes.
      operationId: getDnsThirdPartyProviders
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DnsThirdPartyProvider"
        "403":
          description: Insufficient privileges
    post:
      tags:
        - dns
      summary: Create new third party provider.
      description: >-
        This operation can only be done by an MO admin.

        Third party providers are notified about changes to dns zones within
        Enhance. This endpoint creates a new provider which is going to be
        notified on provided URL about dns updates.

        Please not that after adding a new provider using this endpoint, the
        provider will initially receive a request to delete all its current
        data and then Enhance will send a request with all existing dns zones.
      operationId: createDnsThirdPartyProvider
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: >-
          Url where the updates are sent and map of header names to their
          values.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDnsThirdPartyProvider"
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
  /dns/third-party-providers/{provider_id}:
    parameters:
      - name: provider_id
        in: path
        description: >-
          The id of the third party provider which can be obtained by querying
          the GET /dns/third-party-providers endpoint.
        required: true
        schema:
          type: integer
    delete:
      tags:
        - dns
      summary: Deletes a third party dns provider.
      description: >-
        This operation can only be done by an MO admin.

        Third party providers are notified about changes to dns zones within
        Enhance. This endpoint removes an existing provider. After this endpoint
        resolves, no new dns zones are going to be replicated to the provider.
      operationId: deleteDnsThirdPartyProvider
      security:
        - sessionCookie: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful
        "400":
          description: Invalid input
        "403":
          description: Insufficient privileges
        "404":
          description: Not found

  ###############################################################################
  # -------------------------- Server Role Migrations ---------------------------
  ###############################################################################

  /migrations:
    get:
      tags:
        - migrations
      summary: Get website role migrations
      description: >-
        Lists all server migrations, whether pending, in progress, failed or
        completed.
      operationId: getMigrations
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - name: sortBy
          in: query
          description: >-
            The field by which to sort.
          required: false
          schema:
            type: string
            enum: [websitePrimaryDomain, websiteId, createdAt, lastUpdated]
        - $ref: "#/components/parameters/SearchDomain"
        - $ref: "#/components/parameters/FilterMigrationStatus"
        - name: sessionId
          in: query
          description: >-
            Filter for a specific migration session.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationsListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      deprecated: true
      tags:
        - migrations
      summary: Create website role migration
      description: >-
        Create a new role website migration from one server to another.
        Deprecated in favor of createMigrationSession.
      operationId: createMigration
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Migration details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMigrationDetails"
      responses:
        "201":
          description: Migration created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewResourceUuid"
        "400":
          description: Invalid parameters
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /migrations/{migrationId}:
    get:
      tags:
        - migrations
      summary: Get a single migration
      description: >-
        Fetches the details of a single server migration.
      operationId: getMigration
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MigrationId"
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationDetails"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /migrations/{migrationId}/log:
    get:
      tags:
        - migrations
      summary: Get the log for a migration
      description: >-
        Fetches the migration log for a single server migration.
      operationId: getMigrationLog
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MigrationId"
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MigrationLog"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /migrations/sessions:
    get:
      tags:
        - migrations
      summary: Get website role migration sessions
      description: >-
        Migration sessions group server migrations together under one id.
        This endpoint lists sessions, when were they created and when was any
        migration in the session last updated.

        If searching by domain, the resulting migrationCount is the number of
        migrations in the session that match the search criteria.

        If searching with createdBy, you can search by the email of the user
        who created the session. If the session was created with an API key,
        createdBy will be set to "via API".
        Legacy migrations created with deprecated "createMigration" endpoint
        are assigned under session that has createdBy set to "legacy migrations"
      operationId: getMigrationSessions
      security:
        - sessionCookie: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - name: sortBy
          in: query
          description: >-
            The field by which to sort.
          required: false
          schema:
            type: string
            enum: [createdAt, updatedAt]
        - $ref: "#/components/parameters/CreatedBy"
        - $ref: "#/components/parameters/SearchDomain"
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationSessionsListing"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      tags:
        - migrations
      summary: Create bulk website role migrations
      description: >-
        Create many new role website migration from one server to another.
        The migrations are grouped with a session id.
        If any migration fails to schedule, 206 is returned.
        If all migrations fail to schedule, 400 is returned.
        See the body for error messages in both cases.
      operationId: createMigrationSession
      security:
        - sessionCookie: []
        - bearerAuth: []
      requestBody:
        description: Migrations details.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/NewMigrationDetails"
      responses:
        "201":
          description: All migrations created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationSessionCreationOk"
        "206":
          description: Some migrations failed to create, see body for details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationSessionCreationOk"
        "400":
          description: All migrations failed to create, see body for details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationSessionCreationError"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  ###############################################################################
  # ----------------------- Nginx settings per-website -------------------------#
  ###############################################################################

  /v2/domains/{domain_id}/nginx_fastcgi:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - websites
      summary: Get status of Nginx FastCGI enablement
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getDomainNginxFastCgi
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: boolean
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    put:
      tags:
        - websites
      summary: Set Nginx FastCGI enablement
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setDomainNginxFastCgi
      requestBody:
        description: Boolean value, set true to enable and false to disable FastCGI cache.
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: FastCGI enablement updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    delete:
      tags:
        - websites
      summary: Clear FastCGI cache for domain
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: clearDomainNginxFastCgi
      responses:
        "200":
          description: FastCGI cache cleared successfully
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/domains/{domain_id}/nginx_fastcgi_excluded_paths:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - websites
      summary: Get Nginx FastCGI excluded paths
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getDomainNginxFastCgiExcludedPaths
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      tags:
        - websites
      summary: Add Nginx FastCGI excluded path
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: addDomainNginxFastCgiExcludedPath
      requestBody:
        description: Exclude the following path from nginx fastcgi cache.
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: FastCGI excluded path added
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    delete:
      parameters:
        - in: query
          name: path
          required: true
          schema:
            type: string
      tags:
        - websites
      summary: Delete Nginx FastCGI excluded path
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteDomainNginxFastCgiExcludedPath
      responses:
        "200":
          description: FastCGI excluded path deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/domains/{domain_id}/webserver_rewrites:
    parameters:
      - $ref: "#/components/parameters/DomainId"
    get:
      tags:
        - websites
      summary: Get web server rewrites for specified domain
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getDomainWebserverRewrites
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebServerRewrite"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    put:
      tags:
        - websites
      summary: Set web server rewrite to file
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setDomainWebserverRewrite
      requestBody:
        description: Rewrite a path to a file
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebServerRewrite"
      responses:
        "200":
          description: Rewrite added
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    delete:
      parameters:
        - in: query
          name: path
          required: true
          schema:
            type: string
      tags:
        - websites
      summary: Delete web server rewrite
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: deleteDomainWebserverRewrite
      responses:
        "200":
          description: Rewrite deleted
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/websites/{website_id}/webserver_kind:
    parameters:
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get web server kind for a given website
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getWebsiteWebserverKind
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebserverKind"
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/websites/{website_id}/ioncube:
    parameters:
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get ioncube status for an existing website
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getWebsiteIoncubeStatus
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: boolean
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    put:
      tags:
        - websites
      summary: Set ioncube status for an existing website
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setWebsiteIoncubeStatus
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: Status updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/websites/{website_id}/redis:
    parameters:
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get redis state for a website
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getWebsiteRedisState
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: boolean
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    put:
      tags:
        - websites
      summary: Set Redis state for an existing website
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: setWebsiteRedisState
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: Status updated
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /v2/websites/{website_id}/restart_php:
    parameters:
      - $ref: "#/components/parameters/WebsiteId"
    post:
      tags:
        - websites
      summary: Restart PHP container for a website
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: restartWebsitePhp
      responses:
        "200":
          description: PHP restarted successfully
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
  /websites/{website_id}/php_extensions:
    parameters:
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get enabled PHP extensions
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getWebsiteEnabledPhpExtensions
      responses:
        "200":
          description: Extensions returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    post:
      tags:
        - websites
      summary: Enable a PHP extension
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: enableWebsitePhpExtension
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Extension enabled
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges
    delete:
      tags:
        - websites
      summary: Disable a PHP extension
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: disableWebsitePhpExtension
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Extension disabled
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

  /websites/{website_id}/available_php_extensions:
    parameters:
      - $ref: "#/components/parameters/WebsiteId"
    get:
      tags:
        - websites
      summary: Get available PHP extensions for a website
      security:
        - sessionCookie: []
        - bearerAuth: []
      operationId: getWebsiteAvailablePhpExtensions
      responses:
        "200":
          description: Extensions returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Invalid session
        "403":
          description: Insufficient privileges

###############################################################################
# --------------------------------- Components --------------------------------
###############################################################################

components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name: id0
    bearerAuth:
      type: http
      scheme: bearer

  ###############################################################################
  # -- parameters
  ###############################################################################

  parameters:
    # path parameters
    OrgId:
      name: org_id
      in: path
      description: The id of the organization.
      required: true
      schema:
        type: string
        format: uuid
    CloudFlareTokenId:
      name: cloudflare_key
      in: path
      description: The id of a CloudFlare key to be acted upon.
      required: true
      schema:
        type: string
        format: uuid
    OrgAccessTokenId:
      name: token_id
      in: path
      description: The id of an org access token.
      required: true
      schema:
        type: string
        format: uuid
    CustomerOrgId:
      name: customer_org_id
      in: path
      description: The organization id of the organization's customer.
      required: true
      schema:
        type: string
        format: uuid
    SubscriptionId:
      name: subscription_id
      in: path
      description: The id of the subscription.
      required: true
      schema:
        type: number
    MemberId:
      name: member_id
      in: path
      description: The id of the member.
      required: true
      schema:
        type: string
        format: uuid
    LoginId:
      name: login_id
      in: path
      description: The id of a login.
      required: true
      schema:
        type: string
        format: uuid
    WebsiteId:
      name: website_id
      in: path
      description: The id of the website.
      required: true
      schema:
        type: string
        format: uuid
    CloneId:
      name: clone_id
      in: path
      description: The id of the website push live.
      required: true
      schema:
        type: string
        format: uuid
    SettingKey:
      name: setting_key
      in: path
      description: >-
        A key for updating an existing setting, some known values are
        - hard_delete_after_secs
        - letsencrypt_enabled
        - org_websites_same_server
        - screenshot_driver_pool_size
        - screenshot_interval
        - sged_smtp
        - smtp_smart_host
        - website_backup
        - default_dns_ttl
      required: true
      schema:
        type: string
    DefaultDnsRecordId:
      name: record_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    FtpUserId:
      name: user_id
      in: path
      description: The id of an FTP user.
      required: true
      schema:
        type: string
        format: uuid
    BackupId:
      name: backup_id
      in: path
      description: The id of the backup.
      required: true
      schema:
        type: integer
    BackupStorageKind:
      name: storageKind
      in: query
      description: The storage kind of the requested backup.
      schema:
        $ref: "#/components/schemas/BackupStorageKind"
    EmailId:
      name: email_id
      in: path
      description: The id of the email.
      required: true
      schema:
        type: string
        format: uuid
    RemoteServerUserId:
      name: user_id
      in: path
      description: The ID of the remote cPanel user
      required: true
      schema:
        type: string
    ServerId:
      name: server_id
      in: path
      description: The UUID of the server
      required: true
      schema:
        type: string
        format: uuid
    ServiceId:
      name: service_id
      in: path
      description: The UUID of the service
      required: true
      schema:
        type: string
        format: uuid
    PlanId:
      name: plan_id
      in: path
      description: The id of the plan.
      required: true
      schema:
        type: integer
    DomainId:
      name: domain_id
      in: path
      description: The id of the domain.
      required: true
      schema:
        type: string
        format: uuid
    SslCertId:
      name: cert_id
      in: path
      description: The id of the ssl certificate.
      required: true
      schema:
        type: string
        format: uuid
    SshKeyId:
      name: key_id
      in: path
      description: The unique ID of the SSH key within the same authorized_keys file.
      required: true
      schema:
        type: string
    DbName:
      name: db_name
      in: path
      description: The name of the database.
      required: true
      schema:
        type: string
    DbUserName:
      name: username
      in: path
      description: The user of the database user.
      required: true
      schema:
        type: string
        format: uuid
    Name:
      name: name
      in: path
      description: The name of the resource.
      required: true
      schema:
        type: string
    Domain:
      name: domain
      in: path
      description: The domain name.
      required: true
      schema:
        type: string
    AppId:
      name: app_id
      in: path
      description: The id of the app.
      required: true
      schema:
        type: string
        format: uuid
    WpOption:
      name: wp_option
      in: path
      description: The wordpress config option.
      required: true
      schema:
        type: string
    WpUserId:
      name: user_id
      in: path
      description: The id of the wordpress user.
      required: true
      schema:
        type: integer
    Interface:
      name: interface
      in: path
      description: The name of the network interface
      required: true
      schema:
        type: string
    ServerRole:
      name: role
      in: path
      description: The role of the server.
      required: true
      schema:
        $ref: "#/components/schemas/ServerRole"
    ServiceKind:
      name: service_kind
      in: path
      description: The service type of the role.
      required: true
      schema:
        $ref: "#/components/schemas/ServiceKind"
    SettingKind:
      name: setting_kind
      in: path
      description: The type of setting being applied
      required: true
      schema:
        $ref: "#/components/schemas/SettingKind"
    PluginName:
      name: plugin
      in: path
      description: The name of the wordpress plugin (not file name!).
      required: true
      schema:
        type: string
    ThemeName:
      name: theme
      in: path
      description: The name of the wordpress theme (not file name!).
      required: true
      schema:
        type: string
    # query parameters
    ForceSsl:
      name: forceSsl
      in: query
      description: Forced redirect to SSL for the given domain
      schema:
        type: boolean
    ResolveDepth:
      name: resolveDepth
      in: query
      description: >-
        DNS query resolve depth, defaults to `short` if not provided.
        `short` -> takes the shortest path to resolve domain IP.
        `detailed` -> queries and returns output from all found Authoritative name servers.
        `queryAllTldNs` -> queries and returns results from all TLD name servers (very expensive).
      schema:
        type: string
        enum: [short, detailed, queryAllTldNs]
    MetricsRangeStart:
      name: start
      in: query
      description: Start datetime UTC.
      schema:
        type: string
        format: date-time
    MetricsRangeEnd:
      name: end
      in: query
      description: End datetime UTC.
      schema:
        type: string
        format: date-time
    MetricsGranularity:
      name: granularity
      in: query
      description: Takes one of `hour`, `day`, defaults to `day`
      schema:
        type: string
        enum: [hour, day]
    Force:
      name: force
      in: query
      required: false
      schema:
        type: boolean
        default: false
    CacheControl:
      name: refreshCache
      in: query
      description: If set to true, it will bypass internal caching.
      required: false
      schema:
        type: boolean
    RegistrationKey:
      name: key
      in: query
      description: The secret registration key
      required: true
      schema:
        type: string
        format: uuid
    PwRecoverySecret:
      name: secret
      in: query
      description: The secret key for the password recovery.
      required: true
      schema:
        type: string
        format: uuid
    RealmId:
      name: realmId
      in: query
      required: false
      description: >-
        The id of the realm to query. Realm ids map to org ids.
      schema:
        type: string
        format: uuid
    BackupBeforeOperation:
      name: backupBeforeOperation
      in: query
      required: false
      description: >-
        Whether a backup should be ran before the endpoint operation is executed.
      schema:
        type: boolean

    # pagination
    Offset:
      name: offset
      in: query
      description: The offset from which to return items.
      required: false
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: The maximum number of items to return.
      required: false
      schema:
        type: integer
    SortOrder:
      name: sortOrder
      in: query
      description: >-
        The direction in which to sort. Possible values are 'asc' and
        'desc', defaulting to 'asc'.
      required: false
      schema:
        type: string
        enum: [asc, desc]
    Status:
      name: status
      in: query
      description: Filters the customers list by its status.
      required: false
      schema:
        type: string
        enum: [active, suspended, deleted]
    FilterMigrationStatus:
      name: migrationStatus
      in: query
      description: >-
        Filter by a particular migration status
      required: false
      schema:
        $ref: "#/components/schemas/MigrationStatus"
    NewWebsiteKind:
      name: kind
      in: query
      description: >-
        The kind of a *special* website that needs to be created.
        Whether this website is to be a *control panel* website or a
        *phpMyAdmin* website.
        Note: in order to create a new *phpMyAdmin* website the control
        panel website needs to be created first, since the new phpMyAdmin
        website will be under the control panel domain.
      required: false
      schema:
        $ref: "#/components/schemas/WebsiteKind"
    Search:
      name: search
      in: query
      description:
        Limit the result set to the resources whose names, partially and
        case insensitively, match the specified search term.

        E.g. for websites, this is their domain or tag, for databases the
        database name, for emails the email address or mailbox name, etc.

        A website will also be returned if the search term exactly matches the
        website's uuid.
      required: false
      schema:
        type: string
    SearchDomain:
      name: searchDomain
      in: query
      description: Look for a specific domain in the result set.
      required: false
      schema:
        type: string
    CreatedBy:
      name: createdBy
      in: query
      description: Look for a specific session creator in the result set.
      required: false
      schema:
        type: string
    Recursive:
      name: recursive
      in: query
      description: >-
        If set to true, the endpoint will return resources in some hierarchy
        recursively, that is, several or all levels of the hierarchy, depending
        on whether `maxDepth` is set.

        E.g. for customers this means direct and indirect customers are
        returned. For websites, this returns websites of all direct and indirect
        customers.
      required: false
      schema:
        type: boolean
    Recursion:
      name: recursion
      in: query
      description: >-
        If set to directCustomers then websites belonging to direct customers of
        the orgId will be returned.  If set to infinite then websites belonging
        to customers of customers (and so on) will be returned.  If unset then
        no recursion will be performed.
      required: false
      schema:
        $ref: "#/components/schemas/Recursion"
    MaxDepth:
      name: maxDepth
      in: query
      description: >-
        If recursive is set to true, this can be specified to limit the
        recursion depth. By default there is no recursion bound.
      required: false
      schema:
        type: integer
    CreatedAfter:
      name: createdAfter
      in: query
      description: >-
        Only return resources which have been created after provided date.
      required: false
      schema:
        type: string
        format: date
    CreatedBefore:
      name: createdBefore
      in: query
      description: >-
        Only return resources which have been created earlier than provided date.
      required: false
      schema:
        type: string
        format: date
    Flush:
      name: flush
      in: query
      description: >-
        If true, then we do extra job of flushing cache in relevant places
        before gathering logs. This makes the operation more expensive and only
        makes sense using if latest logs are necessary. If false, logs newer
        than a few minutes may not be in the result.
      required: false
      schema:
        type: boolean
    ResourcesUnderPlanId:
      name: planId
      in: query
      description: >-
        Limit the result set to resources under subscriptions to the plan.
      required: false
      schema:
        type: integer
    ResourcesUnderSubscriptionId:
      name: subscriptionId
      in: query
      description: Limit the result set to resources under subscription.
      required: false
      schema:
        type: integer
    TimeInterval:
      name: timeInterval
      in: query
      schema:
        type: string
        enum: [hour, day, month]
    ActivityKindsFilter:
      name: activityKinds
      in: query
      description: >-
        Select only activities matching the given kinds.
        If not provided or provided empty array, all kinds are selected as it
        makes no sense for an activity to not have a kind.
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ActivityKind"
    ActivityEntityIdsFilterAny:
      name: anyEntityId
      in: query
      description: >-
        Filter activities maching any of the provided uuids.
        Since an activity can have 0 or more entities, providing an empty array
        is not the same as not providing this parameter.
        An empty array will match activities with 0 entities, while not
        providing this parameter will ignore this filter.
      required: false
      schema:
        type: array
        items:
          type: string
          format: uuid
    ActivityEntityKind:
      name: entityKind
      in: query
      description: >-
        Activities which contain the given entity kind either as object or
        context entity.
      schema:
        type: string
        enum: [website, login, org, domain]

    # header parameters
    Authorization:
      in: header
      name: Authorization
      schema:
        type: string
      required: true
    Address:
      in: header
      name: Address
      schema:
        type: string
      required: true
    Password:
      in: header
      name: Password
      schema:
        type: string
      required: true
    MigrationId:
      name: migrationId
      in: path
      description: The ID of the migration being acted upon.
      required: true
      schema:
        type: string
        format: uuid
    ImportMigrationdId:
      name: import_migration_id
      in: path
      description: The ID of the import migration being acted upon.
      required: true
      schema:
        type: string
        format: uuid
    ImportMigrationKind:
      name: import_migration_kind
      in: path
      description: The type of migration file being uploaded.
      required: true
      schema:
        type: string
        enum: [cpanel, plesk]
    ShouldRedirect:
      name: shouldRedirect
      in: query
      description: If set to true, the endpoint will send a 307 redirect to the SSO URL.
      schema:
        type: boolean

  ###############################################################################
  # -- schemas
  ###############################################################################

  schemas:
    ImportKind:
      type: string
      enum: [cPanel, plesk, pleskStreaming]
    ServerMigrationSettingsAuthType:
      type: string
      # FIXME: remove whmToken, cpanelToken
      enum: [whmToken, cpanelToken, basic]
    WebsiteCloneFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WebsiteCloneResponse"
    WebsiteCloneLogResponse:
      type: array
      items:
        $ref: "#/components/schemas/WebsiteCloneLogEntry"
    WebsiteCloneLogEntry:
      type: object
      required:
        - createdAt
        - message
        - percentageComplete
      properties:
        createdAt:
          type: string
          format: date-time
        message:
          type: string
        percentageComplete:
          type: number
    WebsiteCloneNewWebsite:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          description: >-
            The domain of the new website.
        subscriptionId:
          type: integer
        appServerId:
          type: string
          format: uuid
        backupServerId:
          type: string
          format: uuid
        dbServerId:
          type: string
          format: uuid
        emailServerId:
          type: string
          format: uuid
        serverGroupId:
          type: string
          format: uuid
        phpVersion:
          $ref: "#/components/schemas/PhpVersion"
        kind:
          $ref: "#/components/schemas/WebsiteKind"
    WebsiteCloneRequest:
      type: object
      required:
        - sourceWebsiteId
        - excludePaths
        - deleteFilesFromDestination
        - syncPhpVersion
      properties:
        runWpSearchReplace:
          type: boolean
        sourceWebsiteId:
          type: string
          format: uuid
        destWebsiteId:
          type: string
          format: uuid
        excludePaths:
          type: array
          items:
            type: string
        includeDatabases:
          type: array
          items:
            type: string
        includeDatabaseUsers:
          type: array
          items:
            type: string
        deleteFilesFromDestination:
          type: boolean
        syncPhpVersion:
          type: boolean
        newWebsite:
          $ref: "#/components/schemas/WebsiteCloneNewWebsite"
    WebsiteCloneEnumStatus:
      type: string
      enum: ["queued", "inProgress", "failed", "complete"]
    WebsiteCloneResponse:
      type: object
      required:
        - id
        - sourceWebsiteId
        - excludePaths
        - includeDatabases
        - includeDatabaseUsers
        - deleteFilesFromDestination
        - status
        - syncPhpVersion
      properties:
        id:
          type: string
          format: uuid
        sourceWebsiteId:
          type: string
          format: uuid
        destWebsiteId:
          type: string
          format: uuid
        excludePaths:
          type: array
          items:
            type: string
        includeDatabases:
          type: array
          items:
            type: string
        includeDatabaseUsers:
          type: array
          items:
            type: string
        deleteFilesFromDestination:
          type: boolean
        status:
          $ref: "#/components/schemas/WebsiteCloneEnumStatus"
        syncPhpVersion:
          type: boolean
    ImportServerSettingsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ImportServerSettings"
    ImportServerDomainsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ImportServerDomain"
    ImportServerDomainsListing:
      type: object
      required:
        - items
        - total
      properties:
        total:
          type: integer
        items:
          type: array
          items:
            $ref: "#/components/schemas/ImportServerDomain"
    ImportServerDomain:
      type: object
      required:
        - importServerId
        - domain
        - kind
        - user
        - movable
      properties:
        importServerId:
          type: string
          format: uuid
        domain:
          type: string
        kind:
          $ref: "#/components/schemas/DomainMappingKind"
        user:
          type: string
        movable:
          type: boolean
    UpdateImportServerSettings:
      type: object
      properties:
        hostname:
          type: string
        friendlyName:
          type: string
        sshUser:
          type: string
        sshPublicKey:
          type: string
        sshPrivateKey:
          type: string
        authKind:
          $ref: "#/components/schemas/ServerMigrationSettingsAuthType"
        authUser:
          type: string
        sshPort:
          type: number
        apiPort:
          type: number
        allowPartialSync:
          type: boolean
        asUserRoot:
          type: boolean
    ImportServerSettings:
      type: object
      required:
        - id
        - hostname
        - friendlyName
        - sshUser
        - sshPublicKey
        - importType
        - authKind
        - authUser
        - apiPort
        - sshPort
        - allowPartialSync
        - asUserRoot
      properties:
        id:
          type: string
        hostname:
          type: string
        friendlyName:
          type: string
        sshUser:
          type: string
        sshPublicKey:
          type: string
        importType:
          $ref: "#/components/schemas/ImportKind"
        authKind:
          $ref: "#/components/schemas/ServerMigrationSettingsAuthType"
        authUser:
          type: string
        sshPort:
          type: number
        apiPort:
          type: number
        allowPartialSync:
          type: boolean
        asUserRoot:
          type: boolean
    NewImportServerSettings:
      type: object
      required:
        - hostname
        - friendlyName
        - sshUser
        - sshPort
        - importType
        - authKind
        - authUser
        - authPass
        - apiPort
      properties:
        sshPrivateKey:
          type: string
        sshPublicKey:
          type: string
        allowPartialSync:
          type: boolean
        asUserRoot:
          type: boolean
        hostname:
          type: string
        friendlyName:
          type: string
        sshUser:
          type: string
        importType:
          $ref: "#/components/schemas/ImportKind"
        authKind:
          $ref: "#/components/schemas/ServerMigrationSettingsAuthType"
        authUser:
          type: string
        authPass:
          type: string
        sshPort:
          type: number
        apiPort:
          type: number
    ScreenshotConfigUpdate:
      type: object
      properties:
        enable:
          type: boolean
        interval:
          type: int
          minimum: 60
    ScreenshotConfig:
      type: object
      required:
        - isEnabled
      properties:
        isEnabled:
          type: boolean
        interval:
          type: int
    ModSecStatus:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
    MaintenanceMode:
      type: string
      enum: [activate, deactivate]
    MaintenanceModeStatus:
      type: string
      enum: [active, deactivated]
    VhostWebserverKind:
      type: string
      enum:
        - apache
        - nginx
    Vhost:
      type: object
      required:
        - contents
        - webserver
      properties:
        contents:
          type: string
        webserver:
          $ref: "#/components/schemas/VhostWebserverKind"
    OwaspVersion:
      type: object
      required:
        - current
        - available
      properties:
        current:
          type: string
        available:
          type: string
    BackupStorageKind:
      type: string
      enum:
        - enhance
        - s3
    WebServerRewrite:
      type: object
      required:
        - path
        - destinationFile
      properties:
        path:
          type: string
        destinationFile:
          type: string
    UpdateBackupRemoteStorageS3:
      type: object
      properties:
        region:
          type: string
        endpoint:
          type: string
        bucket:
          type: string
        accessKeyId:
          type: string
        accessKeySecret:
          type: string
    CreateBackupRemoteStorageS3:
      type: object
      required:
        - purpose
        - region
        - endpoint
        - bucket
        - accessKeyId
        - accessKeySecret
        - prefix
      properties:
        purpose:
          $ref: "#/components/schemas/RemoteStoragePurpose"
        region:
          type: string
        endpoint:
          type: string
        bucket:
          type: string
        accessKeyId:
          type: string
        accessKeySecret:
          type: string
        prefix:
          type: string
    BackupRemoteStorageS3:
      type: object
      required:
        - purpose
        - region
        - endpoint
        - bucket
        - accessKeyId
        - prefix
      properties:
        purpose:
          $ref: "#/components/schemas/RemoteStoragePurpose"
        region:
          type: string
        endpoint:
          type: string
        bucket:
          type: string
        accessKeyId:
          type: string
        prefix:
          type: string
    RemoteStoragePurpose:
      type: string
      enum:
        - backup
    ResourceCheckConflict:
      type: object
      required:
        - kind
        - id
        - name
      properties:
        kind:
          $ref: "#/components/schemas/ResourceCheckConflictKind"
        id:
          type: string
        name:
          type: string
    ResourceCheckConflictKind:
      type: string
      enum:
        - mysqlUser
        - mysqlDb
        - ftpUser
        - mailboxForwarder
        - mailbox
        - domain
    ResourceCheckError:
      type: object
      properties:
        conflicts:
          type: array
          items:
            $ref: "#/components/schemas/ResourceCheckConflict"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/ResourceCheckManagerError"
    ResourceCheckManagerError:
      type: object
      required:
        - kind
        - resourceName
        - total
        - usage
        - requested
      properties:
        kind:
          $ref: "#/components/schemas/ResourceCheckManagerErrorKind"
        resourceName:
          $ref: "#/components/schemas/ResourceName"
        total:
          type: integer
        usage:
          type: integer
        requested:
          type: integer
    ResourceCheckManagerErrorKind:
      type: string
      enum:
        - nonExistentResource
        - resourceOutOfQuota
    TransferUserAccountReqBody:
      type: object
      properties:
        subscriptionId:
          type: integer
        asUserRoot:
          type: boolean
        allowPartialSync:
          type: boolean
        appServerId:
          type: string
          format: uuid
        backupServerId:
          type: string
          format: uuid
        dbServerId:
          type: string
          format: uuid
        emailServerId:
          type: string
          format: uuid
    TransferPleskDomainReqBody:
      allOf:
        - $ref: "#/components/schemas/TransferUserAccountReqBody"
        - type: object
          required:
            - domain
          properties:
            domain:
              type: string
    ImporterMigrationReqBody:
      type: object
      properties:
        subscriptionId:
          type: integer
        forceQueue:
          type: boolean
        appServerId:
          type: string
          format: uuid
        backupServerId:
          type: string
          format: uuid
        dbServerId:
          type: string
          format: uuid
        emailServerId:
          type: string
          format: uuid
    ImporterAnalyzedData:
      type: object
      required:
        - domains
      properties:
        domains:
          type: array
          items:
            type: object
            required: [domainName, domainKind]
            properties:
              domainName:
                type: string
              domainKind:
                type: string
              phpVersion:
                type: string
              documentRoot:
                type: string
        mysqlDatabases:
          type: array
          items:
            type: object
            required: [dbName, sqlInitPath]
            properties:
              dbName:
                type: string
              sqlInitPath:
                type: string
        mysqlUsers:
          type: array
          items:
            type: object
            required: [username, authPlugin]
            properties:
              username:
                type: string
              authPlugin:
                type: string
        mysqlGrants:
          type: array
          items:
            type: object
            required: [username, dbName, tableName]
            properties:
              dbName:
                type: string
              username:
                type: string
              tableName:
                type: string
              privilege:
                type: array
                items:
                  type: string
        crontabs:
          type: array
          items:
            type: object
            required: [username, crontab]
            properties:
              username:
                type: string
              crontab:
                type: string
        ftps:
          type: array
          items:
            type: object
            required: [username, homedir]
            properties:
              username:
                type: string
              homedir:
                type: string
        mailboxes:
          type: array
          items:
            type: object
            required: [username, domain, hasMailbox, isSuspended]
            properties:
              username:
                type: string
              domain:
                type: string
              hasMailbox:
                type: boolean
              isSuspended:
                type: boolean
              forwarders:
                type: array
                items:
                  type: string
              quota:
                type: number
    CloudFlareApiKey:
      type: object
      required:
        - id
        - token
        - updatedAt
        - friendlyName
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        updatedAt:
          type: string
          format: date
        friendlyName:
          type: string
        lastSync:
          type: string
          format: date
        lastMessage:
          type: string
        domains:
          type: array
          items:
            type: string
    CloudFlareNameServers:
      type: object
      required:
        - nameServers
        - status
      properties:
        nameServers:
          format: array
          items:
            type: string
        status:
          format: string
          enum: ["active", "pending"]
    NewCloudFlareToken:
      type: object
      required:
        - token
        - friendlyName
      properties:
        token:
          format: string
        friendlyName:
          format: date
    UpdateCloudFlareApiKey:
      type: object
      properties:
        token:
          type: string
        friendlyName:
          type: string
    MigrationStatus:
      type: string
      enum: ["queued", "inProgress", "failed", "complete"]
    DemoMode:
      description: >-
        Demo mode is a special mode that allows users to try out the
        application without having to sign up.
      type: object
      required:
        - status
      properties:
        status:
          type: boolean
    LicenceInfo:
      description: Enhance Licence information with its status and key (if set)
      type: object
      required:
        - status
      properties:
        key:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/LicenceStatus"
    LicenceStatus:
      description: Enhance Licence status
      type: string
      enum: ["active", "cancelled", "suspended", "trial", "unpaid", "unknown"]
    NewMigrationDetails:
      type: object
      required:
        - websiteId
        - destServerId
        - serverRole
      properties:
        websiteId:
          type: string
          format: uuid
        destServerId:
          type: string
          format: uuid
        serverRole:
          $ref: "#/components/schemas/ServerRole"
    MigrationDetails:
      type: object
      required:
        - id
        - websiteId
        - sourceServerId
        - destServerId
        - destServerName
        - serverRole
        - migrationStatus
        - createdAt
        - lastUpdated
        - websitePrimaryDomain
        - percentageComplete
        - sessionId
      properties:
        id:
          type: string
          format: uuid
        websiteId:
          type: string
          format: uuid
        sourceServerId:
          type: string
          format: uuid
        destServerId:
          type: string
          format: uuid
        destServerName:
          type: string
        serverRole:
          $ref: "#/components/schemas/ServerRole"
        migrationStatus:
          $ref: "#/components/schemas/MigrationStatus"
        createdAt:
          type: string
        lastUpdated:
          type: string
        websitePrimaryDomain:
          type: string
        percentageComplete:
          type: integer
        sessionId:
          type: string
          format: uuid
    MigrationsListing:
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MigrationDetails"
        total:
          type: integer
    MigrationLog:
      type: object
      required:
        - id
        - createdAt
        - migrationId
        - logData
      properties:
        id:
          type: integer
        createdAt:
          type: string
        migrationId:
          type: string
          format: uuid
        logData:
          type: string
    ImportMigrationLog:
      type: array
      items:
        $ref: "#/components/schemas/ImportMigrationLogEntry"
    ImportMigrationLogEntry:
      type: object
      required:
        - id
        - createdAt
        - migrationId
        - logData
        - percentageComplete
        - level
        - action
        - kind
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
        migrationId:
          type: string
          format: uuid
        logData:
          type: string
        percentageComplete:
          type: integer
        level:
          $ref: "#/components/schemas/LogLevel"
        action:
          $ref: "#/components/schemas/LogAction"
        kind:
          $ref: "#/components/schemas/LogKind"
    MigrationSessionDetails:
      type: object
      required:
        - id
        - createdBy
        - createdAt
        - updatedAt
        - migrationsCount
        - percentageComplete
        - notReadyCount
      properties:
        id:
          type: string
          format: uuid
        createdBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        migrationsCount:
          type: integer
        percentageComplete:
          type: number
        notReadyCount:
          type: integer
    MigrationSessionsListing:
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MigrationSessionDetails"
        total:
          type: integer
    MigrationCreationOutcome:
      type: object
      description: error and migrationId are mutually exclusive
      properties:
        error:
          $ref: "#/components/schemas/HttpError"
        migrationId:
          type: string
          format: uuid
    MigrationSessionCreationOk:
      type: object
      required:
        - sessionId
        - migrations
        - okCount
      properties:
        sessionId:
          type: string
          format: uuid
        okCount:
          type: integer
        migrations:
          type: array
          items:
            $ref: "#/components/schemas/MigrationCreationOutcome"
    MigrationSessionCreationError:
      type: object
      required:
        - migrations
      properties:
        migrations:
          type: array
          items:
            $ref: "#/components/schemas/MigrationCreationOutcome"
    HttpError:
      type: object
      required:
        - code
      properties:
        code:
          type: string
        detail:
          type: string
        message:
          type: string
    LogLevel:
      type: string
      enum:
        - info
        - error
    LogAction:
      type: string
      enum:
        - create
        - update
        - delete
    LogKind:
      type: string
      enum:
        - migration
        - website
        - websitePrimaryDomain
        - websiteSecondyDomain
        - websiteHomeDir
        - mysqlDb
        - mysqlUser
        - mysqlAccessHost
        - mysqlGrant
        - cron
        - ftp
        - ftpUser
        - email
        - emailForwarder
        - emailAccount
        - emailData
        - emailDataTransfer
    DomainMappingKind:
      type: string
      enum: ["primary", "preview", "addon", "alias", "subdomain"]
    WebsiteServerDomains:
      type: object
      required:
        - appServerDomains
      properties:
        appServerDomains:
          type: array
          items:
            type: string
        emailServerDomains:
          type: array
          items:
            type: string
        dbServerDomains:
          type: array
          items:
            type: string
    ServerSniMappingListing:
      type: array
      items:
        $ref: "#/components/schemas/ServerSniMapping"
    ServerSniMapping:
      type: object
      required:
        - serverId
        - certId
        - hostname
      properties:
        serverId:
          type: string
          format: uuid
        certId:
          type: string
          format: uuid
        hostname:
          type: string
    ServerSniMappingBody:
      type: object
      required:
        - certId
        - hostname
      properties:
        certId:
          type: string
          format: uuid
        hostname:
          type: string
    Recursion:
      type: string
      enum: [directCustomers, infinite]
    SetServiceStatus:
      type: object
      required:
        - action
      properties:
        action:
          $ref: "#/components/schemas/ServiceStatusAction"
    ServiceStatusAction:
      type: string
      enum: [gracefulRestart, forceRestart]
    SystemPackageName:
      type: string
      enum: [appcd, git]
    UpgradableSystemPackage:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/SystemPackageName"
        version:
          type: string
    SystemPackage:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/SystemPackageName"
    SetServerStatus:
      type: object
      required:
        - action
      properties:
        action:
          $ref: "#/components/schemas/ServerStatusAction"
    ServerStatusAction:
      type: string
      enum: [gracefulReboot, forceReboot]
    UuidListing:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string
            format: uuid
    InstallCmd:
      type: object
      required:
        - cmd
      properties:
        cmd:
          type: string
    SetupResult:
      type: object
      required:
        - loginId
        - memberId
        - orgId
        - serverId
        - controlPanelWebsiteId
      properties:
        loginId:
          type: string
          format: uuid
        memberId:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
        serverId:
          type: string
          format: uuid
        controlPanelWebsiteId:
          type: string
          format: uuid
    SlaveRegistration:
      type: object
      required:
        - hostname
      properties:
        hostname:
          type: string
          format: hostname
    NewCustomer:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    CustomersListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Org"
        total:
          type: integer
    LoginPolicyBlockedIps:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Blocked"
    LoginPolicyBlockedLogins:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Blocked"
    Blocked:
      type: object
      properties:
        blockedUntil:
          type: integer
        currentFailures:
          type: integer
        allFailures:
          type: integer
    DockerRegistry:
      type: object
      required:
        - url
        - user
        - password
      properties:
        url:
          type: string
        user:
          type: string
        password:
          type: string
    Org:
      type: object
      required:
        - id
        - name
        - status
        - subscriptionsCount
        - websitesCount
        - createdAt
        - locale
      properties:
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
        status:
          $ref: "#/components/schemas/Status"
        suspendedBy:
          type: string
          format: uuid
        owner:
          type: string
        ownerEmail:
          type: string
          format: email
        ownerId:
          type: string
          format: uuid
        ownerLoginId:
          type: string
          format: uuid
        subscriptionsCount:
          type: integer
        websitesCount:
          type: integer
        createdAt:
          type: string
        ownerAvatarPath:
          type: string
          format: path
        locale:
          $ref: "#/components/schemas/CPLocale"
        slackNotificationWebhookUrl:
          type: string
    Status:
      type: string
      enum: [active, deleted]
    SubscriptionDedicatedServers:
      type: object
      properties:
        appServerId:
          type: string
          format: uuid
        backupServerId:
          type: string
          format: uuid
        dbServerId:
          type: string
          format: uuid
        emailServerId:
          type: string
          format: uuid
    SubscriptionDedicatedServersInfo:
      type: object
      properties:
        appServer:
          $ref: "#/components/schemas/SubscriptionDedicatedServer"
        backupServer:
          $ref: "#/components/schemas/SubscriptionDedicatedServer"
        dbServer:
          $ref: "#/components/schemas/SubscriptionDedicatedServer"
        emailServer:
          $ref: "#/components/schemas/SubscriptionDedicatedServer"
    SubscriptionDedicatedServer:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
    NewPlan:
      type: object
      required:
        - name
        - resources
        - allowances
        - selections
      properties:
        name:
          type: string
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        allowances:
          type: array
          items:
            $ref: "#/components/schemas/Allowance"
        selections:
          type: array
          items:
            $ref: "#/components/schemas/Selection"
        serverGroupId:
          type: string
          format: uuid
          deprecated: true
        serverGroupIds:
          type: array
          items:
            type: string
            format: uuid
        allowServerGroupSelection:
          type: boolean
        planType:
          $ref: "#/components/schemas/PlanType"
        cgroupLimits:
          $ref: "#/components/schemas/CgroupLimits"
        fsQuotaLimit:
          $ref: "#/components/schemas/FsQuotaLimit"
        allowedPhpVersions:
          type: array
          items:
            $ref: "#/components/schemas/PhpVersion"
        defaultPhpVersion:
          $ref: "#/components/schemas/PhpVersion"
        redisAllowed:
          type: boolean
        defaultServerGroupId:
          type: string
          format: uuid
          description: >
            If set, servers from this server group are prioritized by placement
            algorithm.
            If no server from the default server group is available, servers
            from other server groups are tried.
            The defaultServerGroupId will be automatically added to
            serverGroupIds if they do not contain it or are not provided.
        preinstallWordpressTheme:
          type: string
          description: :>
            When WordPress is installed on a website under this plan, the chosen
            theme will be preinstalled.
    CgroupLimits:
      type: object
      required:
        - nproc
        - memoryLimit
        - iops
        - ioBandwidth
        - virtualCpus
      properties:
        nproc:
          type: number
          nullable: true
        memoryLimit:
          type: number
          nullable: true
        iops:
          type: number
          nullable: true
        ioBandwidth:
          type: number
          nullable: true
        virtualCpus:
          type: number
          nullable: true
    SetCgroupLimits:
      type: object
      properties:
        nproc:
          type: number
        memoryLimit:
          type: number
        iops:
          type: number
        ioBandwidth:
          type: number
        virtualCpus:
          type: number
    FsQuotaStatus:
      type: string
      enum:
        - disabled
        - enabling
        - enabled
    FsQuotaLimit:
      description: File system quota settings in bytes.
      type: object
      required:
        - totalAvailable
      properties:
        totalAvailable:
          type: number
    FsQuotaInfo:
      description: File system quota info in bytes.
      type: object
      required:
        - totalAvailable
      properties:
        totalAvailable:
          type: number
        used:
          type: number
    Plan:
      description: >-
        A plan (or sometimes referred to as a package) defines a set of resources
        a reseller can offer for customer organizations to subscribe to.
      type: object
      required:
        - id
        - name
        - orgId
        - resources
        - allowances
        - selections
        - subscriptionsCount
        - createdAt
        - planType
        - allowedPhpVersions
        - defaultPhpVersion
        - redisAllowed
      properties:
        id:
          type: integer
        name:
          type: string
        orgId:
          type: string
          format: uuid
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        allowances:
          type: array
          items:
            $ref: "#/components/schemas/Allowance"
        selections:
          type: array
          items:
            $ref: "#/components/schemas/Selection"
        subscriptionsCount:
          type: integer
          description: The number of subscriptions to this plan.
        serverGroupId:
          type: string
          deprecated: true
          description: Use serverGroupIds instead
        serverGroupIds:
          type: array
          items:
            type: string
            format: uuid
        allowServerGroupSelection:
          type: boolean
          description: >
            Whether the customer can select the server group for their websites.
        createdAt:
          type: string
        planType:
          $ref: "#/components/schemas/PlanType"
        cgroupLimits:
          $ref: "#/components/schemas/CgroupLimits"
        fsQuotaLimit:
          $ref: "#/components/schemas/FsQuotaLimit"
        allowedPhpVersions:
          type: array
          items:
            $ref: "#/components/schemas/PhpVersion"
        defaultPhpVersion:
          $ref: "#/components/schemas/PhpVersion"
        redisAllowed:
          type: boolean
        preinstallWordpressTheme:
          type: string
          description: :>
            When WordPress is installed on a website under this plan, the chosen
            theme will be preinstalled.
    UpdatePlan:
      type: object
      properties:
        name:
          type: string
        planType:
          $ref: "#/components/schemas/PlanType"
        cgroupLimits:
          $ref: "#/components/schemas/CgroupLimits"
        fsQuotaLimit:
          $ref: "#/components/schemas/FsQuotaLimit"
        allowedPhpVersions:
          type: array
          items:
            $ref: "#/components/schemas/PhpVersion"
        defaultPhpVersion:
          $ref: "#/components/schemas/PhpVersion"
        redisAllowed:
          type: boolean
        serverGroupIds:
          type: array
          description: >
            If provided as an empty array, removes all server groups from the
            plan.
          items:
            type: string
            format: uuid
        allowServerGroupSelection:
          type: boolean
          description: >
            Whether the customer can select the server group for their websites.
        defaultServerGroupId:
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Unset"
          description: >
            If set, servers from this server group are prioritized by placement
            algorithm.
            If no server from the default server group is available, servers
            from other server groups are tried.
            If both serverGroupIds and defaultServerGroupId is provided,
            defaultServerGroupId will be added to serverGroupIds if not there.
            If only defaultServerGroupId is provided, already existing plan's
            serverGroupIds will be expanded with defaultServerGroupId if
            not there yet.
        preinstallWordpressTheme:
          type: string
          description: :>
            When WordPress is installed on a website under this plan, the chosen
            theme will be preinstalled.
    Resource:
      type: object
      required:
        - name
      description: Defines a resource that the MO or resellers can sell.
      properties:
        name:
          $ref: "#/components/schemas/ResourceName"
        total:
          type: integer
          description: >-
            The total quota of the resource.

            If not set, the resource has unlimited quota. A reseller may only sell
            unlimited quota if the subscription to which itself is subscribed
            has the same resource with unlimited quota.
    ResourceName:
      type: string
      description: >-
        The name of the resource. Must be unique within a plan.

        Note: for arbitrary string casting please use `camelCase` format
      enum:
        - customers
        - diskspace
        - domainAliases
        - forwarders
        - ftpUsers
        - mailboxes
        - mysqlDbs
        - pageViews
        - processes
        - stagingWebsites
        - transfer
        - websites
        - addonDomains
        - subdomains
    Allowance:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    Selection:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string
    PlanType:
      type: string
      enum: [shared, dedicated]
    NewSubscription:
      type: object
      required:
        - planId
      properties:
        planId:
          type: integer
        dedicatedServers:
          $ref: "#/components/schemas/SubscriptionDedicatedServers"
        friendlyName:
          type: string
    Subscription:
      description: >-
        An organization's subscription to a plan. This allows the subscriber to
        use the subscribed to resources up until the quota defined in the plan
        is exhausted. Includes details about the subscription as well as the
        current usage of the resources.
      type: object
      required:
        - id
        - planId
        - planName
        - subscriberId
        - vendorId
        - status
        - resources
        - allowances
        - selections
        - planType
        - allowedPhpVersions
        - defaultPhpVersion
        - redisAllowed
        - friendlyName
      properties:
        id:
          type: integer
        planId:
          type: integer
        planName:
          type: string
        subscriberId:
          type: string
          format: uuid
        vendorId:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/Status"
        suspendedBy:
          type: string
          format: uuid
        resources:
          $ref: "#/components/schemas/UsedResources"
        allowances:
          type: array
          items:
            $ref: "#/components/schemas/Allowance"
        selections:
          type: array
          items:
            $ref: "#/components/schemas/Selection"
        dedicatedServers:
          $ref: "#/components/schemas/SubscriptionDedicatedServersInfo"
        planType:
          $ref: "#/components/schemas/PlanType"
        allowedPhpVersions:
          type: array
          items:
            $ref: "#/components/schemas/PhpVersion"
        defaultPhpVersion:
          $ref: "#/components/schemas/PhpVersion"
        redisAllowed:
          type: boolean
        serverGroups:
          type: array
          description: >-
            If this field is present, the customer is allowed to chose from
            the server groups listed here when creating a website.
          items:
            $ref: "#/components/schemas/ServerGroup"
        preinstallWordpressTheme:
          type: string
          description: :>
            When WordPress is installed on a website under this plan, the chosen
            theme will be preinstalled.
        friendlyName:
          type: string
    UpdateSubscription:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Status"
        isSuspended:
          type: boolean
        planId:
          type: integer
        dedicatedServers:
          $ref: "#/components/schemas/SubscriptionDedicatedServers"
        friendlyName:
          type: string
    UsedResource:
      type: object
      required:
        - name
        - usage
      properties:
        name:
          $ref: "#/components/schemas/ResourceName"
        total:
          type: integer
          description: >-
            The total quota of the resource.

            If not set, the resource has unlimited quota, but the resource usage
            is still tracked.
        usage:
          type: integer
    UsedResources:
      description: >-
        A list of used resources.
      type: array
      items:
        $ref: "#/components/schemas/UsedResource"
    UsedResourcesFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/UsedResource"
    Install:
      type: object
      required:
        - owner
        - locale
      properties:
        owner:
          $ref: "#/components/schemas/LoginInfo"
        orgName:
          type: string
        acceptTerms:
          type: boolean
        locale:
          $ref: "#/components/schemas/CPLocale"
    LoginInfo:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string
    LoginCreds:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        deviceId:
          type: string
    BackupOptions:
      type: object
      properties:
        description:
          type: string
    BackupRestoreOptions:
      type: object
      properties:
        restoreFiles:
          type: boolean
          default: true
          description: >-
            If set to false, the backup restoration will not include
            the website home directory.
        restoreEmails:
          type: array
          items:
            type: string
            description: >-
              Restore the specified mailboxes only.
        restoreAllEmails:
          type: boolean
          description: >-
            Restore all the mailboxes from this backup.  Overrides the `restoreEmails` property.
        restoreDatabases:
          type: array
          items:
            type: string
          description: >-
            The list of databases names that need to be restored. If this list
            is not specified all the databases found in the backup snapshot will
            be restored, otherwise if this list is specified as empty, no
            database will be restored.
    Role:
      description: >-
        The role of the member in the organization.
      type: string
      enum: [Owner, SuperAdmin, Business, SiteAccess, Support, Sysadmin]
    RoleList:
      type: array
      items:
        $ref: "#/components/schemas/Role"
    SiteAccessList:
      description: >-
        This field is only present if member has "SiteAccess" role. In this
        case, the list contains the ids of the websites to which member has
        access.
      type: array
      items:
        type: string
    NewSslCert:
      type: object
      required:
        - key
        - cert
      properties:
        cert:
          type: string
        key:
          type: string
    SslCert:
      type: object
      required:
        - cert
        - pkey
      properties:
        cert:
          type: string
        key:
          type: string
    NewFtpUser:
      type: object
      required:
        - account
        - password
        - homeDir
      properties:
        account:
          type: string
        password:
          type: string
        homeDir:
          type: string
    FtpUser:
      type: object
      required:
        - account
        - homeDir
      properties:
        account:
          type: string
        homeDir:
          description: >-
            Homedir must be a relative path to the website's base dir. Set to
            empty string to use website base dir as FtpUser's home.
          type: string
    FtpUserUpdate:
      type: object
      properties:
        homeDir:
          description: >-
            Homedir must be a relative path to the website's base dir. Set to
            empty string to use website base dir as FtpUser's home.
          type: string
        password:
          type: string
    FtpUsersFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/FtpUser"
    HttpdStatus:
      type: object
      required:
        - rawOutput
      properties:
        rawOutput:
          type: string
    NewMember:
      type: object
      required:
        - loginId
        - roles
      properties:
        loginId:
          type: string
          format: uuid
        roles:
          $ref: "#/components/schemas/RoleList"
    OrgAccessTokens:
      type: array
      items:
        $ref: "#/components/schemas/OrgAccessToken"
    OrgAccessToken:
      type: object
      required:
        - id
        - firstFive
        - roles
      properties:
        id:
          type: string
          format: uuid
        firstFive:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        tokenExpires:
          type: string
        friendlyName:
          type: string
    NewAccessToken:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        tokenExpires:
          type: string
          format: date-time
        friendlyName:
          type: string
    NewAccessTokenResponse:
      type: object
      required:
        - id
        - firstFive
        - unencryptedToken
      properties:
        id:
          type: string
        firstFive:
          type: string
        unencryptedToken:
          type: string
    Member:
      type: object
      required:
        - id
        - loginId
        - isActive
        - email
        - name
        - roles
        - siteAccesses
        - notifications
        - joinedAt
        - colorCode
      properties:
        id:
          type: string
          format: uuid
        loginId:
          type: string
          format: uuid
        isActive:
          type: boolean
        email:
          type: string
          format: email
        name:
          type: string
        roles:
          $ref: "#/components/schemas/RoleList"
        siteAccesses:
          $ref: "#/components/schemas/SiteAccessList"
        notifications:
          type: array
          items:
            type: string
          description: The notifications configured for this member.
        joinedAt:
          type: string
          format: date
        avatarPath:
          type: string
          format: path
        colorCode:
          type: string
    UpdateMember:
      type: object
      properties:
        roles:
          $ref: "#/components/schemas/RoleList"
        siteAccesses:
          $ref: "#/components/schemas/SiteAccessList"
        notifications:
          type: array
          items:
            type: string
    NewWebsite:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          description: >-
            The domain of the new website.
        subscriptionId:
          type: integer
        appServerId:
          type: string
          format: uuid
        backupServerId:
          type: string
          format: uuid
        dbServerId:
          type: string
          format: uuid
        emailServerId:
          type: string
          format: uuid
        serverGroupId:
          type: string
          format: uuid
        phpVersion:
          $ref: "#/components/schemas/PhpVersion"
        # if WordPress is preinstalled as part of the package, override the
        # automatically generated admin login credentials
        wordPressAdminCredentials:
          $ref: "#/components/schemas/AdminCredentials"
    UpdateWebsite:
      type: object
      properties:
        phpVersion:
          description: The PHP version.
          $ref: "#/components/schemas/PhpVersion"
        status:
          $ref: "#/components/schemas/WebsiteStatus"
        isSuspended:
          type: boolean
        tags:
          type: array
          items:
            type: integer
        subscriptionId:
          description: >-
            The website can be moved to another subscription within the
            organization by setting this field.
          oneOf:
            - type: integer
            - $ref: "#/components/schemas/Unset"
        orgId:
          type: string
          format: uuid
    Website:
      type: object
      required:
        - id
        - domain
        - aliases
        - subdomains
        - status
        - colorCode
        - size
        - orgId
        - kind
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        domain:
          $ref: "#/components/schemas/WebsiteDomain"
        aliases:
          type: array
          items:
            $ref: "#/components/schemas/WebsiteDomain"
        subdomains:
          type: array
          items: {}
        subscriptionId:
          type: number
        planId:
          type: number
        plan:
          type: string
        status:
          $ref: "#/components/schemas/WebsiteStatus"
        suspendedBy:
          type: string
          format: uuid
        colorCode:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        size:
          type: integer
        orgId:
          type: string
          format: uuid
        org:
          type: string
        kind:
          $ref: "#/components/schemas/WebsiteKind"
        pendingBackup:
          $ref: "#/components/schemas/BackupAction"
        parent:
          type: string
        parentId:
          type: string
          format: uuid
        appServerId:
          description: >-
            The id of the server on which this website is located.

            This is only returned when websites are queried recursively by an MO
            member, as the MO is in charge of servers and thus this information only
            concerns them.
          type: string
          format: uuid
        backupServerId:
          description: >-
            The id of the server on which the backups of this website are located.

            This is only returned when websites are queried recursively by an MO
            member, as the MO is in charge of servers and thus this information only
            concerns them.
          type: string
          format: uuid
        dbServerId:
          description: >-
            The id of the server on which the databases of this website are located.

            This is only returned when websites are queried recursively by an MO
            member, as the MO is in charge of servers and thus this information only
            concerns them.
          type: string
          format: uuid
        emailServerId:
          description: >-
            The id of the server on which the emails of this website are located.

            This is only returned when websites are queried recursively by an MO
            member, as the MO is in charge of servers and thus this information only
            concerns them.
          type: string
          format: uuid
        unixUser:
          description: >-
            The unix user assigned to this website, used for ssh shells,
            prefixing website databases and databse users, etc.
          type: string
        siteAccessMembers:
          type: array
          items:
            $ref: "#/components/schemas/SiteAccessMember"
        serverIps:
          description: The addresses of the the server on which this website is located.
          type: array
          items:
            $ref: "#/components/schemas/ServerIp"
        backupServerIps:
          description: The addresses of the the server on which this website's backups are located.
          type: array
          items:
            $ref: "#/components/schemas/ServerIp"
        dbServerIps:
          description: The addresses of the the server on which this website's databases are located.
          type: array
          items:
            $ref: "#/components/schemas/ServerIp"
        emailServerIps:
          description: The addresses of the the server on which this website's emails are located.
          type: array
          items:
            $ref: "#/components/schemas/ServerIp"
        filerdAddress:
          description: The path relative to the control panel domain where filerd can be accessed.
          type: string
        phpVersion:
          description: If PHP is enabled, this represents the PHP version installed for the website.
          $ref: "#/components/schemas/PhpVersion"
        createdAt:
          description: The date the site was first added
          type: string
        appServerName:
          type: string
        dbServerName:
          type: string
        emailServerName:
          type: string
        backupServerName:
          type: string
        canUse:
          $ref: "#/components/schemas/CanUse"
        appServerIpv6:
          type: string
          format: ipv6
        dbServerIpv6:
          type: string
          format: ipv6
        emailServerIpv6:
          type: string
          format: ipv6
    WebsiteKind:
      type: string
      enum:
        [normal, controlPanel, phpMyAdmin, roundcube, staging, serverHostname]
      default: normal
    SettingKind:
      type: string
      enum:
        [
          phpIni,
          phpFpm,
          apache,
          postfix,
          sged,
          rspamd,
          dovecot,
          websiteBackup,
          screenshotd,
          hardDeleteGC,
          letsencrypt,
        ]
    PhpVersion:
      type: string
      enum:
        [
          php56,
          php70,
          php71,
          php72,
          php73,
          php74,
          php80,
          php81,
          php82,
          php83,
          php84,
          php52,
          php53,
          php54,
          php55,
        ]
    SiteAccessMember:
      type: object
      required:
        - id
        - name
        - email
        - colorCode
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        avatarPath:
          type: string
        colorCode:
          type: string
    WebsiteDomain:
      type: object
      required:
        - id
        - domain
        - documentRoot
        - kind
        - cloudflareStatus
      properties:
        id:
          type: string
          format: uuid
        domain:
          type: string
        documentRoot:
          type: string
        kind:
          $ref: "#/components/schemas/DomainMappingKind"
        cloudflareStatus:
          $ref: "#/components/schemas/CloudFlareStatus"
    WebsiteStatus:
      type: string
      enum: [active, disabled, deleted]
    EmailStatus:
      type: string
      enum: [active, disabled, deleted, suspended]
    LoginMemberships:
      type: object
      required:
        - memberships
      properties:
        memberships:
          type: array
          items:
            $ref: "#/components/schemas/LoginMembership"
    SessionResult:
      type: object
      required:
        - authMethod
      properties:
        authMethod:
          type: string
          enum: [email, otp]
    LoginMembership:
      type: object
      required:
        - memberId
        - orgId
        - orgName
        - isMasterOrg
        - roles
        - siteAccessCount
      properties:
        memberId:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
        orgName:
          type: string
        isMasterOrg:
          type: boolean
        roles:
          $ref: "#/components/schemas/RoleList"
        siteAccessCount:
          type: number
    NewServerGroup:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    ServerGroup:
      type: object
      required:
        - id
        - name
        - serverCount
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        serverCount:
          type: number
        createdAt:
          type: string
    ServerInfo:
      type: object
      required:
        - id
        - groupId
        - isControlPanel
        - isConfigured
        - friendlyName
        - hostname
        - ips
        - roles
        - createdAt
        - controld
        - isDecommissioned
        - disks
      properties:
        id:
          type: string
          format: uuid
        groupId:
          type: string
          format: uuid
        isControlPanel:
          type: boolean
        isConfigured:
          type: boolean
        friendlyName:
          type: string
        hostname:
          type: string
        ips:
          type: array
          items:
            $ref: "#/components/schemas/ServerIp"
        status:
          $ref: "#/components/schemas/NetworkStatus"
        roles:
          $ref: "#/components/schemas/RolesSummary"
        createdAt:
          type: string
        controldVersion:
          type: string
          format: semver
        dedicatedSubscription:
          $ref: "#/components/schemas/DedicatedSubscriptionInfo"
        isDecommissioned:
          type: boolean
        ipv6Addr:
          type: string
        disks:
          type: array
          items:
            $ref: "#/components/schemas/Disk"
    ServerInfoBrief:
      type: object
      required:
        - id
        - groupId
        - isControlPanel
        - isConfigured
        - friendlyName
        - hostname
        - ips
        - roles
        - createdAt
        - controld
        - isDecommissioned
      properties:
        id:
          type: string
          format: uuid
        groupId:
          type: string
          format: uuid
        isControlPanel:
          type: boolean
        isConfigured:
          type: boolean
        friendlyName:
          type: string
        hostname:
          type: string
        ips:
          type: array
          items:
            $ref: "#/components/schemas/ServerIp"
        roles:
          $ref: "#/components/schemas/RoleInstalledStatusSummary"
        createdAt:
          type: string
        dedicatedSubscription:
          type: number
        isDecommissioned:
          type: boolean
        ipv6Addr:
          type: string
    DedicatedSubscriptionInfo:
      required:
        - subscriptionId
        - customerOrgId
        - customerOrgName
      properties:
        subscriptionId:
          type: number
        customerOrgId:
          type: string
          format: uuid
        customerOrgName:
          type: string
    RoleInstalledStatusSummary:
      type: object
      properties:
        application:
          $ref: "#/components/schemas/RoleInstallationState"
        backup:
          $ref: "#/components/schemas/RoleInstallationState"
        database:
          $ref: "#/components/schemas/RoleInstallationState"
        dns:
          $ref: "#/components/schemas/RoleInstallationState"
        email:
          $ref: "#/components/schemas/RoleInstallationState"
    RoleInstallationState:
      type: string
      enum: [enabled, disabled, notInstalled]
    ServerIp:
      type: object
      required:
        - ip
        - isPrimary
      properties:
        ip:
          type: string
          format: ipv4
        isPrimary:
          type: boolean
    RolesSummary:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/RoleSummary"
        backup:
          $ref: "#/components/schemas/RoleSummary"
        database:
          $ref: "#/components/schemas/RoleSummary"
        application:
          $ref: "#/components/schemas/RoleSummary"
        dns:
          $ref: "#/components/schemas/RoleSummary"
        controlPanel:
          $ref: "#/components/schemas/RoleSummary"
    RoleSummary:
      type: object
      required:
        - state
      properties:
        state:
          $ref: "#/components/schemas/RoleState"
        status:
          $ref: "#/components/schemas/NetworkStatus"
    RoleState:
      type: string
      enum: [enabled, disabled]
    DnsStatus:
      description: >-
        Resolved = domain resolves to our servers.
        ForeignServer = domain resolves but points to somewhere else.
        Failed = DNS query failed for the domain (potentially not configured).
        Unknown = Not queried.
        Error = There was an internal error.
        Mixed = Website's domains resolved with different statuses.
      type: string
      enum: [Resolved, ForeignServer, Failed, Mixed, Unknown, Error]
    DnsQueryOutcome:
      description: >-
        Detailed DNS query outcome, walking from root DNS to all the
        way back to IP addresses for a domain
      type: object
      required:
        - fqdn
        - root
        - tldNsMap
      properties:
        fqdn:
          type: string
          description: Fully qualified domain name
        root:
          description: name and IP of the root server that was queried
          additionalProperties:
            type: string
        tldNsMap:
          type: object
          description: Tree of top level domain name servers
          additionalProperties:
            $ref: "#/components/schemas/TldNs"
    TldNs:
      description: Tree starting from top level DNS and recursively going down to
      type: object
      required:
        - ip
        - authNsMap
      properties:
        ip:
          type: string
        authNsMap:
          type: object
          description: Tree of AuthNs servers
          additionalProperties:
            $ref: "#/components/schemas/AuthNs"
    AuthNs:
      description: >-
        Authoritative Name Server
      type: object
      properties:
        ip:
          type: string
          description: Server IP address
        domainIps:
          description: list of resolved ip addresses for the domain
          type: array
          items:
            type: string
        delegations:
          description: Tree of delegated AuthNs servers
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AuthNs"
    ServerConf:
      type: object
      properties:
        friendlyName:
          type: string
        group:
          type: string
          format: uuid
    ServerStatusUpdate:
      type: object
      properties:
        isDecommissioned:
          type: boolean
    NewInvite:
      type: object
      required:
        - email
        - name
        - roles
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        roles:
          $ref: "#/components/schemas/RoleList"
        siteAccesses:
          type: array
          items:
            type: string
        notifications:
          type: array
          items:
            type: string
        sendEmail:
          description: >-
            Whether to send an email to the invitee.
            Defaults to true if not provided.
          type: boolean
    StagingDomain:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          format: domain
    NewDomain:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          format: domain
    NewMappedDomain:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          format: domain
        documentRoot:
          type: string
        kind:
          $ref: "#/components/schemas/DomainMappingKind"
    DomainMappingUpdate:
      type: object
      properties:
        documentRoot:
          type: string
        kind:
          $ref: "#/components/schemas/DomainMappingKind"
    Domain:
      type: object
      required:
        - id
        - orgId
        - domain
        - dkim
        - spf
        - cloudflareStatus
      properties:
        id:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
        domain:
          type: string
        dkim:
          type: boolean
        spf:
          type: boolean
        cloudflareStatus:
          $ref: "#/components/schemas/CloudFlareStatus"
        cloudflareTokenFriendlyName:
          type: string
    CloudFlareStatus:
      type: string
      enum: ["Connected", "Disconnected", "Error"]
    NewPrimaryDomainMapping:
      type: object
      required:
        - domainId
      properties:
        domainId:
          type: string
          format: uuid
        canonicalRedirect:
          $ref: "#/components/schemas/CanonicalRedirect"
    CanonicalRedirect:
      type: object
      description: >-
        If this object is present, the website's .htaccess will have a
        new set of rules which redirect all secondary domains to this
        primary domain with 301 header.
        If this object is missing, any existing rules will be removed.
      required:
        - useWww
        - useHttps
      properties:
        useWww:
          description: >-
            Whether to put www to the url which is being redirected to. In
            .htaccess syntax: `http://www.example.com/$1`
          type: boolean
        useHttps:
          description: >-
            Whether to put www to the url which is being redirected to. In
            .htaccess syntax: `https://example.com/$1`
          type: boolean
    DomainMapping:
      type: object
      required:
        - domainId
        - websiteId
        - domain
        - documentRoot
        - mappingKind
        - cloudflareStatus
      properties:
        domainId:
          type: string
          format: uuid
        websiteId:
          type: string
          format: uuid
        domain:
          type: string
        mappingKind:
          $ref: "#/components/schemas/DomainMappingKind"
        documentRoot:
          type: string
        cert:
          $ref: "#/components/schemas/DomainSslCert"
        cloudflareStatus:
          $ref: "#/components/schemas/CloudFlareStatus"
        cloudflareFriendlyName:
          type: string
        cloudflareTokenId:
          type: string
          format: uuid
    SshKeyFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SshKey"
    SshKey:
      type: object
      required:
        - id
        - createdAt
        - value
      properties:
        id:
          type: string
          description: The unique ID of the SSH key within the same authorized_keys file.
        createdAt:
          type: string
          format: date-time
          description: The datetime of when this SSH key was created.
        value:
          type: string
          description: The SSH key (without the comment).
        name:
          type: string
          description: The friendly name associated with the key.
    SshKeyUpdate:
      type: object
      properties:
        value:
          type: string
          description: The SSH key in PEM format.
        name:
          type: string
          description: The friendly name associated with the key.
    NewSshKey:
      type: object
      required:
        - value
      properties:
        value:
          type: string
          description: The SSH key in PEM format.
        name:
          type: string
          description: The friendly name associated with the key.
    NewSshKeyId:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: The unique ID of the SSH key within the same authorized_keys file.
    UpdateLogin:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        locale:
          $ref: "#/components/schemas/CPLocale"
        authMethod:
          type: string
          enum: [basic, email, otp]
        currentPassword:
          type: string
    UpdateLoginResult:
      type: object
      properties:
        otpUrl:
          type: string
        verifyPin:
          type: boolean
    Login2FA:
      type: object
      required:
        - authMethod
        - pin
      properties:
        authMethod:
          type: string
          enum: [basic, email, otp]
        pin:
          type: string
        rememberMe:
          type: object
          required:
            - deviceId
            - ttl
          properties:
            deviceId:
              type: string
              description: >-
                The unique ID of the device. It has to be 32 character;
            ttl:
              type: integer
              description: >-
                Defines how many seconds deviceId will be remembered.
                Min 1 hour, max 3 months
    ResendPin:
      type: object
      required:
        - authMethod
      properties:
        authMethod:
          type: string
          enum: [basic, email, otp]
    Login:
      type: object
      required:
        - id
        - name
        - email
        - colorCode
        - registeredAt
        - authMethod
        - locale
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        colorCode:
          type: string
        registeredAt:
          type: string
        avatarPath:
          type: string
          format: path
        passwordLastChangedAt:
          type: string
        authMethod:
          type: string
          enum: [basic, email, otp]
        locale:
          $ref: "#/components/schemas/CPLocale"
    ValidationResult:
      type: object
      required:
        - result
      properties:
        result:
          type: boolean
    Disk:
      type: object
      required:
        - name
        - mountPoint
        - fileSystem
        - usage
      properties:
        name:
          type: string
        mountPoint:
          type: string
          format: path
        fileSystem:
          type: string
        usage:
          $ref: "#/components/schemas/SpaceUsage"
        kind:
          type: string
          enum: [ssd, hdd]
    SpaceUsage:
      type: object
      required:
        - total
        - used
      properties:
        total:
          type: integer
        used:
          type: integer
    RolesInfo:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/EmailRoleInfo"
        backup:
          $ref: "#/components/schemas/BackupRoleInfo"
        database:
          $ref: "#/components/schemas/DatabaseRoleInfo"
        application:
          $ref: "#/components/schemas/ApplicationRoleInfo"
        dns:
          $ref: "#/components/schemas/DnsRoleInfo"
        webserverKind:
          $ref: "#/components/schemas/WebserverKind"
    ControlRoleInfo:
      type: object
      required:
        - usage
        - authd
        - sged
        - logd
      properties:
        usage:
          type: integer
        authd:
          $ref: "#/components/schemas/CoreServiceInfo"
        sged:
          $ref: "#/components/schemas/CoreServiceInfo"
        logd:
          $ref: "#/components/schemas/CoreServiceInfo"
    CoreServiceInfo:
      type: object
      required:
        - id
        - status
        - port
        - usage
      properties:
        id:
          type: string
          format: uuid
        version:
          type: string
          format: semver
        status:
          $ref: "#/components/schemas/NetworkStatus"
        port:
          type: integer
        usage:
          type: integer
        processes:
          type: array
          items:
            $ref: "#/components/schemas/ProcessInfo"
    ApplicationRoleInfo:
      type: object
      required:
        - state
        - usage
        - filerd
        - ftpcd
        - websitesCount
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"
        usage:
          type: integer
        filerd:
          $ref: "#/components/schemas/ServiceInfo"
        ftpcd:
          $ref: "#/components/schemas/ServiceInfo"
        websitesCount:
          type: integer
          description: >-
            The number of websites that are assigned to be on this
            application role.
    BackupRoleInfo:
      type: object
      required:
        - state
        - usage
        - snapshotsCount
        - last24hSnapshotsCount
        - bkupd
        - websitesCount
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"
        usage:
          type: integer
        snapshotsCount:
          type: integer
        last24hSnapshotsCount:
          type: integer
        bkupd:
          $ref: "#/components/schemas/ServiceInfo"
        websitesCount:
          type: integer
          description: >-
            The number of websites whose backups are assigned to be on this
            backup role.
    DatabaseRoleInfo:
      type: object
      required:
        - state
        - usage
        - mysqlStats
        - mysqlcd
        - websitesCount
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"
        usage:
          type: integer
        mysqlStats:
          type: object
        mysqlcd:
          $ref: "#/components/schemas/ServiceInfo"
        websitesCount:
          type: integer
          description: >-
            The number of websites whose databases are assigned to be on this
            database role.
    DnsRoleInfo:
      type: object
      required:
        - state
        - usage
        - zonesCount
        - dnscd
        - websitesCount
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"
        usage:
          type: integer
        zonesCount:
          type: integer
        dnscd:
          $ref: "#/components/schemas/ServiceInfo"
        websitesCount:
          type: integer
          description: >-
            The number of websites whose DNS zones are assigned to be on this
            dns role.
    EmailRoleInfo:
      type: object
      required:
        - state
        - usage
        - mailboxCount
        - failedDeliveryCount
        - websitesCount
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"
        usage:
          type: integer
        mailboxCount:
          type: integer
        failedDeliveryCount:
          type: integer
        websitesCount:
          type: integer
          description: >-
            The number of websites whose emails are assigned to be on this
            email role.
    NewBackupRole:
      type: object
      description: The path for backups to be stored.
      required:
        - path
      properties:
        path:
          description: The full path where the backups will be stored.
          type: string
          format: path
    DeviceKind:
      description: >-
        The type of the btrfs device, if `device` the block device must
        already exist, otherwise (with `sparseFile`) it will be created
        from a new (not existing) sparse file. In both cases the block
        device will be formatted to btrfs and mounted in the given mount
        point.
      type: string
      enum: [device, sparseFile]
    UpdateApplicationRole:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"
    UpdateBackupRole:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"

    UpdateDatabaseRole:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"

    UpdateDnsRole:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"

    UpdateEmailRole:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/ServerRoleState"

    ServiceInfo:
      type: object
      required:
        - id
        - status
        - port
        - usage
      properties:
        id:
          type: string
          format: uuid
        version:
          type: string
          format: semver
        status:
          $ref: "#/components/schemas/NetworkStatus"
        port:
          type: integer

        usage:
          type: integer
        processes:
          type: array
          items:
            $ref: "#/components/schemas/ProcessInfo"
    ProcessInfo:
      type: object
      required:
        - pid
        - name
        - cpu_usage
        - resMemory
      properties:
        pid:
          type: integer
        name:
          type: string
        cpu_usage:
          type: number
        resMemory:
          type: integer
    NetworkInterface:
      type: object
      required:
        - name
        - ips
      properties:
        name:
          type: string
          example: "eth0"
        ips:
          $ref: "#/components/schemas/InterfaceIp"
    InterfaceIp:
      type: object
      required:
        - ip
        - prefix
        - kind
      properties:
        ip:
          type: string
          format: ip
          example: "192.168.0.1"
        prefix:
          type: string
          format: ip
          example: "255.255.192.0"
        kind:
          type: string
          enum: [primary, secondary]
    NewEmail:
      type: object
      required:
        - username
      properties:
        mailboxName:
          type: string
        mailboxPassword:
          type: string
        username:
          type: string
        aliases:
          type: array
          items:
            type: string
        forwarders:
          type: array
          items:
            type: string
        quota:
          type: integer
    Email:
      type: object
      required:
        - id
        - websiteId
        - address
        - aliases
        - status
        - autorespondersCount
        - domainId
      properties:
        id:
          type: string
          format: uuid
        websiteId:
          type: string
          format: uuid
        mailboxName:
          type: string
        address:
          type: string
        aliases:
          type: array
          items:
            type: string
        hasMailbox:
          type: boolean
        status:
          $ref: "#/components/schemas/EmailStatus"
        quota:
          $ref: "#/components/schemas/Quota"
        autorespondersCount:
          type: integer
        forwardersCount:
          type: integer
        createdAt:
          type: string
        emailKind:
          type: string
          enum: ["normal", "internal"]
        domainId:
          type: string
          format: uuid
    EmailDetailed:
      type: object
      required:
        - id
        - address
        - aliases
        - status
        - blacklist
        - whitelist
        - autorespondersCount
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        mailboxName:
          type: string
        address:
          type: string
        aliases:
          type: array
          items:
            type: string
        forwarders:
          type: array
          items:
            type: string
        hasMailbox:
          type: boolean
        status:
          $ref: "#/components/schemas/WebsiteStatus"
        quota:
          $ref: "#/components/schemas/Quota"
        blacklist:
          type: array
          items:
            type: string
        whitelist:
          type: array
          items:
            type: string
        autorespondersCount:
          type: integer
        createdAt:
          type: string
    Quota:
      type: object
      required:
        - usage
        - total
      properties:
        usage:
          type: integer
        total:
          type: integer
    UpdateEmail:
      type: object
      properties:
        mailboxName:
          type: string
        mailboxPassword:
          type: string
        aliases:
          type: array
          items:
            type: string
        forwarders:
          type: array
          items:
            type: string
        hasMailbox:
          type: boolean
        status:
          $ref: "#/components/schemas/EmailStatus"
        quota:
          type: integer
        blacklist:
          type: array
          items:
            type: string
        whitelist:
          type: array
          items:
            type: string
    NewAutoresponder:
      type: object
      required:
        - startDate
        - enabled
        - subject
        - body
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        enabled:
          type: boolean
        subject:
          type: string
        body:
          type: string
    Autoresponder:
      type: object
      required:
        - id
        - emailId
        - startDate
        - enabled
        - subject
        - body
      properties:
        id:
          type: integer
        emailId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        enabled:
          type: boolean
        subject:
          type: string
        body:
          type: string
    UpdateAutoresponder:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        enabled:
          type: boolean
        subject:
          type: string
        body:
          type: string
    SpamThresholds:
      type: object
      required:
        - reject
        - spambox
      properties:
        greylist:
          type: number
        reject:
          type: number
        spambox:
          type: number
    ServerRole:
      type: string
      enum: [email, backup, database, application, dns]
    ServiceKind:
      type: string
      enum:
        [
          controld,
          orchd,
          authd,
          logd,
          sged,
          bkupd,
          mysqlcd,
          dnscd,
          filerd,
          ftpcd,
        ]
    ServerRoleState:
      type: string
      enum: [enabled, disabled]

    WebsitePhpSettings:
      type: object
      required:
        - websiteId
        - phpIni
      properties:
        websiteId:
          type: string
          format: uuid
        phpIni:
          $ref: "#/components/schemas/PhpIni"
    PhpIni:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/IniSetting"
    ServerStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/NetworkStatus"
    NetworkStatus:
      type: string
      enum: [unknown, online, restarting, warning, critical]
    ServerUptime:
      type: object
      required:
        - uptime
      properties:
        uptime:
          type: integer
    ServerIowait:
      type: object
      required:
        - load
      properties:
        ioWait:
          type: number
    ServerLoad:
      type: object
      required:
        - load
      properties:
        load:
          type: number
    ServerDiskUsage:
      type: object
      properties:
        disks:
          type: array
          items:
            $ref: "#/components/schemas/Disk"
    ServerMemoryUsage:
      type: object
      required:
        - ram
        - swap
      properties:
        ram:
          $ref: "#/components/schemas/SpaceUsage"
        swap:
          $ref: "#/components/schemas/SpaceUsage"
    ServerNetworkStats:
      type: object
      required:
        - latency
        - packetLoss
      properties:
        latency:
          description: Latency to the server in milliseconds.
          type: number
        packetLoss:
          description: Packet loss percentage
          type: number
    ServerNetworkInterfaces:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: "#/components/schemas/NetworkInterface"
    ServerGroups:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ServerGroup"
    ServerGroupUpdate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    NewMySQLDB:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    MySQLDBsListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MySQLDB"
    MySQLDBsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MySQLDB"
    MySQLDB:
      type: object
      required:
        - name
        - size
        - createdAt
      properties:
        name:
          type: string
        size:
          type: integer
        createdAt:
          type: string
    NewMySQLUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
        authPlugin:
          $ref: "#/components/schemas/MySQLAuthPlugin"
    MySQLUserUpdate:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    MySQLUsersFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MySQLUser"
    MySQLUser:
      type: object
      required:
        - username
        - accessHosts
        - authPlugin
        - grants
        - createdAt
        - internal
      properties:
        dbId:
          type: string
          format: uuid
        username:
          type: string
        accessHosts:
          type: array
          items:
            type: string
        authPlugin:
          $ref: "#/components/schemas/MySQLAuthPlugin"
        grants:
          description: Table names mapped to a list of privileges on that table. The wildcard "*" means the privileges are granted for all tables.
          type: object
          # Todo, improve type defs?  Or return something when listing the databases instead.
        createdAt:
          type: string
        isEphemeral:
          $ref: "#/components/schemas/MySQLUserIsEphemeralFlag"
    MySQLUserGrants:
      type: object
      required:
        - dbName
        - grants
      properties:
        dbName:
          type: string
          format: uuid
        grants:
          type: array
          items:
            type: string
    MySQLUserAccessHosts:
      type: object
      required:
        - accessHosts
      properties:
        accessHosts:
          type: array
          items:
            type: string
    MySQLUserIsEphemeralFlag:
      type: boolean
      default: false
      description: >-
        A flag which marks short-lived mysql accounts. If an account is created
        as ephemeral, it will be deleted few hours after it's been created.
        Throwaway accounts are useful for phpMyAdmin logins.
    MySQLAuthPlugin:
      description: >-
        See https://dev.mysql.com/doc/refman/8.0/en/authentication-plugins.html
        for list of plugins which MySQL supports. If not provided, the user will
        use whatever defaults the mysql server it's being created uses.
      type: string
      enum: [caching_sha2_password, mysql_native_password]
    DnsZone:
      type: object
      required:
        - origin
        - soa
        - records
      properties:
        origin:
          type: string
        soa:
          $ref: "#/components/schemas/DnsSoa"
        records:
          type: array
          items:
            $ref: "#/components/schemas/DnsRecord"
        dnssecDsRecords:
          type: string
        dnssecDnskeyRecords:
          type: string
    DnsSoa:
      type: object
      required:
        - adminEmail
        - nameServer
        - expire
        - refresh
        - retry
        - ttl
      properties:
        adminEmail:
          type: string
        nameServer:
          type: string
        expire:
          type: integer
        refresh:
          type: integer
        retry:
          type: integer
        ttl:
          description: In seconds
          type: integer
    DnsRecord:
      type: object
      required:
        - id
        - kind
        - name
        - value
        - ttl
        - proxy
      properties:
        id:
          type: string
          format: uuid
        kind:
          $ref: "#/components/schemas/DnsRecordKind"
        name:
          type: string
        value:
          type: string
        ttl:
          description: In seconds
          type: integer
        proxy:
          description: Is CloudFlare proxy on?
          type: boolean
    UpdateDnsZone:
      type: object
      properties:
        nameServer:
          type: string
        adminEmail:
          type: string
        expire:
          type: integer
        refresh:
          type: integer
        retry:
          type: integer
        ttl:
          description: In seconds
          type: integer
    UpdateDnsRecord:
      type: object
      properties:
        kind:
          $ref: "#/components/schemas/DnsRecordKind"
        name:
          type: string
        value:
          type: string
        ttl:
          description: In seconds
          type: integer
        proxy:
          description: If CloudFlare enabled, will enable the proxy
          type: boolean
    NewDnsRecord:
      type: object
      required:
        - kind
        - name
        - value
      properties:
        kind:
          $ref: "#/components/schemas/DnsRecordKind"
        name:
          type: string
        value:
          type: string
        ttl:
          type: integer
        proxy:
          type: boolean
    NewDefaultDnsRecord:
      type: object
      required:
        - kind
        - name
        - value
      properties:
        kind:
          $ref: "#/components/schemas/DnsRecordKind"
        name:
          type: string
        value:
          type: string
        ttl:
          type: integer
        overrideConflicting:
          type: boolean
          default: false
    UpdateDefaultDnsRecord:
      type: object
      properties:
        kind:
          $ref: "#/components/schemas/DnsRecordKind"
        name:
          type: string
        value:
          type: string
        ttl:
          type: integer
        overrideConflicting:
          type: boolean
          default: false
    DefaultDnsRecord:
      type: object
      required:
        - id
        - kind
        - name
        - value
      properties:
        id:
          type: string
          format: uuid
        kind:
          $ref: "#/components/schemas/DnsRecordKind"
        name:
          type: string
        value:
          type: string
        ttl:
          type: integer
        overrideConflicting:
          type: boolean
          default: false
    DnsRecordKind:
      type: string
      enum: [A, AAAA, CNAME, TXT, SPF, SRV, NS, MX, PTR, DS, CAA]
    DnsThirdPartyProvider:
      type: object
      required:
        - id
        - url
      properties:
        id:
          type: integer
        url:
          type: string
        headers:
          $ref: "#/components/schemas/MapOfStrings"
    NewDnsThirdPartyProvider:
      type: object
      required:
        - url
      properties:
        url:
          type: string
        headers:
          $ref: "#/components/schemas/MapOfStrings"
    UiPreferencesViewKind:
      type: string
      enum: [list, grid]
    ServerId:
      type: string
      format: uuid
    NewUiPreferences:
      type: object
      required:
        - fileManagerView
        - websiteView
        - spineOpen
        - fileManagerEditorFullscreen
        - serverGroups
      properties:
        fileManagerView:
          $ref: "#/components/schemas/UiPreferencesViewKind"
        websiteView:
          $ref: "#/components/schemas/UiPreferencesViewKind"
        spineOpen:
          type: boolean
        fileManagerEditorFullscreen:
          type: boolean
        serverGroups:
          type: array
          items:
            $ref: "#/components/schemas/ServerId"
    UpdateUiPreferences:
      type: object
      properties:
        fileManagerView:
          $ref: "#/components/schemas/UiPreferencesViewKind"
        websiteView:
          $ref: "#/components/schemas/UiPreferencesViewKind"
        spineOpen:
          type: boolean
        fileManagerEditorFullscreen:
          type: boolean
        serverGroups:
          type: array
          items:
            $ref: "#/components/schemas/ServerId"
    UiPreferences:
      type: object
      required:
        - loginId
        - fileManagerView
        - websiteView
        - spineOpen
        - fileManagerEditorFullscreen
        - serverGroups
      properties:
        loginId:
          type: string
          format: uuid
        fileManagerView:
          $ref: "#/components/schemas/UiPreferencesViewKind"
        websiteView:
          $ref: "#/components/schemas/UiPreferencesViewKind"
        spineOpen:
          type: boolean
        fileManagerEditorFullscreen:
          type: boolean
        serverGroups:
          type: array
          items:
            $ref: "#/components/schemas/ServerId"
    NewResourceId:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
    NewResourceUuid:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    ImportMigrationFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ImportMigrationEntry"
    ImportMigrationEntry:
      type: object
      required:
        - id
        - orgId
        - filename
        - filesize
        - status
        - importType
        - createdAt
        - updatedAt
        - percentageComplete
      properties:
        id:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
        filename:
          type: string
        filesize:
          type: integer
        status:
          type: string
          enum:
            [
              unprocessed,
              processed,
              queued,
              analyzing,
              inProgress,
              failed,
              complete,
            ]
        importType:
          type: string
          enum: [cPanel, plesk, pleskStreaming]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        percentageComplete:
          type: integer
        primaryDomain:
          type: string
    UnixTimestamp:
      type: object
      properties:
        seconds:
          type: integer
    OrgUpdate:
      type: object
      properties:
        name:
          type: string
        status:
          $ref: "#/components/schemas/Status"
        isSuspended:
          type: boolean
        locale:
          $ref: "#/components/schemas/CPLocale"
        slackNotificationWebhookUrl:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/Unset"
    OrgOwnerUpdate:
      type: object
      required:
        - memberId
      properties:
        memberId:
          type: string
          format: uuid
    ServersListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ServerInfoBrief"
        total:
          type: integer
    LoginsListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Login"
        total:
          type: integer
    MembersListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Member"
        total:
          type: integer
    PlansListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Plan"
        total:
          type: integer
    SubscriptionsListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
        total:
          type: integer
    WebsitesListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Website"
        total:
          type: integer
    DomainMappingsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/DomainMapping"
    DomainsListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Domain"
        total:
          type: integer
    EmailsListing:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Email"
        total:
          type: integer
    ForwardersFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            type: string
    NewTag:
      type: object
      required:
        - tag
      properties:
        tag:
          type: string
        colorCode:
          type: string
    Tag:
      type: object
      required:
        - id
        - tag
        - colorCode
      properties:
        id:
          type: integer
        tag:
          type: string
        colorCode:
          type: string
    TagsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
    EmailAuth:
      type: object
      required:
        - dkim
      properties:
        dkim:
          type: boolean
        dkimPublicKey:
          type: string
    EmailAuthValidation:
      type: object
      required:
        - dkimIsValid
        - spfIsValid
        - foundTxtRecordsDkim
      properties:
        dkimIsValid:
          type: boolean
        spfIsValid:
          type: boolean
        foundTxtRecordsDkim:
          type: array
          items:
            type: string
        foundTxtRecordsSpf:
          type: array
          items:
            type: string
    EmailAuthUpdate:
      type: object
      properties:
        dkim:
          type: boolean
    AuthNsResponse:
      required:
        - matchesPlatform
        - authNs
      properties:
        matchesPlatform:
          type: boolean
        authNs:
          type: array
          items:
            $ref: "#/components/schemas/AuthNsResponseNs"
    AuthNsResponseNs:
      required:
        - name
        - ips
      properties:
        name:
          type: string
        ips:
          type: array
          items:
            type: string
    AcceptInviteBody:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        locale:
          $ref: "#/components/schemas/CPLocale"
    InviteValidation:
      type: object
      required:
        - isValid
      properties:
        isValid:
          type: boolean
        loginId:
          type: string
          format: string
        orgId:
          type: string
          format: uuid
        orgName:
          type: string
        role:
          $ref: "#/components/schemas/Role"
    WebsiteAppKind:
      type: string
      enum: ["wordpress"]
    InstallableWebsiteAppsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/InstallableWebsiteApp"
    InstallableWebsiteApp:
      type: object
      required:
        - app
        - version
        - isLatest
        - createdAt
      properties:
        app:
          $ref: "#/components/schemas/WebsiteAppKind"
        version:
          type: string
          format: semver
        isLatest:
          type: boolean
        description:
          type: string
        size:
          type: number
          description: Approximate number of bytes after fresh installation.
        createdAt:
          type: string
          format: date-time
    NewWebsiteApp:
      type: object
      required:
        - app
        - adminUsername
        - adminPassword
        - adminEmail
      properties:
        app:
          $ref: "#/components/schemas/WebsiteAppKind"
        version:
          type: string
          format: semver
        path:
          type: string
          format: path
        adminUsername:
          type: string
          description: >-
            This username is going to be the username of the initial WP user
            with which the user can login to the WP admin. This is equivalent to
            going to `wp-admin/install.php` and performing the install from
            there.
        adminPassword:
          type: string
          description: >-
            Complements the admin username. Provide unhashed password.
        adminEmail:
          type: string
          description: >-
            Sets the admin email address, required by some applications.
        domainId:
          type: string
          format: uuid
          description: >-
            Install on a specific domain within this website.  Will default to
            use the primary domain.
    UpdateWpSettings:
      type: object
      properties:
        autoUpdateCore:
          $ref: "#/components/schemas/WPAutoUpdateCore"
        disallowNonWpPhp:
          type: boolean
        loginAccess:
          type: array
          items:
            type: string
            format: ip
    WpSettings:
      type: object
      required:
        - disallowNonWpPhp
        - loginAccess
        - coreAutoupdateMinorVersion
      properties:
        autoUpdateCore:
          $ref: "#/components/schemas/WPAutoUpdateCore"
        disallowNonWpPhp:
          type: boolean
        loginAccess:
          type: array
          items:
            type: string
            format: ip
    WpInstallation:
      type: object
      required:
        - dbName
        - dbUser
        - tablePrefix
      properties:
        dbName:
          type: string
        dbUser:
          type: string
        tablePrefix:
          type: string
        path:
          type: string
    WPAutoUpdateCore:
      type: string
      enum: ["major", "minor"]
    WebsiteAppsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WebsiteApp"
    WebsiteMetricsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MetricsEntry"
    ServerStatsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ServerStatEntry"
    NewWpUser:
      type: object
      required:
        - login
        - password
        - email
        - role
      properties:
        login:
          type: string
        name:
          type: string
        password:
          type: string
        email:
          type: string
    WpUser:
      type: object
      required:
        - id
        - login
        - email
        - role
      properties:
        id:
          type: integer
        login:
          type: string
        email:
          type: string
    UpdateWpUser:
      type: object
      properties:
        password:
          type: string
        name:
          type: string
        email:
          type: string
    WpUserId:
      type: number
    WpUsersFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WpUser"
    WpPluginsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WpPlugin"
    WpPlugin:
      type: object
      description: >-
        Describes the filename and additional plugin information. The filename
        is the name of the plugin php file, e.g. "bbpress.php". If the plugin
        kind is "file", then the file name refers to e.g.
        "wp-content/plugins/bbpress.php". If the kind is "dir", then the name
        refers to "wp-content/plugins/bbpress/bbpress.php". The name of the dir
        is always the same as the name of the file without the php suffix.

        https://developer.wordpress.org/plugins/plugin-basics/header-requirements/#header-fields
      required:
        - name
        - version
        - title
        - author
      properties:
        name:
          type: string
        uri:
          type: string
          format: url
        description:
          type: string
        version:
          type: string
        update:
          $ref: "#/components/schemas/WPPluginUpdateAvailable"
        autoUpdate:
          $ref: "#/components/schemas/WPPluginAutoUpdateStatus"
        status:
          $ref: "#/components/schemas/WPPluginStatus"
        author:
          type: string
    WPPluginAutoUpdateStatus:
      type: string
      enum: ["enabled", "disabled"]
    WPThemeAutoUpdateStatus:
      type: string
      enum: ["on", "off"]
    WPPluginStatus:
      type: string
      enum: ["active", "inactive", "unknown"]
    WPPluginUpdateAvailable:
      type: string
      enum: ["available", "none"]
    UpdateWpPlugin:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/WPPluginStatus"
        autoUpdate:
          $ref: "#/components/schemas/WPPluginAutoUpdateStatus"
    WpThemesFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WpTheme"
    WpTheme:
      type: object
      description: >-
        Describes the theme directory name and additional theme information.
      required:
        - name
        - status
        - version
      properties:
        name:
          type: string
        status:
          $ref: "#/components/schemas/WPPluginStatus"
        version:
          type: string
        update:
          type: string
        autoUpdate:
          $ref: "#/components/schemas/WPThemeAutoUpdateStatus"
    WpLatestVersion:
      type: object
      required:
        - version
      properties:
        version:
          type: string
    InstallWpThemeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        activate:
          type: boolean
          description: Activate theme after installation
    MetricsEntry:
      description: >-
        Each Metrics entry represts an hourly window of banwidth usage
        Note: depending upon the polling time, most recent hour values might not
              be complete yet and are subject to change if fetched at a later time.
      type: object
      required:
        - datetime
        - bytesReceived
        - bytesSent
        - uniqueHits
        - botHits
        - totalHits
      properties:
        datetime:
          description: Time at the beginning of the unit for this bandwidth consumption entry
          type: string
          format: date-time
        bytesReceived:
          type: number
        bytesSent:
          type: number
        uniqueHits:
          type: number
        botHits:
          type: number
        totalHits:
          type: number
    ServerStatEntry:
      description: >-
        Each entry represts server stats recorded periodically
      type: object
      required:
        - serverId
        - ioWait
        - ramUsage
        - swapUsage
        - systemLoad
        - uptime
        - recordedAt
      properties:
        serverId:
          type: string
          format: uuid
        ioWait:
          type: number
        ramUsage:
          type: number
        swapUsage:
          type: number
        systemLoad:
          type: number
        uptime:
          type: number
        recordedAt:
          description: Time when the entry was recorded
          type: string
          format: date-time

    WebsiteApp:
      type: object
      required:
        - app
        - version
      properties:
        id:
          type: string
          format: uuid
        app:
          $ref: "#/components/schemas/WebsiteAppKind"
        path:
          type: string
          format: path
          description: >-
            The path is only present if the app is installed in the root instead
            of a subfolder. For example if a customer installs Wordpress at
            '/blog', then the path will be present and equal to 'blog'. But if
            they install WP in website root, instead of returning '/' or empty
            string, this property is omitted.
        defaultWpUserId:
          type: integer
          description: >-
            Only present if default was set by the user. Otherwise, this field
            isn't there.
    WebsiteCloneStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/CloneStatus"
    CloneStatus:
      type: string
      enum:
        [cloningWebsite, cloningDatabases, cloningHomeDir, succeeded, failed]
    CrontabFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CrontabValue"
    CrontabValue:
      oneOf:
        - $ref: "#/components/schemas/CrontabValueVariable"
        - $ref: "#/components/schemas/CrontabValueCmd"
    CrontabValueVariable:
      type: object
      required:
        - "variable"
      properties:
        variable:
          type: object
          required:
            - "lineNumber"
            - "key"
            - "val"
          properties:
            lineNumber:
              type: "number"
            key:
              type: "string"
            val:
              type: "string"
    CrontabValueCmd:
      type: object
      required:
        - "cronCmd"
      properties:
        cronCmd:
          type: object
          required:
            - "lineNumber"
            - "expr"
          properties:
            lineNumber:
              type: "number"
            expr:
              type: "string"
    UpdateCrontabFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/UpdateCrontabValue"
    UpdateCrontabValue:
      oneOf:
        - $ref: "#/components/schemas/UpdateCrontabValueVariable"
        - $ref: "#/components/schemas/UpdateCrontabValueCmd"
    UpdateCrontabValueVariable:
      type: object
      required:
        - "variable"
      properties:
        variable:
          type: object
          required:
            - "lineNumber"
          properties:
            lineNumber:
              type: "number"
            key:
              type: "string"
            val:
              type: "string"
    UpdateCrontabValueCmd:
      type: object
      required:
        - "cronCmd"
      properties:
        cronCmd:
          type: object
          required:
            - "lineNumber"
          properties:
            lineNumber:
              type: "number"
            expr:
              type: "string"
    RewriteChainFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/RewriteChain"
    RewriteChain:
      type: object
      required:
        - lineNumber
        - conds
        - rule
      properties:
        lineNumber:
          type: number
        rule:
          type: object
          required:
            - pattern
            - substitution
            - flags
          properties:
            pattern:
              type: string
            substitution:
              type: string
            flags:
              type: array
              items:
                type: string
        conds:
          type: array
          items:
            type: object
            required:
              - testString
              - condPattern
              - flags
            properties:
              testString:
                type: string
              condPattern:
                type: string
              flags:
                type: array
                items:
                  type: string
    UpdateRewriteChainFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/UpdateRewriteChain"
    UpdateRewriteChain:
      type: object
      description: >-
        If the `rule` property is missing, we will delete a rule on the given
        line number instead. If just the `conds` property is missing, it defauls
        to an empty array.
      required:
        - lineNumber
      properties:
        lineNumber:
          type: number
        rule:
          type: object
          required:
            - pattern
            - substitution
            - flags
          properties:
            pattern:
              type: string
            substitution:
              type: string
            flags:
              type: array
              items:
                type: string
        conds:
          type: array
          items:
            type: object
            required:
              - testString
              - condPattern
              - flags
            properties:
              testString:
                type: string
              condPattern:
                type: string
              flags:
                type: array
                items:
                  type: string
    RequireIpsRule:
      type: object
      required:
        - kind
        - ips
      properties:
        kind:
          $ref: "#/components/schemas/RequireIpsRuleKind"
        ips:
          type: array
          items:
            type: string
    RequireIpsRuleKind:
      type: string
      enum: [allow, block]
    NewServerIp:
      type: object
      required:
        - ip
        - prefix
      properties:
        ip:
          type: string
          format: ip
        prefix:
          type: string
          format: ip
    MapOfStrings:
      type: object
      description: Map of string keys to string values.
      additionalProperties:
        type: string
    EmailAddress:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    ValidatedPasswordRecovery:
      type: object
      properties:
        obfuscatedEmail:
          type: string
          format: email
    NewPassword:
      type: object
      required:
        - newPassword
      properties:
        newPassword:
          type: string
    SessionsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Session"
    Session:
      type: object
      required:
        - id
        - createdAt
      properties:
        id:
          type: string
        createdAt:
          type: string
        userAgent:
          type: string
        ipAddr:
          type: string
          format: ip
        location:
          type: string
    AvatarFile:
      type: object
      required:
        - avatar
      properties:
        avatar:
          type: string
          format: binary
    EmailPasswordUpdate:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    LicenceKey:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          format: uuid
    EmailPublicIp:
      type: object
      required:
        - ipAddress
      properties:
        ipAddress:
          type: string
    EmailForwardersUpdate:
      type: object
      required:
        - forwarders
      properties:
        forwarders:
          type: array
          description: email addresses to forward to.
          items:
            type: string
    SettingsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          $ref: "#/components/schemas/Settings"
    Settings:
      type: array
      items:
        $ref: "#/components/schemas/Setting"
    IniSetting:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
        section:
          type: string
    Setting:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          description: An arbitrary JSON serializable value.
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items: {}
            - type: object
    Unset:
      type: object
      required:
        - unset
      properties:
        unset:
          type: boolean
    WebsiteOperationValidation:
      type: object
      required:
        - operation
        - parameters
      properties:
        operation:
          $ref: "#/components/schemas/WebsiteOperation"
        params:
          $ref: "#/components/schemas/ChangeSubscriptionParams"
    WebsiteOperation:
      type: string
      enum: [changeSubscription]
    ChangeSubscriptionParams:
      type: object
      required:
        - subscriptionId
      properties:
        subscriptionId:
          oneOf:
            - type: integer
            - $ref: "#/components/schemas/Unset"
    Branding:
      type: object
      required:
        - settings
        - orgName
        - locale
      properties:
        orgName:
          type: string
        parent:
          type: string
        controlPanelDomain:
          type: string
          format: hostname
        phpMyAdminDomain:
          type: string
          format: hostname
        roundcubeDomain:
          type: string
          format: hostname
        logoPath:
          type: string
          format: path
        inverseLogoPath:
          type: string
          format: path
        inverseIconPath:
          type: string
          format: path
        loginImagePath:
          type: string
          format: path
        faviconPath:
          type: string
          format: path
        nameServers:
          type: array
          items:
            type: string
        settings:
          type: array
          items:
            $ref: "#/components/schemas/Setting"
        stagingDomain:
          type: string
          format: hostname
        locale:
          $ref: "#/components/schemas/CPLocale"
    DomainIp:
      type: object
      required:
        - domain
        - ip
      properties:
        domain:
          type: string
        ip:
          type: string
    BackupsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Backup"
    Backup:
      type: object
      required:
        - id
        - startedAt
        - snapshotDirName
        - kind
        - storageKind
      properties:
        id:
          type: integer
        startedAt:
          type: string
          format: datetime
        finishedAt:
          type: string
          format: datetime
        snapshotDirName:
          type: string
        size:
          type: integer
        homeDirStatus:
          $ref: "#/components/schemas/OperationStatus"
        filesSize:
          type: integer
        mysqlDbsStatus:
          $ref: "#/components/schemas/OperationStatus"
        mysqlDbsCount:
          type: integer
        mysqlDbsSize:
          type: integer
        emailsStatus:
          $ref: "#/components/schemas/OperationStatus"
        emailsCount:
          type: integer
        emailsSize:
          type: integer
        kind:
          $ref: "#/components/schemas/BackupKind"
        description:
          type: string
        storageKind:
          $ref: "#/components/schemas/BackupStorageKind"
    RestoreDetailed:
      type: object
      required:
        - backupId
        - startedAt
      properties:
        backupId:
          type: integer
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        homeDirStatus:
          $ref: "#/components/schemas/OperationStatus"
        mysqlDbsStatus:
          $ref: "#/components/schemas/OperationStatus"
        emailsStatus:
          $ref: "#/components/schemas/OperationStatus"
    BackupDetailed:
      type: object
      required:
        - id
        - startedAt
        - snapshotDirName
        - kind
        - storageKind
      properties:
        id:
          type: integer
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        snapshotDirName:
          type: string
        size:
          type: integer
        homeDirStatus:
          $ref: "#/components/schemas/OperationStatus"
        filesSize:
          type: integer
        mysqlDbsStatus:
          $ref: "#/components/schemas/OperationStatus"
        mysqlDbs:
          type: array
          items:
            type: string
        mysqlDbsSize:
          type: integer
        emailsStatus:
          $ref: "#/components/schemas/OperationStatus"
        emails:
          type: array
          description: The addresses of the backed up mailboxes.
          items:
            type: string
        emailDomains:
          type: array
          description: The domain ids of the backed up mailboxes.
          items:
            type: string
            format: uuid
        emailsSize:
          type: integer
        kind:
          $ref: "#/components/schemas/BackupKind"
        description:
          type: string
        storageKind:
          $ref: "#/components/schemas/BackupStorageKind"
    BackupKind:
      type: string
      enum: [manual, automatic]
    WebsiteLogsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WebsiteLog"
    WebsiteLog:
      type: object
      required:
        - createdAt
        - status
      properties:
        createdAt:
          type: string
          format: date
        status:
          $ref: "#/components/schemas/WebsiteLogStatus"
        metadata:
          oneOf:
            - $ref: "#/components/schemas/LogTimeMetadata"
            - $ref: "#/components/schemas/LogHttpMetadata"
    WebsiteLogStatus:
      type: string
      enum:
        [
          ok,
          slow,
          failed4xx,
          failed5xx,
          timeout,
          dnsZoneNotFound,
          appServerMismatch,
        ]
      description: >-
        The status of the website at the time the log was written. Some
        statuses have additional metadata (ok, slow, failed4xx, failed5xx)
        whereas some don't (timeout, dnsZoneNotFound, appServerMismatch).
    ServiceLogsFullListing:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ServiceLog"
    ServiceLog:
      type: object
      required:
        - createdAt
        - status
        - serviceKind
      properties:
        createdAt:
          type: string
          format: date
        serviceKind:
          $ref: "#/components/schemas/DaemonKind"
        status:
          $ref: "#/components/schemas/ServiceLogStatus"
        metadata:
          oneOf:
            - $ref: "#/components/schemas/LogTimeMetadata"
            - $ref: "#/components/schemas/LogGreetingsMessageMetadata"
    ServiceLogStatus:
      type: string
      enum: [ok, slow, timeout, unrecognizedGreetingsMessage]
      description: >-
        The status of the website at the time the log was written. Some
        statuses have additional metadata (ok, slow, unrecognizedGreetingsMessage)
            whereas some don't (timeout).
    DaemonKind:
      type: string
      enum:
        [
          mysqld,
          pdns,
          postfixSmtp,
          postfixSmtps,
          postfixSubmissions,
          dovcotImap,
          dovcotImaps,
          dovcotPop3,
          dovcotPop3s,
          pureFtp,
        ]
    LogTimeMetadata:
      type: object
      description: >-
        How long the request took. It's used with `ok` and `slow` log statuses.
      required:
        - requestTimeMs
      properties:
        requestTimeMs:
          type: integer
    LogHttpMetadata:
      type: object
      description: >-
        What was the status code of an http request and its truncated body.
        Used with `failed4xx` and `failed5xx` statuses.
      required:
        - statusCode
        - body
      properties:
        statusCode:
          type: integer
        body:
          type: string
    LogGreetingsMessageMetadata:
      type: object
      description: >-
        The service has returned a payload we didn't expect. There's a chance of
        different service running at the standard port.
      required:
        - greetingsMessage
      properties:
        greetingsMessage:
          type: string
          description: >-
            This is a list of bytes which have been returned by the service.
            For example "[50,50,48,32]".
    BackupStatus:
      type: object
      required:
        - id
        - websiteId
        - startedAt
        - action
      properties:
        id:
          type: integer
        websiteId:
          type: string
          format: uuid
        startedAt:
          type: string
          format: datetime
        action:
          $ref: "#/components/schemas/BackupAction"
        homeDirStatus:
          $ref: "#/components/schemas/OperationStatus"
        mysqlDbsStatus:
          $ref: "#/components/schemas/OperationStatus"
        emailsStatus:
          $ref: "#/components/schemas/OperationStatus"
    BackupAction:
      type: string
      enum: [backup, restore]
    OperationStatus:
      type: string
      enum: [started, successful, failed]
    SqlFile:
      type: object
      required:
        - sql
      properties:
        sql:
          type: string
          format: binary
          description: >-
            Upload either a raw sql file (must be utf8 valid string) or .zip
            or .gz file with the sql string.
    ServiceSettingValue:
      oneOf:
        - type: string
        - type: object
        - type: number
        - type: boolean
        - $ref: "#/components/schemas/SmartHostSettings"
    SmartHostSettings:
      type: object
      required:
        - host
        - creds
      properties:
        host:
          type: object
          required:
            - hostname
          properties:
            hostname:
              type: string
            port:
              type: integer
        creds:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
    DomainInUseStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            [
              prohibited,
              notInUse,
              inUseCurrentOrg,
              inUseAnotherOrg,
              inUseDeletedSite,
            ]
        websiteId:
          type: string
          format: uuid
    LogLevelLimit:
      description: >-
        Limit the log level of a service.
      type: string
      enum: [error, warn, info, trace, debug]
    OrchdLogSettings:
      description: Settings for orchd logging
      type: object
      properties:
        limit:
          $ref: "#/components/schemas/LogLevelLimit"
      required:
        - limit
    WordpressConfig:
      oneOf:
        - $ref: "#/components/schemas/WpDebug"
        - $ref: "#/components/schemas/WpDebugLog"
        - $ref: "#/components/schemas/WpDebugDisplay"
    WpDebug:
      description: >-
        Enable or disable debug mode.
      type: object
      properties:
        WpDebug:
          type: boolean
      required:
        - WpDebug
    WpDebugLog:
      description: >-
        Enable or disable debug logging.
      type: object
      properties:
        WpDebugLog:
          type: boolean
      required:
        - WpDebugLog
    WpDebugDisplay:
      description: >-
        Enable or disable debug display.
      type: object
      properties:
        WpDebugDisplay:
          type: boolean
      required:
        - WpDebugDisplay
    OrchdLoginPolicySettings:
      description: Settings for orchd login policy
      type: object
      properties:
        enabled:
          type: boolean
        emailQuota:
          type: integer
        emailAutoBlockEnabled:
          type: boolean
        emailAutoBlockThreshold:
          type: integer
          minimum: 1
        emailAutoBlockDuration:
          type: integer
          minimum: 1
        ipQuota:
          type: integer
        ipAutoBlockEnabled:
          type: boolean
        ipAutoBlockThreshold:
          type: integer
          minimum: 1
        ipAutoBlockDuration:
          type: integer
          minimum: 1
    OrchdLoginPolicyIpList:
      description: Ip white or black list for orchd login policy
      type: object
      properties:
        ipList:
          type: array
          items:
            type: string
    OrchdLoginPolicyEmailList:
      description: Email white or black list for orchd login policy
      type: object
      properties:
        emailList:
          type: array
          items:
            type: string
    Outcome:
      type: string
      enum: [success, restartRequired, updateNotApplied]
    LocalRemoteBody:
      description: Whether a domain is treated as local or remote by the MTA
      properties:
        localRemote:
          $ref: "#/components/schemas/LocalRemote"
    LocalRemote:
      type: string
      enum: [local, remote]
    WebsitesAddedStats:
      type: array
      items:
        $ref: "#/components/schemas/ResourceCountByInterval"
    CustomersAddedStats:
      type: array
      items:
        $ref: "#/components/schemas/ResourceCountByInterval"
    ResourceCountByInterval:
      required:
        - interval
        - resourceCount
      properties:
        interval:
          type: string
        resourceCount:
          type: number
    CPLocale:
      type: string
      enum:
        [
          af,
          af-ZA,
          ar,
          ar-AE,
          ar-BH,
          ar-DZ,
          ar-EG,
          ar-IQ,
          ar-JO,
          ar-KW,
          ar-LB,
          ar-LY,
          ar-MA,
          ar-OM,
          ar-QA,
          ar-SA,
          ar-SY,
          ar-TN,
          ar-YE,
          az,
          az-AZ,
          az-Cyrl-AZ,
          be,
          be-BY,
          bg,
          bg-BG,
          bn-IN,
          bn-BD,
          bs-BA,
          ca,
          ca-ES,
          cs,
          cs-CZ,
          cy,
          cy-GB,
          da,
          da-DK,
          de,
          de-AT,
          de-CH,
          de-DE,
          de-LI,
          de-LU,
          dv,
          dv-MV,
          el,
          el-GR,
          en,
          en-AU,
          en-BZ,
          en-CA,
          en-CB,
          en-GB,
          en-IE,
          en-JM,
          en-NZ,
          en-PH,
          en-TT,
          en-US,
          en-ZA,
          en-ZW,
          eo,
          es,
          es-AR,
          es-BO,
          es-CL,
          es-CO,
          es-CR,
          es-DO,
          es-EC,
          es-ES,
          es-GT,
          es-HN,
          es-MX,
          es-NI,
          es-PA,
          es-PE,
          es-PR,
          es-PY,
          es-SV,
          es-UY,
          es-VE,
          et,
          et-EE,
          eu,
          eu-ES,
          fa,
          fa-IR,
          fi,
          fi-FI,
          fo,
          fo-FO,
          fr,
          fr-BE,
          fr-CA,
          fr-CH,
          fr-FR,
          fr-LU,
          fr-MC,
          gl,
          gl-ES,
          gu,
          gu-IN,
          he,
          he-IL,
          hi,
          hi-IN,
          hr,
          hr-BA,
          hr-HR,
          hu,
          hu-HU,
          hy,
          hy-AM,
          id,
          id-ID,
          is,
          is-IS,
          it,
          it-CH,
          it-IT,
          ja,
          ja-JP,
          ka,
          ka-GE,
          kk,
          kk-KZ,
          kn,
          kn-IN,
          ko,
          ko-KR,
          kok,
          kok-IN,
          ky,
          ky-KG,
          lt,
          lt-LT,
          lv,
          lv-LV,
          mi,
          mi-NZ,
          mk,
          mk-MK,
          mn,
          mn-MN,
          mr,
          mr-IN,
          ms,
          ms-BN,
          ms-MY,
          mt,
          mt-MT,
          nb,
          nb-NO,
          nl,
          nl-BE,
          nl-NL,
          nn-NO,
          ns,
          ns-ZA,
          pa,
          pa-IN,
          pl,
          pl-PL,
          ps,
          ps-AR,
          pt,
          pt-BR,
          pt-PT,
          qu,
          qu-BO,
          qu-EC,
          qu-PE,
          ro,
          ro-RO,
          ru,
          ru-RU,
          sa,
          sa-IN,
          se,
          se-FI,
          se-NO,
          se-SE,
          sk,
          sk-SK,
          sl,
          sl-SI,
          sq,
          sq-AL,
          sr-BA,
          sr-Cyrl-BA,
          sr-SP,
          sr-Cyrl-SP,
          sv,
          sv-FI,
          sv-SE,
          sw,
          sw-KE,
          syr,
          syr-SY,
          ta,
          ta-IN,
          te,
          te-IN,
          th,
          th-TH,
          tl,
          tl-PH,
          tn,
          tn-ZA,
          tr,
          tr-TR,
          tt,
          tt-RU,
          ts,
          uk,
          uk-UA,
          ur,
          ur-PK,
          uz,
          uz-UZ,
          uz-Cyrl-UZ,
          vi,
          vi-VN,
          xh,
          xh-ZA,
          zh,
          zh-CN,
          zh-HK,
          zh-MO,
          zh-SG,
          zh-TW,
          zu,
          zu-ZA,
        ]
    InstallWpPlugin:
      type: object
      required:
        - pluginName
      properties:
        pluginName:
          type: string
    WebserverKind:
      type: string
      enum: ["liteSpeed", "openLiteSpeed", "dummyWebServer", "apache", "nginx"]
    MysqlInfo:
      type: object
      required:
        - mysqlKind
      properties:
        mysqlKind:
          $ref: "#/components/schemas/MysqlKind"
    MysqlKind:
      type: string
      enum: ["mysql80", "mysql81", "mariaDbLts", "mariaDb11"]
    SetWebserverKind:
      type: object
      required:
        - webserverKind
      properties:
        webserverKind:
          $ref: "#/components/schemas/WebserverKind"
        serial:
          type: string
    LetsEncryptPreflightResult:
      type: object
      required:
        - canIssue
      properties:
        canIssue:
          type: boolean
        error:
          type: string
    DomainSslCert:
      type: object
      required:
        - cn
        - expires
        - issued
        - issuer
        - sans
        - forceHttps
      properties:
        cn:
          type: string
        expires:
          type: string
        issued:
          type: string
        issuer:
          type: string
        sans:
          type: array
          items:
            type: string
        forceHttps:
          type: boolean
    DomainSslCertWithData:
      required:
        - cn
        - expires
        - issued
        - issuer
        - sans
        - cert
        - key
        - force_https
      properties:
        cn:
          type: string
        expires:
          type: string
        issued:
          type: string
        issuer:
          type: string
        sans:
          type: array
          items:
            type: string
        cert:
          type: string
        key:
          type: string
        forceHttps:
          type: boolean
    WebsiteAndDomainUuid:
      type: object
      required:
        - websiteId
        - domainId
      properties:
        websiteId:
          type: string
          format: uuid
        domainId:
          type: string
          format: uuid
    ServerHostnameWebsite:
      type: object
      required:
        - websiteId
        - domains
      properties:
        websiteId:
          type: string
          format: uuid
        domains:
          type: array
          items:
            $ref: "#/components/schemas/DomainWithUuid"
    DomainWithUuid:
      type: object
      required:
        - domainId
        - domainName
        - isPrimary
      properties:
        domainId:
          type: string
        domainName:
          type: string
        isPrimary:
          type: boolean
    CanUse:
      type: object
      required:
        - ftp
        - fileManager
        - phpVersions
        - redis
        - modSec
        - backup
      properties:
        ftp:
          type: boolean
        fileManager:
          type: boolean
        phpVersions:
          type: array
          items:
            $ref: "#/components/schemas/PhpVersion"
        redis:
          type: boolean
        modSec:
          type: boolean
        backup:
          type: boolean
        mysqlKind:
          $ref: "#/components/schemas/MysqlKind"
    #
    # Activity log types
    #
    ActivityKind:
      type: string
      enum:
        [added, removed, cloned, imported, backedUp, errorRaised, backupError]
      description: >-
        Different activities that happen in orchd.
        There will be a lot of changes to the values of this enum as time goes
        by, consider this non-exhausive and be graceful with unknown values.
    ActivitiesListing:
      type: object
      required:
        - total
        - items
      properties:
        total:
          type: integer
        items:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
    Activity:
      type: object
      required:
        - id
        - orgId
        - kind
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
        kind:
          $ref: "#/components/schemas/ActivityKind"
        createdAt:
          type: string
          format: date-time
        message:
          type: string
        context:
          $ref: "#/components/schemas/ActivityContext"
        activityObject:
          $ref: "#/components/schemas/ActivityObject"
    ActivityContext:
      type: object
      properties:
        org:
          $ref: "#/components/schemas/ActivityOrgEntity"
        website:
          $ref: "#/components/schemas/ActivityWebsiteEntity"
        domain:
          $ref: "#/components/schemas/ActivityDomainEntity"
        actor:
          oneOf:
            - $ref: "#/components/schemas/ActivityLoginEntity"
            - $ref: "#/components/schemas/ActivityAccessTokenEntity"
        server:
          $ref: "#/components/schemas/ActivityServerEntity"
        error:
          $ref: "#/components/schemas/ActivityErrorEntity"
    ActivityObject:
      oneOf:
        - $ref: "#/components/schemas/ActivityObjectEntity"
        - type: object
          required:
            - type
            - from
            - to
          properties:
            type:
              type: string
              enum: [fromTo]
            from:
              $ref: "#/components/schemas/ActivityObjectEntity"
            to:
              $ref: "#/components/schemas/ActivityObjectEntity"
    ActivityObjectEntity:
      oneOf:
        - $ref: "#/components/schemas/ActivityWebsiteEntity"
        - $ref: "#/components/schemas/ActivityDomainEntity"
        - $ref: "#/components/schemas/ActivityOrgEntity"
        - $ref: "#/components/schemas/ActivityLoginEntity"
        - $ref: "#/components/schemas/ActivityServerEntity"
    ActivityOrgEntity:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [org]
        content:
          type: object
          required:
            - id
            - detail
          properties:
            id:
              type: string
              format: uuid
            detail:
              type: object
              properties:
                ok:
                  $ref: "#/components/schemas/ActivityOrgEntityDetail"
                error:
                  $ref: "#/components/schemas/HttpError"
    ActivityOrgEntityDetail:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    ActivityWebsiteEntity:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [website]
        content:
          type: object
          required:
            - id
            - detail
          properties:
            id:
              type: string
              format: uuid
            detail:
              type: object
              properties:
                ok:
                  $ref: "#/components/schemas/ActivityWebsiteEntityDetail"
                error:
                  $ref: "#/components/schemas/HttpError"
    ActivityWebsiteEntityDetail:
      type: object
      required:
        - domain
        - orgId
      properties:
        domain:
          type: string
        subscriptionId:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
    ActivityDomainEntity:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [domain]
        content:
          type: object
          required:
            - id
            - detail
          properties:
            id:
              type: string
              format: uuid
            detail:
              type: object
              properties:
                ok:
                  $ref: "#/components/schemas/ActivityDomainEntityDetail"
                error:
                  $ref: "#/components/schemas/HttpError"
    ActivityDomainEntityDetail:
      type: object
      required:
        - name
        - orgId
      properties:
        name:
          type: string
        orgId:
          type: string
          format: uuid
        websiteId:
          type: string
          format: uuid
        mappingKind:
          $ref: "#/components/schemas/DomainMappingKind"
    ActivityLoginEntity:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [login]
        content:
          type: object
          required:
            - id
            - detail
          properties:
            id:
              type: string
              format: uuid
            detail:
              type: object
              properties:
                ok:
                  $ref: "#/components/schemas/ActivityLoginEntityDetail"
                error:
                  $ref: "#/components/schemas/HttpError"
    ActivityLoginEntityDetail:
      type: object
      required:
        - email
        - name
        - realmId
      properties:
        name:
          type: string
        email:
          type: string
        realmId:
          type: string
          format: uuid
    ActivityServerEntity:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [server]
        content:
          type: object
          required:
            - id
            - detail
          properties:
            id:
              type: string
              format: uuid
            detail:
              type: object
              properties:
                ok:
                  $ref: "#/components/schemas/ActivityServerEntityDetail"
                error:
                  $ref: "#/components/schemas/HttpError"
    ActivityServerEntityDetail:
      type: object
      required:
        - friendlyName
        - hostname
      properties:
        friendlyName:
          type: string
        hostname:
          type: string
          format: uuid
    ActivityErrorEntity:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [error]
        content:
          type: object
          required:
            - detail
          properties:
            detail:
              $ref: "#/components/schemas/HttpError"
    ActivityAccessTokenEntity:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [accessToken]
    EmailServerHostnameOverride:
      type: object
      properties:
        domain:
          type: string
    OutboundSpamScanningSettings:
      type: object
      properties:
        enabled:
          type: boolean
    AdminCredentials:
      description: A username/password for a web app such as WordPress
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string