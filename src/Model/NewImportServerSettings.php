<?php
/**
 * NewImportServerSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * orchd
 *
 * orchd API docs
 *
 * The version of the OpenAPI document: 12.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Upmind\EnhanceSdk\Model;

use \ArrayAccess;
use \Upmind\EnhanceSdk\ObjectSerializer;

/**
 * NewImportServerSettings Class Doc Comment
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NewImportServerSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewImportServerSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ssh_private_key' => 'string',
        'ssh_public_key' => 'string',
        'allow_partial_sync' => 'bool',
        'as_user_root' => 'bool',
        'hostname' => 'string',
        'friendly_name' => 'string',
        'ssh_user' => 'string',
        'import_type' => '\Upmind\EnhanceSdk\Model\ImportKind',
        'auth_kind' => '\Upmind\EnhanceSdk\Model\ServerMigrationSettingsAuthType',
        'auth_user' => 'string',
        'auth_pass' => 'string',
        'ssh_port' => 'float',
        'api_port' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ssh_private_key' => null,
        'ssh_public_key' => null,
        'allow_partial_sync' => null,
        'as_user_root' => null,
        'hostname' => null,
        'friendly_name' => null,
        'ssh_user' => null,
        'import_type' => null,
        'auth_kind' => null,
        'auth_user' => null,
        'auth_pass' => null,
        'ssh_port' => null,
        'api_port' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ssh_private_key' => false,
        'ssh_public_key' => false,
        'allow_partial_sync' => false,
        'as_user_root' => false,
        'hostname' => false,
        'friendly_name' => false,
        'ssh_user' => false,
        'import_type' => false,
        'auth_kind' => false,
        'auth_user' => false,
        'auth_pass' => false,
        'ssh_port' => false,
        'api_port' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssh_private_key' => 'sshPrivateKey',
        'ssh_public_key' => 'sshPublicKey',
        'allow_partial_sync' => 'allowPartialSync',
        'as_user_root' => 'asUserRoot',
        'hostname' => 'hostname',
        'friendly_name' => 'friendlyName',
        'ssh_user' => 'sshUser',
        'import_type' => 'importType',
        'auth_kind' => 'authKind',
        'auth_user' => 'authUser',
        'auth_pass' => 'authPass',
        'ssh_port' => 'sshPort',
        'api_port' => 'apiPort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssh_private_key' => 'setSshPrivateKey',
        'ssh_public_key' => 'setSshPublicKey',
        'allow_partial_sync' => 'setAllowPartialSync',
        'as_user_root' => 'setAsUserRoot',
        'hostname' => 'setHostname',
        'friendly_name' => 'setFriendlyName',
        'ssh_user' => 'setSshUser',
        'import_type' => 'setImportType',
        'auth_kind' => 'setAuthKind',
        'auth_user' => 'setAuthUser',
        'auth_pass' => 'setAuthPass',
        'ssh_port' => 'setSshPort',
        'api_port' => 'setApiPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssh_private_key' => 'getSshPrivateKey',
        'ssh_public_key' => 'getSshPublicKey',
        'allow_partial_sync' => 'getAllowPartialSync',
        'as_user_root' => 'getAsUserRoot',
        'hostname' => 'getHostname',
        'friendly_name' => 'getFriendlyName',
        'ssh_user' => 'getSshUser',
        'import_type' => 'getImportType',
        'auth_kind' => 'getAuthKind',
        'auth_user' => 'getAuthUser',
        'auth_pass' => 'getAuthPass',
        'ssh_port' => 'getSshPort',
        'api_port' => 'getApiPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ssh_private_key', $data ?? [], null);
        $this->setIfExists('ssh_public_key', $data ?? [], null);
        $this->setIfExists('allow_partial_sync', $data ?? [], null);
        $this->setIfExists('as_user_root', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('friendly_name', $data ?? [], null);
        $this->setIfExists('ssh_user', $data ?? [], null);
        $this->setIfExists('import_type', $data ?? [], null);
        $this->setIfExists('auth_kind', $data ?? [], null);
        $this->setIfExists('auth_user', $data ?? [], null);
        $this->setIfExists('auth_pass', $data ?? [], null);
        $this->setIfExists('ssh_port', $data ?? [], null);
        $this->setIfExists('api_port', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['hostname'] === null) {
            $invalidProperties[] = "'hostname' can't be null";
        }
        if ($this->container['friendly_name'] === null) {
            $invalidProperties[] = "'friendly_name' can't be null";
        }
        if ($this->container['ssh_user'] === null) {
            $invalidProperties[] = "'ssh_user' can't be null";
        }
        if ($this->container['import_type'] === null) {
            $invalidProperties[] = "'import_type' can't be null";
        }
        if ($this->container['auth_kind'] === null) {
            $invalidProperties[] = "'auth_kind' can't be null";
        }
        if ($this->container['auth_user'] === null) {
            $invalidProperties[] = "'auth_user' can't be null";
        }
        if ($this->container['auth_pass'] === null) {
            $invalidProperties[] = "'auth_pass' can't be null";
        }
        if ($this->container['ssh_port'] === null) {
            $invalidProperties[] = "'ssh_port' can't be null";
        }
        if ($this->container['api_port'] === null) {
            $invalidProperties[] = "'api_port' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssh_private_key
     *
     * @return string|null
     */
    public function getSshPrivateKey()
    {
        return $this->container['ssh_private_key'];
    }

    /**
     * Sets ssh_private_key
     *
     * @param string|null $ssh_private_key ssh_private_key
     *
     * @return self
     */
    public function setSshPrivateKey($ssh_private_key)
    {
        if (is_null($ssh_private_key)) {
            throw new \InvalidArgumentException('non-nullable ssh_private_key cannot be null');
        }
        $this->container['ssh_private_key'] = $ssh_private_key;

        return $this;
    }

    /**
     * Gets ssh_public_key
     *
     * @return string|null
     */
    public function getSshPublicKey()
    {
        return $this->container['ssh_public_key'];
    }

    /**
     * Sets ssh_public_key
     *
     * @param string|null $ssh_public_key ssh_public_key
     *
     * @return self
     */
    public function setSshPublicKey($ssh_public_key)
    {
        if (is_null($ssh_public_key)) {
            throw new \InvalidArgumentException('non-nullable ssh_public_key cannot be null');
        }
        $this->container['ssh_public_key'] = $ssh_public_key;

        return $this;
    }

    /**
     * Gets allow_partial_sync
     *
     * @return bool|null
     */
    public function getAllowPartialSync()
    {
        return $this->container['allow_partial_sync'];
    }

    /**
     * Sets allow_partial_sync
     *
     * @param bool|null $allow_partial_sync allow_partial_sync
     *
     * @return self
     */
    public function setAllowPartialSync($allow_partial_sync)
    {
        if (is_null($allow_partial_sync)) {
            throw new \InvalidArgumentException('non-nullable allow_partial_sync cannot be null');
        }
        $this->container['allow_partial_sync'] = $allow_partial_sync;

        return $this;
    }

    /**
     * Gets as_user_root
     *
     * @return bool|null
     */
    public function getAsUserRoot()
    {
        return $this->container['as_user_root'];
    }

    /**
     * Sets as_user_root
     *
     * @param bool|null $as_user_root as_user_root
     *
     * @return self
     */
    public function setAsUserRoot($as_user_root)
    {
        if (is_null($as_user_root)) {
            throw new \InvalidArgumentException('non-nullable as_user_root cannot be null');
        }
        $this->container['as_user_root'] = $as_user_root;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string $friendly_name friendly_name
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {
        if (is_null($friendly_name)) {
            throw new \InvalidArgumentException('non-nullable friendly_name cannot be null');
        }
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets ssh_user
     *
     * @return string
     */
    public function getSshUser()
    {
        return $this->container['ssh_user'];
    }

    /**
     * Sets ssh_user
     *
     * @param string $ssh_user ssh_user
     *
     * @return self
     */
    public function setSshUser($ssh_user)
    {
        if (is_null($ssh_user)) {
            throw new \InvalidArgumentException('non-nullable ssh_user cannot be null');
        }
        $this->container['ssh_user'] = $ssh_user;

        return $this;
    }

    /**
     * Gets import_type
     *
     * @return \Upmind\EnhanceSdk\Model\ImportKind
     */
    public function getImportType()
    {
        return $this->container['import_type'];
    }

    /**
     * Sets import_type
     *
     * @param \Upmind\EnhanceSdk\Model\ImportKind $import_type import_type
     *
     * @return self
     */
    public function setImportType($import_type)
    {
        if (is_null($import_type)) {
            throw new \InvalidArgumentException('non-nullable import_type cannot be null');
        }
        $this->container['import_type'] = $import_type;

        return $this;
    }

    /**
     * Gets auth_kind
     *
     * @return \Upmind\EnhanceSdk\Model\ServerMigrationSettingsAuthType
     */
    public function getAuthKind()
    {
        return $this->container['auth_kind'];
    }

    /**
     * Sets auth_kind
     *
     * @param \Upmind\EnhanceSdk\Model\ServerMigrationSettingsAuthType $auth_kind auth_kind
     *
     * @return self
     */
    public function setAuthKind($auth_kind)
    {
        if (is_null($auth_kind)) {
            throw new \InvalidArgumentException('non-nullable auth_kind cannot be null');
        }
        $this->container['auth_kind'] = $auth_kind;

        return $this;
    }

    /**
     * Gets auth_user
     *
     * @return string
     */
    public function getAuthUser()
    {
        return $this->container['auth_user'];
    }

    /**
     * Sets auth_user
     *
     * @param string $auth_user auth_user
     *
     * @return self
     */
    public function setAuthUser($auth_user)
    {
        if (is_null($auth_user)) {
            throw new \InvalidArgumentException('non-nullable auth_user cannot be null');
        }
        $this->container['auth_user'] = $auth_user;

        return $this;
    }

    /**
     * Gets auth_pass
     *
     * @return string
     */
    public function getAuthPass()
    {
        return $this->container['auth_pass'];
    }

    /**
     * Sets auth_pass
     *
     * @param string $auth_pass auth_pass
     *
     * @return self
     */
    public function setAuthPass($auth_pass)
    {
        if (is_null($auth_pass)) {
            throw new \InvalidArgumentException('non-nullable auth_pass cannot be null');
        }
        $this->container['auth_pass'] = $auth_pass;

        return $this;
    }

    /**
     * Gets ssh_port
     *
     * @return float
     */
    public function getSshPort()
    {
        return $this->container['ssh_port'];
    }

    /**
     * Sets ssh_port
     *
     * @param float $ssh_port ssh_port
     *
     * @return self
     */
    public function setSshPort($ssh_port)
    {
        if (is_null($ssh_port)) {
            throw new \InvalidArgumentException('non-nullable ssh_port cannot be null');
        }
        $this->container['ssh_port'] = $ssh_port;

        return $this;
    }

    /**
     * Gets api_port
     *
     * @return float
     */
    public function getApiPort()
    {
        return $this->container['api_port'];
    }

    /**
     * Sets api_port
     *
     * @param float $api_port api_port
     *
     * @return self
     */
    public function setApiPort($api_port)
    {
        if (is_null($api_port)) {
            throw new \InvalidArgumentException('non-nullable api_port cannot be null');
        }
        $this->container['api_port'] = $api_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


