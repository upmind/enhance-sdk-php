<?php
/**
 * UpdatePlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * orchd
 *
 * orchd API docs
 *
 * The version of the OpenAPI document: 10.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Upmind\EnhanceSdk\Model;

use \ArrayAccess;
use \Upmind\EnhanceSdk\ObjectSerializer;

/**
 * UpdatePlan Class Doc Comment
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdatePlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdatePlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'plan_type' => '\Upmind\EnhanceSdk\Model\PlanType',
        'cgroup_limits' => '\Upmind\EnhanceSdk\Model\CgroupLimits',
        'fs_quota_limit' => '\Upmind\EnhanceSdk\Model\FsQuotaLimit',
        'allowed_php_versions' => '\Upmind\EnhanceSdk\Model\PhpVersion[]',
        'default_php_version' => '\Upmind\EnhanceSdk\Model\PhpVersion',
        'redis_allowed' => 'bool',
        'server_group_id' => 'string',
        'server_group_ids' => 'string[]',
        'allow_server_group_selection' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'plan_type' => null,
        'cgroup_limits' => null,
        'fs_quota_limit' => null,
        'allowed_php_versions' => null,
        'default_php_version' => null,
        'redis_allowed' => null,
        'server_group_id' => 'uuid',
        'server_group_ids' => 'uuid',
        'allow_server_group_selection' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'plan_type' => false,
        'cgroup_limits' => false,
        'fs_quota_limit' => false,
        'allowed_php_versions' => false,
        'default_php_version' => false,
        'redis_allowed' => false,
        'server_group_id' => false,
        'server_group_ids' => false,
        'allow_server_group_selection' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'plan_type' => 'planType',
        'cgroup_limits' => 'cgroupLimits',
        'fs_quota_limit' => 'fsQuotaLimit',
        'allowed_php_versions' => 'allowedPhpVersions',
        'default_php_version' => 'defaultPhpVersion',
        'redis_allowed' => 'redisAllowed',
        'server_group_id' => 'serverGroupId',
        'server_group_ids' => 'serverGroupIds',
        'allow_server_group_selection' => 'allowServerGroupSelection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'plan_type' => 'setPlanType',
        'cgroup_limits' => 'setCgroupLimits',
        'fs_quota_limit' => 'setFsQuotaLimit',
        'allowed_php_versions' => 'setAllowedPhpVersions',
        'default_php_version' => 'setDefaultPhpVersion',
        'redis_allowed' => 'setRedisAllowed',
        'server_group_id' => 'setServerGroupId',
        'server_group_ids' => 'setServerGroupIds',
        'allow_server_group_selection' => 'setAllowServerGroupSelection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'plan_type' => 'getPlanType',
        'cgroup_limits' => 'getCgroupLimits',
        'fs_quota_limit' => 'getFsQuotaLimit',
        'allowed_php_versions' => 'getAllowedPhpVersions',
        'default_php_version' => 'getDefaultPhpVersion',
        'redis_allowed' => 'getRedisAllowed',
        'server_group_id' => 'getServerGroupId',
        'server_group_ids' => 'getServerGroupIds',
        'allow_server_group_selection' => 'getAllowServerGroupSelection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('plan_type', $data ?? [], null);
        $this->setIfExists('cgroup_limits', $data ?? [], null);
        $this->setIfExists('fs_quota_limit', $data ?? [], null);
        $this->setIfExists('allowed_php_versions', $data ?? [], null);
        $this->setIfExists('default_php_version', $data ?? [], null);
        $this->setIfExists('redis_allowed', $data ?? [], null);
        $this->setIfExists('server_group_id', $data ?? [], null);
        $this->setIfExists('server_group_ids', $data ?? [], null);
        $this->setIfExists('allow_server_group_selection', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plan_type
     *
     * @return \Upmind\EnhanceSdk\Model\PlanType|null
     */
    public function getPlanType()
    {
        return $this->container['plan_type'];
    }

    /**
     * Sets plan_type
     *
     * @param \Upmind\EnhanceSdk\Model\PlanType|null $plan_type plan_type
     *
     * @return self
     */
    public function setPlanType($plan_type)
    {
        if (is_null($plan_type)) {
            throw new \InvalidArgumentException('non-nullable plan_type cannot be null');
        }
        $this->container['plan_type'] = $plan_type;

        return $this;
    }

    /**
     * Gets cgroup_limits
     *
     * @return \Upmind\EnhanceSdk\Model\CgroupLimits|null
     */
    public function getCgroupLimits()
    {
        return $this->container['cgroup_limits'];
    }

    /**
     * Sets cgroup_limits
     *
     * @param \Upmind\EnhanceSdk\Model\CgroupLimits|null $cgroup_limits cgroup_limits
     *
     * @return self
     */
    public function setCgroupLimits($cgroup_limits)
    {
        if (is_null($cgroup_limits)) {
            throw new \InvalidArgumentException('non-nullable cgroup_limits cannot be null');
        }
        $this->container['cgroup_limits'] = $cgroup_limits;

        return $this;
    }

    /**
     * Gets fs_quota_limit
     *
     * @return \Upmind\EnhanceSdk\Model\FsQuotaLimit|null
     */
    public function getFsQuotaLimit()
    {
        return $this->container['fs_quota_limit'];
    }

    /**
     * Sets fs_quota_limit
     *
     * @param \Upmind\EnhanceSdk\Model\FsQuotaLimit|null $fs_quota_limit fs_quota_limit
     *
     * @return self
     */
    public function setFsQuotaLimit($fs_quota_limit)
    {
        if (is_null($fs_quota_limit)) {
            throw new \InvalidArgumentException('non-nullable fs_quota_limit cannot be null');
        }
        $this->container['fs_quota_limit'] = $fs_quota_limit;

        return $this;
    }

    /**
     * Gets allowed_php_versions
     *
     * @return \Upmind\EnhanceSdk\Model\PhpVersion[]|null
     */
    public function getAllowedPhpVersions()
    {
        return $this->container['allowed_php_versions'];
    }

    /**
     * Sets allowed_php_versions
     *
     * @param \Upmind\EnhanceSdk\Model\PhpVersion[]|null $allowed_php_versions allowed_php_versions
     *
     * @return self
     */
    public function setAllowedPhpVersions($allowed_php_versions)
    {
        if (is_null($allowed_php_versions)) {
            throw new \InvalidArgumentException('non-nullable allowed_php_versions cannot be null');
        }
        $this->container['allowed_php_versions'] = $allowed_php_versions;

        return $this;
    }

    /**
     * Gets default_php_version
     *
     * @return \Upmind\EnhanceSdk\Model\PhpVersion|null
     */
    public function getDefaultPhpVersion()
    {
        return $this->container['default_php_version'];
    }

    /**
     * Sets default_php_version
     *
     * @param \Upmind\EnhanceSdk\Model\PhpVersion|null $default_php_version default_php_version
     *
     * @return self
     */
    public function setDefaultPhpVersion($default_php_version)
    {
        if (is_null($default_php_version)) {
            throw new \InvalidArgumentException('non-nullable default_php_version cannot be null');
        }
        $this->container['default_php_version'] = $default_php_version;

        return $this;
    }

    /**
     * Gets redis_allowed
     *
     * @return bool|null
     */
    public function getRedisAllowed()
    {
        return $this->container['redis_allowed'];
    }

    /**
     * Sets redis_allowed
     *
     * @param bool|null $redis_allowed redis_allowed
     *
     * @return self
     */
    public function setRedisAllowed($redis_allowed)
    {
        if (is_null($redis_allowed)) {
            throw new \InvalidArgumentException('non-nullable redis_allowed cannot be null');
        }
        $this->container['redis_allowed'] = $redis_allowed;

        return $this;
    }

    /**
     * Gets server_group_id
     *
     * @return string|null
     * @deprecated
     */
    public function getServerGroupId()
    {
        return $this->container['server_group_id'];
    }

    /**
     * Sets server_group_id
     *
     * @param string|null $server_group_id server_group_id
     *
     * @return self
     * @deprecated
     */
    public function setServerGroupId($server_group_id)
    {
        if (is_null($server_group_id)) {
            throw new \InvalidArgumentException('non-nullable server_group_id cannot be null');
        }
        $this->container['server_group_id'] = $server_group_id;

        return $this;
    }

    /**
     * Gets server_group_ids
     *
     * @return string[]|null
     */
    public function getServerGroupIds()
    {
        return $this->container['server_group_ids'];
    }

    /**
     * Sets server_group_ids
     *
     * @param string[]|null $server_group_ids server_group_ids
     *
     * @return self
     */
    public function setServerGroupIds($server_group_ids)
    {
        if (is_null($server_group_ids)) {
            throw new \InvalidArgumentException('non-nullable server_group_ids cannot be null');
        }
        $this->container['server_group_ids'] = $server_group_ids;

        return $this;
    }

    /**
     * Gets allow_server_group_selection
     *
     * @return bool|null
     */
    public function getAllowServerGroupSelection()
    {
        return $this->container['allow_server_group_selection'];
    }

    /**
     * Sets allow_server_group_selection
     *
     * @param bool|null $allow_server_group_selection Whether the customer can select the server group for their websites.
     *
     * @return self
     */
    public function setAllowServerGroupSelection($allow_server_group_selection)
    {
        if (is_null($allow_server_group_selection)) {
            throw new \InvalidArgumentException('non-nullable allow_server_group_selection cannot be null');
        }
        $this->container['allow_server_group_selection'] = $allow_server_group_selection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


