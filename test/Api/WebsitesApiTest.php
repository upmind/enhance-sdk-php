<?php
/**
 * WebsitesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * orchd
 *
 * orchd API docs
 *
 * The version of the OpenAPI document: 10.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Upmind\EnhanceSdk\Test\Api;

use \Upmind\EnhanceSdk\Configuration;
use \Upmind\EnhanceSdk\ApiException;
use \Upmind\EnhanceSdk\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WebsitesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebsitesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addDomainNginxFastCgiExcludedPath
     *
     * Add Nginx FastCGI excluded path.
     *
     */
    public function testAddDomainNginxFastCgiExcludedPath()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authorizeWebsiteSshKey
     *
     * Authorize a new SSH key..
     *
     */
    public function testAuthorizeWebsiteSshKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authorizeWebsiteSshPassword
     *
     * Authorize a new SSH password for website..
     *
     */
    public function testAuthorizeWebsiteSshPassword()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clearDomainNginxFastCgi
     *
     * Clear FastCGI cache for domain.
     *
     */
    public function testClearDomainNginxFastCgi()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createFtpUser
     *
     * Creates a new FTP user for a given website.
     *
     */
    public function testCreateFtpUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPreviewDomain
     *
     * Create a preview domain.
     *
     */
    public function testCreatePreviewDomain()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsite
     *
     * Create a new website or clone an existing one..
     *
     */
    public function testCreateWebsite()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsiteDomainLetsencryptCerts
     *
     * Generate and setup letsencrypt ssl certificates for website's domain.
     *
     */
    public function testCreateWebsiteDomainLetsencryptCerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsiteMappedDomain
     *
     * Create website mapped domain.
     *
     */
    public function testCreateWebsiteMappedDomain()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsiteMySQLDB
     *
     * Create a MySQL database for website.
     *
     */
    public function testCreateWebsiteMySQLDB()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteDomainNginxFastCgiExcludedPath
     *
     * Delete Nginx FastCGI excluded path.
     *
     */
    public function testDeleteDomainNginxFastCgiExcludedPath()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteDomainWebserverRewrite
     *
     * Delete web server rewrite.
     *
     */
    public function testDeleteDomainWebserverRewrite()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteFtpUser
     *
     * Deletes given FTP user.
     *
     */
    public function testDeleteFtpUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCrontab
     *
     * Delete user's crontab.
     *
     */
    public function testDeleteUserCrontab()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsite
     *
     * Delete website.
     *
     */
    public function testDeleteWebsite()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsiteDomainMapping
     *
     * Delete website domain mapping.
     *
     */
    public function testDeleteWebsiteDomainMapping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsiteDomainVhost
     *
     * Deletes domain's custom vhost file if any.
     *
     */
    public function testDeleteWebsiteDomainVhost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsiteSetting
     *
     * Delete a single override setting.
     *
     */
    public function testDeleteWebsiteSetting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsites
     *
     * Delete websites.
     *
     */
    public function testDeleteWebsites()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDomainNginxFastCgi
     *
     * Get status of Nginx FastCGI enablement.
     *
     */
    public function testGetDomainNginxFastCgi()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDomainNginxFastCgiExcludedPaths
     *
     * Get Nginx FastCGI excluded paths.
     *
     */
    public function testGetDomainNginxFastCgiExcludedPaths()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDomainWebserverRewrites
     *
     * Get web server rewrites for specified domain.
     *
     */
    public function testGetDomainWebserverRewrites()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFtpUsers
     *
     * Returns all ftp users data for a given website.
     *
     */
    public function testGetFtpUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getScreenshotTimestamp
     *
     * Get last screeshot file's Timestamp.
     *
     */
    public function testGetScreenshotTimestamp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSiteAccessToken
     *
     * Get an access token for the given website.
     *
     */
    public function testGetSiteAccessToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getUserCrontab
     *
     * Get user's crontab.
     *
     */
    public function testGetUserCrontab()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsite
     *
     * Get website.
     *
     */
    public function testGetWebsite()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteBackupStatus
     *
     * Get the status of an ongoing website backup operation.
     *
     */
    public function testGetWebsiteBackupStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteCgroupLimits
     *
     * Get the active cgroup limits for a website.
     *
     */
    public function testGetWebsiteCgroupLimits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteClonesStatus
     *
     * Get the status of the clone operation of a given website.
     *
     */
    public function testGetWebsiteClonesStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainDnsQuery
     *
     * Recursively query Dns servers for given domain.
     *
     */
    public function testGetWebsiteDomainDnsQuery()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainMapping
     *
     * Returns website domain mapping.
     *
     */
    public function testGetWebsiteDomainMapping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainMappingDnsStatus
     *
     * Returns website domain mapping DNS status.
     *
     */
    public function testGetWebsiteDomainMappingDnsStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainMappings
     *
     * Get website's mapped domains.
     *
     */
    public function testGetWebsiteDomainMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainModSecStatus
     *
     * Get mod security status for a single domain.
     *
     */
    public function testGetWebsiteDomainModSecStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainSslCert
     *
     * Returns the SSL for this website domain.
     *
     */
    public function testGetWebsiteDomainSslCert()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainVhost
     *
     * Get domain's custom vhost file, if the file does not exist return empty string.
     *
     */
    public function testGetWebsiteDomainVhost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteFsQuotaLimits
     *
     * Get the active FS quoa limits for a website.
     *
     */
    public function testGetWebsiteFsQuotaLimits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteHtaccessIpsRule
     *
     * Returns current rules of blocked/whitelisted IPs.
     *
     */
    public function testGetWebsiteHtaccessIpsRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteHtaccessRewrites
     *
     * Reads chains of rewrite rules.
     *
     */
    public function testGetWebsiteHtaccessRewrites()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteIoncubeStatus
     *
     * Get ioncube status for an existing website.
     *
     */
    public function testGetWebsiteIoncubeStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteMetrics
     *
     * Get website metrics.
     *
     */
    public function testGetWebsiteMetrics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteMySQLDBs
     *
     * Get website MySQL databases.
     *
     */
    public function testGetWebsiteMySQLDBs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteRedisState
     *
     * Get redis state for a website.
     *
     */
    public function testGetWebsiteRedisState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteServerDomains
     *
     * Fetch website server domains.
     *
     */
    public function testGetWebsiteServerDomains()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteSetting
     *
     * Get the value for a particular setting.
     *
     */
    public function testGetWebsiteSetting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteSshKeys
     *
     * Get website's authorized SSH keys.
     *
     */
    public function testGetWebsiteSshKeys()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteWebserverKind
     *
     * Get web server kind for a given website.
     *
     */
    public function testGetWebsiteWebserverKind()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsites
     *
     * Get websites.
     *
     */
    public function testGetWebsites()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for performLetsEncryptPreflightCheck
     *
     * Perform the LetsEncrypt preflight check.
     *
     */
    public function testPerformLetsEncryptPreflightCheck()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pushWebsiteLive
     *
     * Making a staging website live.
     *
     */
    public function testPushWebsiteLive()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restartWebsitePhp
     *
     * Restart PHP container for a website.
     *
     */
    public function testRestartWebsitePhp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setDomainNginxFastCgi
     *
     * Set Nginx FastCGI enablement.
     *
     */
    public function testSetDomainNginxFastCgi()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setDomainWebserverRewrite
     *
     * Set web server rewrite to file.
     *
     */
    public function testSetDomainWebserverRewrite()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteCgroupLimits
     *
     * Set the active cgroup limits for a website (Master org only).
     *
     */
    public function testSetWebsiteCgroupLimits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteDomainForceSsl
     *
     * Set \"force ssl\" status for domain mapping.
     *
     */
    public function testSetWebsiteDomainForceSsl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteDomainModSecStatus
     *
     * Set mod security status on a single domain.
     *
     */
    public function testSetWebsiteDomainModSecStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteDomainVhost
     *
     * Set a custom vhost file.
     *
     */
    public function testSetWebsiteDomainVhost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteFsQuotaLimits
     *
     * Set the active FS quota limits for a website (Master org only).
     *
     */
    public function testSetWebsiteFsQuotaLimits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteIoncubeStatus
     *
     * Set ioncube status for an existing website.
     *
     */
    public function testSetWebsiteIoncubeStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteRedisState
     *
     * Set Redis state for an existing website.
     *
     */
    public function testSetWebsiteRedisState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteSetting
     *
     * Set a single override setting.
     *
     */
    public function testSetWebsiteSetting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for takeScreenshot
     *
     * Sends command to take website screenshot.
     *
     */
    public function testTakeScreenshot()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unauthorizeWebsiteSshKey
     *
     * Unauthorize the public SSH key with the given ID..
     *
     */
    public function testUnauthorizeWebsiteSshKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateFtpUser
     *
     * Update given FTP user.
     *
     */
    public function testUpdateFtpUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUserCrontab
     *
     * Update user's crontab.
     *
     */
    public function testUpdateUserCrontab()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsite
     *
     * Update website.
     *
     */
    public function testUpdateWebsite()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteDomainMapping
     *
     * Update website domain mapping.
     *
     */
    public function testUpdateWebsiteDomainMapping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteHtaccessIpsRule
     *
     * Sets a rule over provided ips - either block or allow.
     *
     */
    public function testUpdateWebsiteHtaccessIpsRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteHtaccessRewrites
     *
     * Updates rewrite rules.
     *
     */
    public function testUpdateWebsiteHtaccessRewrites()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsitePrimaryDomain
     *
     * Update primary domain mapping.
     *
     */
    public function testUpdateWebsitePrimaryDomain()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteSshKey
     *
     * Update an existing website public SSH key..
     *
     */
    public function testUpdateWebsiteSshKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadWebsiteDomainSslCert
     *
     * Upload custom ssl certificate, key and optional fullchain for a given website.
     *
     */
    public function testUploadWebsiteDomainSslCert()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for validateWebsiteOperation
     *
     * Validate whether a website operation is allowed.
     *
     */
    public function testValidateWebsiteOperation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
